package syntacticAnalyzer;

import abstractSyntax.ConformantArray.*;
import abstractSyntax.Constant.*;
import abstractSyntax.Exp.*;
import abstractSyntax.FormalParameter.*;
import abstractSyntax.labelsAndTypes.*;
import abstractSyntax.Node.*;
import abstractSyntax.Operator.*;
import abstractSyntax.procedureAndFunctionDeclaration.*;
import abstractSyntax.Stm.*;
import abstractSyntax.variablesDeclaration.*;

import java.io.FileInputStream;
import lexicalAnalyzer.Lexer;
import java.io.IOException;
import java.nio.file.Paths;
import java_cup.runtime.*;
import java.io.File;
import java.util.*;

parser code {:
  protected Lexer lexer; :};
/* define how to connect to the lexicalAnalyzer! */
init with {:
    ComplexSymbolFactory f = new ComplexSymbolFactory();
    symbolFactory = f;
    File file = new File(Paths.get("").toAbsolutePath().toString() + "/src/" + "input.txt");
    FileInputStream fis = null;
    try {
        fis = new FileInputStream(file);
    } catch (IOException e) {
        e.printStackTrace();
    }
    lexer = new Lexer(f,fis);
:};

scan with {:
    return lexer.next_token();
:};

/* @@@@@@@@@@@@ terminals (tokens returned by the lexicalAnalyzer) @@@@@@@@@@@@ */
terminal IF, SEMICOLON, PLUS, MINUS, TIMES, LPAR, RPAR, DOT, EQUAL;
terminal LBRA, RBRA, LABEL, COMMA;
terminal String ID, STRINGCHARACTER;
terminal TYPE, ARRAY, OF, VAR, PROCEDURE, FUNCTION, BEGIN, END, GOTO, THEN;
terminal int NUMINT;

terminal BOOLEAN, FALSE, TRUE, DO, ELSE, PROGRAM, WHILE, OR, AND, NOT, GT, LT, LE, GE, DIFF;
terminal DOUBLEDOT, COLON, DIVIDE, MOD, CHAR, STRING, ASSIGN;
terminal TO, IN, CONSTRUCTOR, DESTRUCTOR, UNTIL, INTEGER, MULTIPLY, INTERFACE, SINGLEQUOTE, DOUBLEQUOTE,
         FOWARD, DOWNTO, INLINE, REPEAT, RECORD, CARET, CONST, OBJECT, IMPLEMENTATION, PACKED, CHARACTER,
         NUMREAL, DIV, SHL, SHR, SET, ASM, NIL, FOR, XOR, REAL, USES, UNIT, FILE, CASE, WITH;
terminal Character LITERALCHARACTER;


/* @@@@@@@@@@@@ Non terminals @@@@@@@@@@@@ */
non terminal Program program;
non terminal Block block;
non terminal List<String> id_list;
non terminal List<Integer> label_declaration_part;
non terminal List<Integer> label_list;
non terminal TypeDefinition type_definition;
non terminal List<TypeDefinition> type_definition_sequence;
non terminal TypeDenoter type_denoter, new_type;
non terminal TypeDenoter array_type;
non terminal EnumeratedType enumerated_type;
non terminal SubrangeType subrange_type;
non terminal TypeDenoter ordinal_type;
non terminal List <TypeDenoter> ordinal_type_list;
non terminal PrimitiveType primitive_type;
non terminal TypeIdOrPrimitive type_id_or_primitive, type_id;
non terminal List<TypeDefinition> type_definition_part;
non terminal List<VariableDeclaration> variable_declaration;
non terminal List<VariableDeclaration> variable_declaration_part, variable_declaration_sequence;
non terminal List<ProcedureOrFunctionDeclaration> procedure_and_function_declaration_part;
non terminal Constant constant;
non terminal ProcedureDeclaration procedure_declaration, procedure_heading;
non terminal FunctionDeclaration function_declaration, function_heading;
non terminal List<FormalParameter> formal_parameter;
non terminal List<FormalParameter> formal_parameter_list;
non terminal ConformantArraySchema conformant_array_schema;
non terminal IndexType index_type_specification;
non terminal List<IndexType> index_type_spec_list;
non terminal Statement statement, statement_, compound_statement;
non terminal List<Statement> statement_sequence;
non terminal VariableAccess variable_access;
non terminal Expression expression, simple_expression, term, factor;
non terminal List<Expression> expression_list;
non terminal RelationalOperator relational_operator;
non terminal BinaryArithmeticOperator arithmetic_operator;
non terminal BinaryBooleanOperator boolean_operator;
non terminal Sign sign;
non terminal unsigned_constant;


/* Precedences */
precedence nonassoc ELSE;

/* @@@@@@@@@@@@ Grammar rules and syntatic evaluation @@@@@@@@@@@@ */

/* program */
program ::= PROGRAM ID:nm SEMICOLON block:bl DOT
            {: RESULT = new Program(nm, Collections.EMPTY_LIST, bl); :}
          | PROGRAM ID:nm LPAR id_list:ids RPAR SEMICOLON block:bl DOT
            {: RESULT = new Program(nm, ids, bl); :};

/* identifier list */
id_list ::= id_list:nms COMMA ID:id {: nms.add(id); RESULT = nms;:}
          | ID:nm {: List<String> ids = new ArrayList<String>(); ids.add(nm);
            RESULT = ids; :};

/* block */
block ::=  label_declaration_part:labels
           type_definition_part:typeDefs
           variable_declaration_part:varDecs
           procedure_and_function_declaration_part:subprogDecs
           compound_statement:body
           {: RESULT = new Block(labels, typeDefs, varDecs, subprogDecs, body); :};

/* label */
label_declaration_part ::= LABEL label_list:labels SEMICOLON
                            {: RESULT = labels; :}
                          | {: RESULT = Collections.EMPTY_LIST; :};

label_list ::= NUMINT:n {: List<Integer> list = new ArrayList<>(); list.add(n);
                           RESULT = list; :}
             |  label_list:labels COMMA NUMINT:n
                {: labels.add(n); RESULT = labels; :};

/* Type Definition */
type_definition_part ::= TYPE type_definition_sequence:typeDefs
                          {: RESULT = typeDefs; :}
                        | {: RESULT = Collections.EMPTY_LIST; :} ;

type_definition_sequence ::= type_definition_sequence:defs type_definition:typeDef
                             {: defs.add(typeDef); RESULT = defs; :}
                            | type_definition:typeDef
                              {: List<TypeDefinition> types = new ArrayList<>(); types.add(typeDef);
                               RESULT = types; :};

type_definition ::= ID:id EQUAL type_denoter:type_den SEMICOLON
                    {: RESULT = new TypeDefinition(id,type_den); :};

type_denoter ::=  ID:id {: RESULT = new TypeId(id); :}
                | primitive_type:type {: RESULT = type; :}
                | new_type:type {: RESULT = type; :};

primitive_type ::=  INTEGER {: RESULT = PrimitiveType.INTEGER; :}
                  | CHAR {: RESULT = PrimitiveType.CHAR; :}
                  | STRING {: RESULT = PrimitiveType.STRING; :}
                  | BOOLEAN {: RESULT = PrimitiveType.BOOLEAN; :};

new_type ::= enumerated_type:enumType {: RESULT = enumType; :}
           | subrange_type:subRangeType {: RESULT = subRangeType; :}
           | array_type:arrayType {: RESULT = arrayType; :};

array_type ::= ARRAY LBRA ordinal_type_list:ords RBRA OF type_denoter:type
         {: TypeDenoter elemTy = type;
            for (int i=ords.size()-1; i>0; i--)
              elemTy = new Array((TypeIdOrOrdinal) ords.get(i), elemTy);
            RESULT = new Array((TypeIdOrOrdinal) ords.get(0), elemTy); :};


ordinal_type_list ::= ordinal_type_list:ords COMMA ordinal_type:type
                      {: ords.add(type); RESULT = ords; :}
            		| ordinal_type:type {: List<TypeDenoter> ords = new ArrayList<>();
            		                       ords.add(type); RESULT = ords; :};

ordinal_type ::=  enumerated_type:type {: RESULT = type; :}
                | subrange_type:type {: RESULT = type; :}
            	| type_id_or_primitive:type
                {: RESULT = type instanceof TypeId ? (TypeId) type : (PrimitiveType) type; :};

enumerated_type ::= LPAR id_list:idList RPAR {: RESULT = new EnumeratedType(idList); :};

subrange_type ::= constant:const1 DOUBLEDOT constant:const2 {: RESULT = new SubrangeType(const1, const2); :};

constant ::=  NUMINT:n           {: RESULT = new UnsignedNumber(n); :}
            | MINUS NUMINT:n     {: RESULT = new SignedNumber(Sign.MINUS, new UnsignedNumber(n)); :}
            | PLUS NUMINT:n      {: RESULT = new SignedNumber(Sign.PLUS, new UnsignedNumber(n)); :}
            | LITERALCHARACTER:c {: RESULT = new CharacterConstant(c); :}
            | TRUE               {: RESULT = BooleanConstant.TRUE; :}
            | FALSE              {: RESULT = BooleanConstant.FALSE; :};

/* Variable Declaration */

variable_declaration_part ::= VAR variable_declaration_sequence:varDecs {: RESULT = varDecs; :}
                             | {: RESULT = Collections.EMPTY_LIST; :};

variable_declaration_sequence ::= variable_declaration_sequence:decs1 variable_declaration:decs2
                                  {: decs1.addAll(decs2); RESULT = decs1; :}
                                | variable_declaration:decs {: RESULT = decs; :};

variable_declaration ::= id_list:ids COLON type_denoter:type SEMICOLON
                         {: List<VariableDeclaration> decs = new ArrayList<VariableDeclaration>();
                            for (String nm : ids) decs.add(new VariableDeclaration(nm, type));
                            RESULT = decs; :};

/* procedure and function Declaration */
procedure_and_function_declaration_part ::=
                                  procedure_and_function_declaration_part:decs procedure_declaration:proc SEMICOLON
                                  {: decs.add(proc); RESULT = decs; :}
                                | procedure_and_function_declaration_part:decs function_declaration:func SEMICOLON
                                  {: decs.add(func); RESULT = decs; :}
                                | {: RESULT = new ArrayList<ProcedureOrFunctionDeclaration>(); :};

procedure_declaration ::= procedure_heading:procDec SEMICOLON block:block
                          {: procDec.body = block; RESULT = procDec; :};

function_declaration ::= function_heading:funcDec SEMICOLON block:block
                         {: funcDec.body = block; RESULT = funcDec; :};

procedure_heading ::= PROCEDURE ID:nm
                      {: RESULT = new ProcedureDeclaration(nm, Collections.EMPTY_LIST, null); :}
                    | PROCEDURE ID:nm LPAR formal_parameter_list:formals RPAR
                      {: RESULT = new ProcedureDeclaration(nm, formals, null); :};

function_heading ::= FUNCTION ID:nm COLON type_id_or_primitive:retType
                     {: RESULT = new FunctionDeclaration(nm, Collections.EMPTY_LIST, retType, null); :}
                   | FUNCTION ID:nm LPAR formal_parameter_list:formals RPAR COLON type_id_or_primitive:retType
                     {: RESULT = new FunctionDeclaration(nm, formals, retType, null); :};

type_id_or_primitive ::= primitive_type:type {: RESULT = type; :}
                        | ID:id {: RESULT = new TypeId(id); :};

/* Formals */
formal_parameter_list ::= formal_parameter_list:fp_list SEMICOLON formal_parameter:fp
                          {: fp_list.addAll(fp); RESULT = fp_list; :}
                        | formal_parameter:fp {: List<FormalParameter> formals = new ArrayList<>();
                                                 formals.addAll(fp); RESULT = formals; :};

formal_parameter ::= id_list:ids COLON type_id_or_primitive:type  {: List<FormalParameter> formals = new ArrayList<FormalParameter>();
                                                                     for (String id : ids) formals.add(new FormalPar(RefOrValue.Val, id, type));
                                                                     RESULT = formals; :}
					| VAR id_list:ids COLON type_id_or_primitive:type {: List<FormalParameter> formals = new ArrayList<FormalParameter>();
                                                                         for (String id : ids) formals.add(new FormalPar(RefOrValue.Ref, id, type));
                                                                         RESULT = formals; :}
					| id_list:ids COLON conformant_array_schema:schema
                      {: List<FormalParameter> conformantArray = new ArrayList<FormalParameter>();
                         for (String id : ids) conformantArray.add(new ConformantArrayParameter(RefOrValue.Val, id, schema));
                         RESULT = conformantArray; :}
					| VAR id_list:ids COLON conformant_array_schema:schema
                      {: List<FormalParameter> conformantArray = new ArrayList<FormalParameter>();
                         for (String id : ids) conformantArray.add(new ConformantArrayParameter(RefOrValue.Ref, id, schema));
                         RESULT = conformantArray; :};

/* Parameter and identifier Specification */
conformant_array_schema ::=  ARRAY LBRA index_type_spec_list:indexList RBRA OF type_id_or_primitive:type {:
                             TypeIdOrPrimitive type_ = (type instanceof TypeId)? (TypeId) type : (PrimitiveType) type;
                             ConformantArraySchema elemTy = new OneDimensionConformant(
                                                                         indexList.get(indexList.size()-1).lowId,
                                                                         indexList.get(indexList.size()-1).highId,
                                                                         indexList.get(indexList.size()-1).rangeTy, type_);
                                for (int i = indexList.size()-2; i >= 0; i--)
                                    elemTy = new MultiDimensionConformant(indexList.get(i).lowId, indexList.get(i).highId,
                                                           indexList.get(i).rangeTy, elemTy);
                                RESULT = elemTy;
                             :}
						   | ARRAY LBRA index_type_spec_list:indexList RBRA OF conformant_array_schema:type {:
						     ConformantArraySchema elemTy = new MultiDimensionConformant(
						                                                 indexList.get(indexList.size()-1).lowId,
                                                                         indexList.get(indexList.size()-1).highId,
                                                                         indexList.get(indexList.size()-1).rangeTy, type);
                              for (int i = indexList.size()-2; i >= 0; i--)
                                  elemTy = new MultiDimensionConformant(indexList.get(i).lowId, indexList.get(i).highId,
                                                                 indexList.get(i).rangeTy,(ConformantArraySchema) elemTy);
                              RESULT = elemTy;
                           :};

index_type_spec_list ::= index_type_specification:index SEMICOLON index_type_spec_list:list
                         {: list.add(index); RESULT = list; :}
                       | index_type_specification:index {: List<IndexType> indexTypeList = new ArrayList<IndexType>();
                                                           indexTypeList.add(index); RESULT = indexTypeList; :};

index_type_specification ::= ID:low DOUBLEDOT ID:high COLON type_id_or_primitive:type
                             {: RESULT = new IndexType(low, high, type); :};

/* Statements */
statement ::= statement_:stm {: RESULT = stm; :}
			 | NUMINT:num COLON statement_:stm {: RESULT = new LabeledStatement(num, stm); :};

statement_ ::= variable_access:varAccess ASSIGN expression:exp {: RESULT = new AssignmentStatement(varAccess, exp); :}
			 | ID:id {: RESULT = new ProcedureStatement(id, Collections.EMPTY_LIST); :}
			 | ID:id LPAR expression_list:expList RPAR {: RESULT = new ProcedureStatement(id, expList); :}
			 | GOTO NUMINT:num {: RESULT = new GotoStatement(new UnsignedNumber(num)); :}
			 | compound_statement:cmpStm {: RESULT = cmpStm; :}
			 | IF expression:exp THEN statement:stm {: RESULT = new IfStatement(exp, stm, null); :}
			 | IF expression:exp THEN statement:stm ELSE statement:stm2 {: RESULT = new IfStatement(exp, stm, stm2); :}
			 | WHILE expression:exp DO statement:stm {: RESULT = new WhileStatement(exp, stm); :}
			 | /*empty statement*/ {: RESULT = new EmptyStatement(); :} ;

compound_statement ::= BEGIN statement_sequence:cmpStmList END {: RESULT = new CompoundStatement(cmpStmList); :};

statement_sequence ::= statement_sequence:stms SEMICOLON statement:stm {: stms.add(stm); RESULT = stms; :}
					|  statement:stm {: List<Statement> stmList = new ArrayList<Statement>();
					                    stmList.add(stm); RESULT = stmList; :};

/* expression */
expression ::= simple_expression:simple_exp {:RESULT = simple_exp;:}
             | expression:exp relational_operator:relational_oper simple_expression:simple_exp
             {: RESULT = new RelationalExpression(relational_oper, exp, simple_exp); :};

simple_expression ::= simple_expression:simple_exp arithmetic_operator:op term:term
                      {: RESULT =
                            new BinaryArithmeticExpression((BinaryArithmeticOperator) op, simple_exp, term); :}
                    | sign:sign term:term {: RESULT = new SignedExpression(sign, term); :}
                    | term:term {: RESULT = term; :};

term ::= term:term boolean_operator:op factor:fator
        {: RESULT =  new BinaryBooleanExpression((BinaryBooleanOperator) op, term, fator); :}
       | factor:fator {: RESULT = fator; :};

factor ::= variable_access:var {: RESULT = var; :}
		 | LITERALCHARACTER:chr {: RESULT = new CharacterLiteral(chr); :}
		 | STRINGCHARACTER:str {: RESULT = new StringLiteral(str); :}
		 | NUMINT:num {: RESULT = new NumberLiteral(num); :}
		 | ID:id LPAR expression_list:expList RPAR {: RESULT = new FunctionDesignator(id, expList); :}
		 | LPAR expression:exp RPAR {: RESULT = exp; :}
		 | NOT factor:factor {: RESULT = new NotExpression(factor); :};

/* Operator */
arithmetic_operator ::= TIMES      {:RESULT = BinaryArithmeticOperator.TIMES;:}
                       | DIVIDE    {:RESULT = BinaryArithmeticOperator.DIV;:}
                       | MOD       {:RESULT = BinaryArithmeticOperator.MOD;:}
                       | PLUS      {:RESULT = BinaryArithmeticOperator.PLUS;:}
                       | MINUS     {:RESULT = BinaryArithmeticOperator.MINUS;:};

relational_operator ::= LT    {:RESULT = RelationalOperator.LT;:}
                      | LE    {:RESULT = RelationalOperator.LTE;:}
                      | GT    {:RESULT = RelationalOperator.GT;:}
                      | GE    {:RESULT = RelationalOperator.GTE;:}
                      | EQUAL {:RESULT = RelationalOperator.EQ;:}
                      | DIFF  {:RESULT = RelationalOperator.NEQ;:};

unsigned_constant ::= NUMINT:num          {: RESULT = new UnsignedNumber(num); :}
                    | STRINGCHARACTER:str {: RESULT = new StringLiteral(str); :}
                    | LITERALCHARACTER:ch {: RESULT = new CharLiteral(ch); :};

boolean_operator ::= AND       {:RESULT = BinaryBooleanOperator.AND;:}
                   | OR        {:RESULT = BinaryBooleanOperator.OR;:};

sign ::= MINUS {: RESULT = Sign.MINUS; :}
       | PLUS  {: RESULT = Sign.PLUS; :};

variable_access ::= ID:id  {: RESULT = new Variable(id); :}
                  | variable_access:var_access LBRA expression_list:exp_list RBRA
                           {: IndexedVariable var = new IndexedVariable(var_access, exp_list.get(0));
                           for (Expression exp : exp_list.subList(1, exp_list.size())) var = new IndexedVariable(var, exp);
                           RESULT = var; :};

expression_list ::= expression:exp	{: List<Expression> list = new ArrayList<Expression>();
                              	       list.add(exp); RESULT = list; :}
				  | expression_list:expList COMMA expression:exp {: expList.add(exp); RESULT = expList; :};