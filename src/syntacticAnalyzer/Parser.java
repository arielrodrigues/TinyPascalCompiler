
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package syntacticAnalyzer;

import abstractSyntax.ConformantArray.*;
import abstractSyntax.Constant.*;
import abstractSyntax.Exp.*;
import abstractSyntax.FormalParameter.*;
import abstractSyntax.labelsAndTypes.*;
import abstractSyntax.Node.*;
import abstractSyntax.Operator.*;
import abstractSyntax.procedureAndFunctionDeclaration.*;
import abstractSyntax.Stm.*;
import abstractSyntax.variablesDeclaration.*;
import java.io.FileInputStream;
import lexicalAnalyzer.Lexer;
import java.io.IOException;
import java.nio.file.Paths;
import java_cup.runtime.*;
import java.io.File;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\007\000\002\002\004\000\002\002" +
    "\012\000\002\004\005\000\002\004\003\000\002\003\007" +
    "\000\002\005\005\000\002\005\002\000\002\006\003\000" +
    "\002\006\005\000\002\023\004\000\002\023\002\000\002" +
    "\010\004\000\002\010\003\000\002\007\006\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\013\010\000\002\017\005\000\002\017\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\014\005" +
    "\000\002\030\003\000\002\030\004\000\002\030\004\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\025\004\000\002\025\002\000\002\026\004\000\002\026" +
    "\003\000\002\024\006\000\002\027\005\000\002\027\005" +
    "\000\002\027\002\000\002\031\005\000\002\033\005\000" +
    "\002\032\004\000\002\032\007\000\002\034\006\000\002" +
    "\034\011\000\002\021\003\000\002\021\003\000\002\036" +
    "\005\000\002\036\003\000\002\035\005\000\002\035\006" +
    "\000\002\035\005\000\002\035\006\000\002\037\010\000" +
    "\002\037\010\000\002\041\005\000\002\041\003\000\002" +
    "\040\007\000\002\042\003\000\002\042\005\000\002\043" +
    "\005\000\002\043\003\000\002\043\006\000\002\043\004" +
    "\000\002\043\003\000\002\043\006\000\002\043\010\000" +
    "\002\043\006\000\002\043\002\000\002\044\005\000\002" +
    "\045\005\000\002\045\003\000\002\047\003\000\002\047" +
    "\005\000\002\050\005\000\002\050\004\000\002\050\003" +
    "\000\002\051\005\000\002\051\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\006\000\002\052\005\000\002\052\004\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\057\003" +
    "\000\002\057\003\000\002\046\003\000\002\046\006\000" +
    "\002\053\003\000\002\053\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\004\043\005\001\002\000\004\002\307\001" +
    "\002\000\004\021\006\001\002\000\006\005\007\011\010" +
    "\001\002\000\016\017\016\023\ufffa\026\ufffa\027\ufffa\030" +
    "\ufffa\031\ufffa\001\002\000\004\021\011\001\002\000\010" +
    "\012\ufffd\020\ufffd\056\ufffd\001\002\000\006\012\014\020" +
    "\013\001\002\000\004\021\304\001\002\000\004\005\015" +
    "\001\002\000\016\017\016\023\ufffa\026\ufffa\027\ufffa\030" +
    "\ufffa\031\ufffa\001\002\000\004\035\277\001\002\000\014" +
    "\023\023\026\ufff6\027\ufff6\030\ufff6\031\ufff6\001\002\000" +
    "\004\013\021\001\002\000\004\002\uffff\001\002\000\012" +
    "\026\066\027\uffda\030\uffda\031\uffda\001\002\000\004\021" +
    "\024\001\002\000\004\014\030\001\002\000\014\021\024" +
    "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\001\002\000\014\021" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\001\002\000\014" +
    "\021\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\001\002\000" +
    "\020\011\036\021\042\024\034\036\035\061\045\062\037" +
    "\071\031\001\002\000\012\005\uffef\012\uffef\016\uffef\020" +
    "\uffef\001\002\000\004\005\uffea\001\002\000\004\005\uffeb" +
    "\001\002\000\004\015\051\001\002\000\012\005\uffec\012" +
    "\uffec\016\uffec\020\uffec\001\002\000\004\021\011\001\002" +
    "\000\012\005\uffed\012\uffed\016\uffed\020\uffed\001\002\000" +
    "\004\005\046\001\002\000\004\005\ufff1\001\002\000\004" +
    "\005\ufff2\001\002\000\004\005\uffe9\001\002\000\004\005" +
    "\ufff0\001\002\000\012\005\uffee\012\uffee\016\uffee\020\uffee" +
    "\001\002\000\014\021\ufff3\026\ufff3\027\ufff3\030\ufff3\031" +
    "\ufff3\001\002\000\006\012\050\020\013\001\002\000\010" +
    "\005\uffe2\016\uffe2\020\uffe2\001\002\000\016\011\036\021" +
    "\060\036\035\061\045\062\037\071\031\001\002\000\006" +
    "\016\uffe3\020\uffe3\001\002\000\006\016\uffe4\020\uffe4\001" +
    "\002\000\006\016\uffe5\020\uffe5\001\002\000\006\016\uffe6" +
    "\020\uffe6\001\002\000\006\016\062\020\061\001\002\000" +
    "\012\005\uffcd\012\uffcd\016\uffcd\020\uffcd\001\002\000\012" +
    "\005\uffcc\012\uffcc\016\uffcc\020\uffcc\001\002\000\016\011" +
    "\036\021\060\036\035\061\045\062\037\071\031\001\002" +
    "\000\004\025\063\001\002\000\020\011\036\021\042\024" +
    "\034\036\035\061\045\062\037\071\031\001\002\000\004" +
    "\005\uffe8\001\002\000\006\016\uffe7\020\uffe7\001\002\000" +
    "\004\021\011\001\002\000\010\027\uffd4\030\uffd4\031\uffd4" +
    "\001\002\000\010\027\072\030\100\031\074\001\002\000" +
    "\004\005\266\001\002\000\004\021\262\001\002\000\004" +
    "\005\261\001\002\000\022\004\152\005\uffb6\021\154\031" +
    "\074\032\uffb6\033\157\035\153\044\147\001\002\000\006" +
    "\005\ufffc\013\ufffc\001\002\000\004\005\145\001\002\000" +
    "\004\005\144\001\002\000\004\021\101\001\002\000\006" +
    "\011\102\056\103\001\002\000\006\021\011\026\105\001" +
    "\002\000\014\021\060\036\035\061\045\062\037\071\031" +
    "\001\002\000\004\005\uffcf\001\002\000\004\021\011\001" +
    "\002\000\006\005\133\012\134\001\002\000\006\020\013" +
    "\056\111\001\002\000\006\005\uffca\012\uffca\001\002\000" +
    "\016\021\060\024\113\036\035\061\045\062\037\071\031" +
    "\001\002\000\006\005\uffc9\012\uffc9\001\002\000\004\015" +
    "\115\001\002\000\006\005\uffc7\012\uffc7\001\002\000\004" +
    "\021\116\001\002\000\004\055\127\001\002\000\004\016" +
    "\123\001\002\000\006\005\121\016\uffc2\001\002\000\004" +
    "\021\116\001\002\000\004\016\uffc3\001\002\000\004\025" +
    "\124\001\002\000\016\021\060\024\113\036\035\061\045" +
    "\062\037\071\031\001\002\000\006\005\uffc5\012\uffc5\001" +
    "\002\000\006\005\uffc4\012\uffc4\001\002\000\004\021\130" +
    "\001\002\000\004\056\131\001\002\000\014\021\060\036" +
    "\035\061\045\062\037\071\031\001\002\000\006\005\uffc1" +
    "\016\uffc1\001\002\000\006\021\011\026\105\001\002\000" +
    "\004\056\135\001\002\000\014\021\060\036\035\061\045" +
    "\062\037\071\031\001\002\000\004\005\uffce\001\002\000" +
    "\006\005\uffcb\012\uffcb\001\002\000\006\020\013\056\141" +
    "\001\002\000\016\021\060\024\113\036\035\061\045\062" +
    "\037\071\031\001\002\000\006\005\uffc8\012\uffc8\001\002" +
    "\000\006\005\uffc6\012\uffc6\001\002\000\010\027\uffd5\030" +
    "\uffd5\031\uffd5\001\002\000\016\017\016\023\ufffa\026\ufffa" +
    "\027\ufffa\030\ufffa\031\ufffa\001\002\000\004\005\uffd3\001" +
    "\002\000\022\006\172\007\165\011\171\021\176\022\200" +
    "\035\173\047\201\130\166\001\002\000\010\005\uffc0\032" +
    "\uffc0\042\uffc0\001\002\000\010\005\uffba\032\uffba\042\uffba" +
    "\001\002\000\022\006\172\007\165\011\171\021\176\022" +
    "\200\035\173\047\201\130\166\001\002\000\004\056\247" +
    "\001\002\000\016\005\uffbd\011\244\015\uff92\032\uffbd\042" +
    "\uffbd\063\uff92\001\002\000\006\005\242\032\uffb3\001\002" +
    "\000\006\015\163\063\164\001\002\000\004\035\162\001" +
    "\002\000\004\032\161\001\002\000\012\005\uffb5\013\uffb5" +
    "\032\uffb5\042\uffb5\001\002\000\010\005\uffbb\032\uffbb\042" +
    "\uffbb\001\002\000\022\006\172\007\165\011\171\021\176" +
    "\022\200\035\173\047\201\130\166\001\002\000\022\006" +
    "\172\007\165\011\171\021\176\022\200\035\173\047\201" +
    "\130\166\001\002\000\016\011\uff94\021\uff94\022\uff94\035" +
    "\uff94\047\uff94\130\uff94\001\002\000\054\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\012\uffaa\014\uffaa\016\uffaa\020\uffaa\032" +
    "\uffaa\034\uffaa\041\uffaa\042\uffaa\045\uffaa\046\uffaa\050\uffaa" +
    "\051\uffaa\052\uffaa\053\uffaa\054\uffaa\057\uffaa\060\uffaa\001" +
    "\002\000\016\011\171\021\176\022\200\035\173\047\201" +
    "\130\166\001\002\000\054\005\uffae\006\uffae\007\uffae\010" +
    "\232\012\uffae\014\uffae\016\uffae\020\uffae\032\uffae\034\uffae" +
    "\041\uffae\042\uffae\045\uffae\046\230\050\uffae\051\uffae\052" +
    "\uffae\053\uffae\054\uffae\057\231\060\226\001\002\000\022" +
    "\006\172\007\165\011\171\021\176\022\200\035\173\047" +
    "\201\130\166\001\002\000\016\011\uff93\021\uff93\022\uff93" +
    "\035\uff93\047\uff93\130\uff93\001\002\000\054\005\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\012\uffa8\014\uffa8\016\uffa8\020\uffa8" +
    "\032\uffa8\034\uffa8\041\uffa8\042\uffa8\045\uffa8\046\uffa8\050" +
    "\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\057\uffa8\060\uffa8" +
    "\001\002\000\044\005\uffb2\006\221\007\222\012\uffb2\014" +
    "\uffb2\016\uffb2\020\uffb2\032\uffb2\034\uffb2\041\uffb2\042\uffb2" +
    "\045\224\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\001" +
    "\002\000\024\005\uffbe\014\216\032\uffbe\042\uffbe\050\212" +
    "\051\211\052\215\053\217\054\213\001\002\000\060\005" +
    "\uff92\006\uff92\007\uff92\010\uff92\011\204\012\uff92\014\uff92" +
    "\015\uff92\016\uff92\020\uff92\032\uff92\034\uff92\041\uff92\042" +
    "\uff92\045\uff92\046\uff92\050\uff92\051\uff92\052\uff92\053\uff92" +
    "\054\uff92\057\uff92\060\uff92\001\002\000\054\005\uffac\006" +
    "\uffac\007\uffac\010\uffac\012\uffac\014\uffac\016\uffac\020\uffac" +
    "\032\uffac\034\uffac\041\uffac\042\uffac\045\uffac\046\uffac\050" +
    "\uffac\051\uffac\052\uffac\053\uffac\054\uffac\057\uffac\060\uffac" +
    "\001\002\000\054\005\uffa9\006\uffa9\007\uffa9\010\uffa9\012" +
    "\uffa9\014\uffa9\016\uffa9\020\uffa9\032\uffa9\034\uffa9\041\uffa9" +
    "\042\uffa9\045\uffa9\046\uffa9\050\uffa9\051\uffa9\052\uffa9\053" +
    "\uffa9\054\uffa9\057\uffa9\060\uffa9\001\002\000\016\011\171" +
    "\021\176\022\200\035\173\047\201\130\166\001\002\000" +
    "\056\005\uffab\006\uffab\007\uffab\010\uffab\012\uffab\014\uffab" +
    "\015\163\016\uffab\020\uffab\032\uffab\034\uffab\041\uffab\042" +
    "\uffab\045\uffab\046\uffab\050\uffab\051\uffab\052\uffab\053\uffab" +
    "\054\uffab\057\uffab\060\uffab\001\002\000\054\005\uffa5\006" +
    "\uffa5\007\uffa5\010\uffa5\012\uffa5\014\uffa5\016\uffa5\020\uffa5" +
    "\032\uffa5\034\uffa5\041\uffa5\042\uffa5\045\uffa5\046\uffa5\050" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\057\uffa5\060\uffa5" +
    "\001\002\000\022\006\172\007\165\011\171\021\176\022" +
    "\200\035\173\047\201\130\166\001\002\000\024\012\uff90" +
    "\014\216\016\uff90\020\210\050\212\051\211\052\215\053" +
    "\217\054\213\001\002\000\004\012\207\001\002\000\054" +
    "\005\uffa7\006\uffa7\007\uffa7\010\uffa7\012\uffa7\014\uffa7\016" +
    "\uffa7\020\uffa7\032\uffa7\034\uffa7\041\uffa7\042\uffa7\045\uffa7" +
    "\046\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\057" +
    "\uffa7\060\uffa7\001\002\000\022\006\172\007\165\011\171" +
    "\021\176\022\200\035\173\047\201\130\166\001\002\000" +
    "\022\006\uffa0\007\uffa0\011\uffa0\021\uffa0\022\uffa0\035\uffa0" +
    "\047\uffa0\130\uffa0\001\002\000\022\006\uff9e\007\uff9e\011" +
    "\uff9e\021\uff9e\022\uff9e\035\uff9e\047\uff9e\130\uff9e\001\002" +
    "\000\022\006\uff9b\007\uff9b\011\uff9b\021\uff9b\022\uff9b\035" +
    "\uff9b\047\uff9b\130\uff9b\001\002\000\022\006\172\007\165" +
    "\011\171\021\176\022\200\035\173\047\201\130\166\001" +
    "\002\000\022\006\uff9f\007\uff9f\011\uff9f\021\uff9f\022\uff9f" +
    "\035\uff9f\047\uff9f\130\uff9f\001\002\000\022\006\uff9c\007" +
    "\uff9c\011\uff9c\021\uff9c\022\uff9c\035\uff9c\047\uff9c\130\uff9c" +
    "\001\002\000\022\006\uff9d\007\uff9d\011\uff9d\021\uff9d\022" +
    "\uff9d\035\uff9d\047\uff9d\130\uff9d\001\002\000\044\005\uffb1" +
    "\006\221\007\222\012\uffb1\014\uffb1\016\uffb1\020\uffb1\032" +
    "\uffb1\034\uffb1\041\uffb1\042\uffb1\045\224\050\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\054\uffb1\001\002\000\016\011\uff97\021" +
    "\uff97\022\uff97\035\uff97\047\uff97\130\uff97\001\002\000\016" +
    "\011\uff96\021\uff96\022\uff96\035\uff96\047\uff96\130\uff96\001" +
    "\002\000\016\011\171\021\176\022\200\035\173\047\201" +
    "\130\166\001\002\000\016\011\uff95\021\uff95\022\uff95\035" +
    "\uff95\047\uff95\130\uff95\001\002\000\054\005\uffb0\006\uffb0" +
    "\007\uffb0\010\232\012\uffb0\014\uffb0\016\uffb0\020\uffb0\032" +
    "\uffb0\034\uffb0\041\uffb0\042\uffb0\045\uffb0\046\230\050\uffb0" +
    "\051\uffb0\052\uffb0\053\uffb0\054\uffb0\057\231\060\226\001" +
    "\002\000\016\011\uffa2\021\uffa2\022\uffa2\035\uffa2\047\uffa2" +
    "\130\uffa2\001\002\000\016\011\171\021\176\022\200\035" +
    "\173\047\201\130\166\001\002\000\016\011\uffa1\021\uffa1" +
    "\022\uffa1\035\uffa1\047\uffa1\130\uffa1\001\002\000\016\011" +
    "\uffa3\021\uffa3\022\uffa3\035\uffa3\047\uffa3\130\uffa3\001\002" +
    "\000\016\011\uffa4\021\uffa4\022\uffa4\035\uffa4\047\uffa4\130" +
    "\uffa4\001\002\000\054\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\012\uffad\014\uffad\016\uffad\020\uffad\032\uffad\034\uffad\041" +
    "\uffad\042\uffad\045\uffad\046\uffad\050\uffad\051\uffad\052\uffad" +
    "\053\uffad\054\uffad\057\uffad\060\uffad\001\002\000\006\012" +
    "\uff8f\016\uff8f\001\002\000\020\012\236\014\216\050\212" +
    "\051\211\052\215\053\217\054\213\001\002\000\054\005" +
    "\uffa6\006\uffa6\007\uffa6\010\uffa6\012\uffa6\014\uffa6\016\uffa6" +
    "\020\uffa6\032\uffa6\034\uffa6\041\uffa6\042\uffa6\045\uffa6\046" +
    "\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\057\uffa6" +
    "\060\uffa6\001\002\000\054\005\uffaf\006\uffaf\007\uffaf\010" +
    "\232\012\uffaf\014\uffaf\016\uffaf\020\uffaf\032\uffaf\034\uffaf" +
    "\041\uffaf\042\uffaf\045\uffaf\046\230\050\uffaf\051\uffaf\052" +
    "\uffaf\053\uffaf\054\uffaf\057\231\060\226\001\002\000\004" +
    "\016\241\001\002\000\060\005\uff91\006\uff91\007\uff91\010" +
    "\uff91\012\uff91\014\uff91\015\uff91\016\uff91\020\uff91\032\uff91" +
    "\034\uff91\041\uff91\042\uff91\045\uff91\046\uff91\050\uff91\051" +
    "\uff91\052\uff91\053\uff91\054\uff91\057\uff91\060\uff91\063\uff91" +
    "\001\002\000\022\004\152\005\uffb6\021\154\031\074\032" +
    "\uffb6\033\157\035\153\044\147\001\002\000\004\032\uffb4" +
    "\001\002\000\022\006\172\007\165\011\171\021\176\022" +
    "\200\035\173\047\201\130\166\001\002\000\004\012\246" +
    "\001\002\000\010\005\uffbc\032\uffbc\042\uffbc\001\002\000" +
    "\022\004\152\005\uffb6\021\154\031\074\032\uffb6\033\157" +
    "\042\uffb6\044\147\001\002\000\010\005\uffbf\032\uffbf\042" +
    "\uffbf\001\002\000\020\014\216\034\252\050\212\051\211" +
    "\052\215\053\217\054\213\001\002\000\024\004\152\005" +
    "\uffb6\021\154\031\074\032\uffb6\033\157\035\153\042\uffb6" +
    "\044\147\001\002\000\010\005\uffb9\032\uffb9\042\254\001" +
    "\002\000\024\004\152\005\uffb6\021\154\031\074\032\uffb6" +
    "\033\157\035\153\042\uffb6\044\147\001\002\000\010\005" +
    "\uffb8\032\uffb8\042\uffb8\001\002\000\020\014\216\041\257" +
    "\050\212\051\211\052\215\053\217\054\213\001\002\000" +
    "\024\004\152\005\uffb6\021\154\031\074\032\uffb6\033\157" +
    "\035\153\042\uffb6\044\147\001\002\000\010\005\uffb7\032" +
    "\uffb7\042\uffb7\001\002\000\010\027\uffd6\030\uffd6\031\uffd6" +
    "\001\002\000\006\005\uffd1\011\263\001\002\000\006\021" +
    "\011\026\105\001\002\000\006\005\133\012\265\001\002" +
    "\000\004\005\uffd0\001\002\000\016\017\016\023\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\031\ufffa\001\002\000\004\005\uffd2" +
    "\001\002\000\006\020\013\056\274\001\002\000\012\021" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\001\002\000\012\021\011" +
    "\027\uffdb\030\uffdb\031\uffdb\001\002\000\012\021\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\001\002\000\020\011\036\021\042" +
    "\024\034\036\035\061\045\062\037\071\031\001\002\000" +
    "\004\005\276\001\002\000\012\021\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\001\002\000\006\005\ufff9\020\ufff9\001\002\000" +
    "\006\005\302\020\301\001\002\000\004\035\303\001\002" +
    "\000\014\023\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\001" +
    "\002\000\006\005\ufff8\020\ufff8\001\002\000\010\012\ufffe" +
    "\020\ufffe\056\ufffe\001\002\000\004\013\306\001\002\000" +
    "\004\002\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\304\005\016" +
    "\001\001\000\004\004\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\017\005\016\001\001\000\004\006\277\001\001\000" +
    "\004\023\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\066\001\001\000\006\007\025\010\024\001" +
    "\001\000\002\001\001\000\004\007\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\011\037\012\043\013" +
    "\042\014\032\015\031\020\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\053\015\052\016\054\017\055\020\056\021\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\014\053\015\052\016\064\020\056\021" +
    "\051\001\001\000\002\001\001\000\016\011\063\012\043" +
    "\013\042\014\032\015\031\020\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\267\024\270\026\271" +
    "\001\001\000\004\027\067\001\001\000\014\031\072\032" +
    "\075\033\076\034\070\044\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\042\154\043" +
    "\147\044\150\045\157\046\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\106\035\107\036\105\001\001" +
    "\000\006\020\056\021\103\001\001\000\002\001\001\000" +
    "\004\004\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\056\021\111\037\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\117\041\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\117\041\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\056\021\124\037\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\056\021\131\001\001\000\002\001\001\000\006\004\106" +
    "\035\136\001\001\000\002\001\001\000\006\020\056\021" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\056\021\141\037\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\145\005\016\001\001\000\002\001\001\000\016\046" +
    "\201\047\255\050\173\051\167\052\176\057\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\046\201\047" +
    "\250\050\173\051\167\052\176\057\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\046\201\047\204\050\173\051" +
    "\167\052\176\053\237\057\166\001\001\000\016\046\201" +
    "\047\174\050\173\051\167\052\176\057\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\046\201\051\236" +
    "\052\176\001\001\000\004\055\226\001\001\000\016\046" +
    "\201\047\234\050\173\051\167\052\176\057\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\222\001" +
    "\001\000\004\054\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\046\201\052\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\046\201" +
    "\047\204\050\173\051\167\052\176\053\205\057\166\001" +
    "\001\000\004\054\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\046\201\047\204\050\173\051\167\052" +
    "\176\053\233\057\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\046\201\050\217\051" +
    "\167\052\176\057\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\046\201\051\224" +
    "\052\176\001\001\000\002\001\001\000\004\055\226\001" +
    "\001\000\002\001\001\000\006\046\201\052\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\213\001\001" +
    "\000\002\001\001\000\004\055\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\042\154\043\147\044\150" +
    "\045\242\046\155\001\001\000\002\001\001\000\020\046" +
    "\201\047\204\050\173\051\167\052\176\053\244\057\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\043" +
    "\247\044\150\046\155\001\001\000\002\001\001\000\004" +
    "\054\213\001\001\000\012\042\252\043\147\044\150\046" +
    "\155\001\001\000\002\001\001\000\012\042\254\043\147" +
    "\044\150\046\155\001\001\000\002\001\001\000\004\054" +
    "\213\001\001\000\012\042\257\043\147\044\150\046\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\106\035\107\036\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\266\005\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\267\024\272\001\001\000\002\001\001\000" +
    "\016\011\274\012\043\013\042\014\032\015\031\020\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

    ComplexSymbolFactory f = new ComplexSymbolFactory();
    symbolFactory = f;
    File file = new File(Paths.get("").toAbsolutePath().toString() + "/src/" + "input.txt");
    FileInputStream fis = null;
    try {
        fis = new FileInputStream(file);
    } catch (IOException e) {
        e.printStackTrace();
    }
    lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2

    return lexer.next_token();

    }

//@@CUPDBG0

  protected Lexer lexer; 

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM ID SEMICOLON block DOT 
            {
              Program RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG3
 RESULT = new Program(nm, Collections.EMPTY_LIST, bl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROGRAM ID LPAR id_list RPAR SEMICOLON block DOT 
            {
              Program RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG4
 RESULT = new Program(nm, ids, bl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // id_list ::= id_list COMMA ID 
            {
              List<String> RESULT =null;
		Location nmsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nmsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> nms = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5
 nms.add(id); RESULT = nms;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // id_list ::= ID 
            {
              List<String> RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
 List<String> ids = new ArrayList<String>(); ids.add(nm);
            RESULT = ids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= label_declaration_part type_definition_part variable_declaration_part procedure_and_function_declaration_part compound_statement 
            {
              Block RESULT =null;
		Location labelsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location labelsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<Integer> labels = (List<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location typeDefsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typeDefsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<TypeDefinition> typeDefs = (List<TypeDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location varDecsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location varDecsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<VariableDeclaration> varDecs = (List<VariableDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location subprogDecsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location subprogDecsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ProcedureOrFunctionDeclaration> subprogDecs = (List<ProcedureOrFunctionDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
 RESULT = new Block(labels, typeDefs, varDecs, subprogDecs, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // label_declaration_part ::= LABEL label_list SEMICOLON 
            {
              List<Integer> RESULT =null;
		Location labelsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location labelsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Integer> labels = (List<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG8
 RESULT = labels; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // label_declaration_part ::= 
            {
              List<Integer> RESULT =null;
		//@@CUPDBG9
 RESULT = Collections.EMPTY_LIST; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // label_list ::= NUMINT 
            {
              List<Integer> RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		int n = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG10
 RESULT = new ArrayList<Integer>(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // label_list ::= label_list COMMA NUMINT 
            {
              List<Integer> RESULT =null;
		Location labelsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location labelsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Integer> labels = (List<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		int n = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG11
 labels.add(n); RESULT = labels; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_definition_part ::= TYPE type_definition_sequence 
            {
              List<TypeDefinition> RESULT =null;
		Location typeDefsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typeDefsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<TypeDefinition> typeDefs = (List<TypeDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG12
 RESULT = typeDefs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_definition_part ::= 
            {
              List<TypeDefinition> RESULT =null;
		//@@CUPDBG13
 RESULT = Collections.EMPTY_LIST; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_definition_sequence ::= type_definition_sequence type_definition 
            {
              List<TypeDefinition> RESULT =null;
		Location defsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location defsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<TypeDefinition> defs = (List<TypeDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location typeDefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typeDefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeDefinition typeDef = (TypeDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG14
 defs.add(typeDef); RESULT = defs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_sequence",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_definition_sequence ::= type_definition 
            {
              List<TypeDefinition> RESULT =null;
		Location typeDefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typeDefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeDefinition typeDef = (TypeDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15
 List<TypeDefinition> types = new ArrayList<>(); types.add(typeDef);
                               RESULT = types; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_sequence",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_definition ::= ID EQUAL type_denoter SEMICOLON 
            {
              TypeDefinition RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location type_denxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location type_denxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeDenoter type_den = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG16
 RESULT = new TypeDefinition(id,type_den); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type_denoter ::= ID 
            {
              TypeDenoter RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17
 RESULT = new TypeId(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_denoter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_denoter ::= primitive_type 
            {
              TypeDenoter RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		PrimitiveType type = (PrimitiveType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18
 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_denoter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type_denoter ::= new_type 
            {
              TypeDenoter RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeDenoter type = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG19
 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_denoter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // primitive_type ::= INTEGER 
            {
              PrimitiveType RESULT =null;
		//@@CUPDBG20
 RESULT = PrimitiveType.INTEGER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // primitive_type ::= CHAR 
            {
              PrimitiveType RESULT =null;
		//@@CUPDBG21
 RESULT = PrimitiveType.CHAR; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // primitive_type ::= STRING 
            {
              PrimitiveType RESULT =null;
		//@@CUPDBG22
 RESULT = PrimitiveType.STRING; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // primitive_type ::= BOOLEAN 
            {
              PrimitiveType RESULT =null;
		//@@CUPDBG23
 RESULT = PrimitiveType.BOOLEAN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // new_type ::= enumerated_type 
            {
              TypeDenoter RESULT =null;
		Location enumTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location enumTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		EnumeratedType enumType = (EnumeratedType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24
 RESULT = enumType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // new_type ::= subrange_type 
            {
              TypeDenoter RESULT =null;
		Location subRangeTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location subRangeTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SubrangeType subRangeType = (SubrangeType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG25
 RESULT = subRangeType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // new_type ::= array_type 
            {
              TypeDenoter RESULT =null;
		Location arrayTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arrayTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeDenoter arrayType = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26
 RESULT = arrayType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // array_type ::= ARRAY LBRA ordinal_type_list RBRA OF type_denoter 
            {
              TypeDenoter RESULT =null;
		Location ordsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ordsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<TypeDenoter> ords = (List<TypeDenoter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeDenoter type = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27
 TypeDenoter elemTy = type;
            for (int i=ords.size()-1; i>0; i--)
              elemTy = new Array((TypeIdOrOrdinal) ords.get(i), elemTy);
            RESULT = new Array((TypeIdOrOrdinal) ords.get(0), elemTy); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ordinal_type_list ::= ordinal_type_list COMMA ordinal_type 
            {
              List<TypeDenoter> RESULT =null;
		Location ordsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ordsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<TypeDenoter> ords = (List<TypeDenoter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeDenoter type = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG28
 ords.add(type); RESULT = ords; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ordinal_type_list ::= ordinal_type 
            {
              List<TypeDenoter> RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeDenoter type = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG29
 List<TypeDenoter> ords = new ArrayList<>();
            		                       ords.add(type); RESULT = ords; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ordinal_type ::= enumerated_type 
            {
              TypeDenoter RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		EnumeratedType type = (EnumeratedType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG30
 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ordinal_type ::= subrange_type 
            {
              TypeDenoter RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SubrangeType type = (SubrangeType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG31
 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ordinal_type ::= type_id_or_primitive 
            {
              TypeDenoter RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdOrPrimitive type = (TypeIdOrPrimitive)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG32
 RESULT = type instanceof TypeId ? (TypeId) type : (PrimitiveType) type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // enumerated_type ::= LPAR id_list RPAR 
            {
              EnumeratedType RESULT =null;
		Location idListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<String> idList = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG33
 RESULT = new EnumeratedType(idList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumerated_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // constant ::= NUMINT 
            {
              Constant RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		int n = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG35
 RESULT = new UnsignedNumber(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // constant ::= MINUS NUMINT 
            {
              Constant RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		int n = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG36
 RESULT = new SignedNumber(Sign.MINUS, new UnsignedNumber(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // constant ::= PLUS NUMINT 
            {
              Constant RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		int n = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG37
 RESULT = new SignedNumber(Sign.PLUS, new UnsignedNumber(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // constant ::= LITERALCHARACTER 
            {
              Constant RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG38
 RESULT = new CharacterConstant(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // constant ::= TRUE 
            {
              Constant RESULT =null;
		//@@CUPDBG39
 RESULT = BooleanConstant.TRUE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // constant ::= FALSE 
            {
              Constant RESULT =null;
		//@@CUPDBG40
 RESULT = BooleanConstant.FALSE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable_declaration_part ::= VAR variable_declaration_sequence 
            {
              List<VariableDeclaration> RESULT =null;
		Location varDecsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location varDecsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<VariableDeclaration> varDecs = (List<VariableDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG41
 RESULT = varDecs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable_declaration_part ::= 
            {
              List<VariableDeclaration> RESULT =null;
		//@@CUPDBG42
 RESULT = Collections.EMPTY_LIST; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable_declaration_sequence ::= variable_declaration_sequence variable_declaration 
            {
              List<VariableDeclaration> RESULT =null;
		Location decs1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location decs1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<VariableDeclaration> decs1 = (List<VariableDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location decs2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location decs2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<VariableDeclaration> decs2 = (List<VariableDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG43
 decs1.addAll(decs2); RESULT = decs1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_sequence",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable_declaration_sequence ::= variable_declaration 
            {
              List<VariableDeclaration> RESULT =null;
		Location decsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location decsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<VariableDeclaration> decs = (List<VariableDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG44
 RESULT = decs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_sequence",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variable_declaration ::= id_list COLON type_denoter SEMICOLON 
            {
              List<VariableDeclaration> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeDenoter type = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG45
 List<VariableDeclaration> decs = new ArrayList<VariableDeclaration>();
                 for (String nm : ids) decs.add(new VariableDeclaration(nm, type));
                 RESULT = decs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // procedure_and_function_declaration_part ::= procedure_and_function_declaration_part procedure_declaration SEMICOLON 
            {
              List<ProcedureOrFunctionDeclaration> RESULT =null;
		Location decsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location decsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ProcedureOrFunctionDeclaration> decs = (List<ProcedureOrFunctionDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location procxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location procxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ProcedureDeclaration proc = (ProcedureDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG46
 decs.add(proc); RESULT = decs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_and_function_declaration_part",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // procedure_and_function_declaration_part ::= procedure_and_function_declaration_part function_declaration SEMICOLON 
            {
              List<ProcedureOrFunctionDeclaration> RESULT =null;
		Location decsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location decsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ProcedureOrFunctionDeclaration> decs = (List<ProcedureOrFunctionDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		FunctionDeclaration func = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG47
 decs.add(func); RESULT = decs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_and_function_declaration_part",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // procedure_and_function_declaration_part ::= 
            {
              List<ProcedureOrFunctionDeclaration> RESULT =null;
		//@@CUPDBG48
 RESULT = new ArrayList<ProcedureOrFunctionDeclaration>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_and_function_declaration_part",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // procedure_declaration ::= procedure_heading SEMICOLON block 
            {
              ProcedureDeclaration RESULT =null;
		Location procDecxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location procDecxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ProcedureDeclaration procDec = (ProcedureDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG49
 procDec.body = block; RESULT = procDec; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function_declaration ::= function_heading SEMICOLON block 
            {
              FunctionDeclaration RESULT =null;
		Location funcDecxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location funcDecxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		FunctionDeclaration funcDec = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG50
 funcDec.body = block; RESULT = funcDec; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // procedure_heading ::= PROCEDURE ID 
            {
              ProcedureDeclaration RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG51
 RESULT = new ProcedureDeclaration(nm, Collections.EMPTY_LIST, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // procedure_heading ::= PROCEDURE ID LPAR formal_parameter_list RPAR 
            {
              ProcedureDeclaration RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location formalsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location formalsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<FormalParameter> formals = (List<FormalParameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG52
 RESULT = new ProcedureDeclaration(nm, formals, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // function_heading ::= FUNCTION ID COLON type_id_or_primitive 
            {
              FunctionDeclaration RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location retTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location retTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdOrPrimitive retType = (TypeIdOrPrimitive)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG53
 RESULT = new FunctionDeclaration(nm, Collections.EMPTY_LIST, retType, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_heading",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // function_heading ::= FUNCTION ID LPAR formal_parameter_list RPAR COLON type_id_or_primitive 
            {
              FunctionDeclaration RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location formalsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location formalsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<FormalParameter> formals = (List<FormalParameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location retTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location retTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdOrPrimitive retType = (TypeIdOrPrimitive)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG54
 RESULT = new FunctionDeclaration(nm, formals, retType, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_heading",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type_id_or_primitive ::= primitive_type 
            {
              TypeIdOrPrimitive RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		PrimitiveType type = (PrimitiveType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG55
 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_or_primitive",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type_id_or_primitive ::= ID 
            {
              TypeIdOrPrimitive RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG56
 RESULT = new TypeId(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_or_primitive",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // formal_parameter_list ::= formal_parameter_list SEMICOLON formal_parameter 
            {
              List<FormalParameter> RESULT =null;
		Location fp_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fp_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<FormalParameter> fp_list = (List<FormalParameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location fpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<FormalParameter> fp = (List<FormalParameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG57
 fp_list.addAll(fp); RESULT = fp_list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // formal_parameter_list ::= formal_parameter 
            {
              List<FormalParameter> RESULT =null;
		Location fpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<FormalParameter> fp = (List<FormalParameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG58
 List<FormalParameter> formals = new ArrayList<>();
                                                 formals.addAll(fp); RESULT = formals; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // formal_parameter ::= id_list COLON type_id_or_primitive 
            {
              List<FormalParameter> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdOrPrimitive type = (TypeIdOrPrimitive)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG59
 List<FormalParameter> formals = new ArrayList<FormalParameter>();
                                                                     for (String id : ids) formals.add(new FormalPar(RefOrValue.Val, id, type));
                                                                     RESULT = formals; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // formal_parameter ::= VAR id_list COLON type_id_or_primitive 
            {
              List<FormalParameter> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdOrPrimitive type = (TypeIdOrPrimitive)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG60
 List<FormalParameter> formals = new ArrayList<FormalParameter>();
                                                                         for (String id : ids) formals.add(new FormalPar(RefOrValue.Ref, id, type));
                                                                         RESULT = formals; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // formal_parameter ::= id_list COLON conformant_array_schema 
            {
              List<FormalParameter> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location schemaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location schemaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ConformantArraySchema schema = (ConformantArraySchema)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG61
 List<FormalParameter> conformantArray = new ArrayList<FormalParameter>();
                         for (String id : ids) conformantArray.add(new ConformantArrayParameter(RefOrValue.Val, id, schema));
                         RESULT = conformantArray; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // formal_parameter ::= VAR id_list COLON conformant_array_schema 
            {
              List<FormalParameter> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location schemaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location schemaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ConformantArraySchema schema = (ConformantArraySchema)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG62
 List<FormalParameter> conformantArray = new ArrayList<FormalParameter>();
                         for (String id : ids) conformantArray.add(new ConformantArrayParameter(RefOrValue.Ref, id, schema));
                         RESULT = conformantArray; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // conformant_array_schema ::= ARRAY LBRA index_type_spec_list RBRA OF type_id_or_primitive 
            {
              ConformantArraySchema RESULT =null;
		//@@CUPDBG63
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conformant_array_schema",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // conformant_array_schema ::= ARRAY LBRA index_type_spec_list RBRA OF conformant_array_schema 
            {
              ConformantArraySchema RESULT =null;
		//@@CUPDBG64
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conformant_array_schema",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // index_type_spec_list ::= index_type_specification SEMICOLON index_type_spec_list 
            {
              List<IndexType> RESULT =null;
		Location indexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location indexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IndexType index = (IndexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IndexType> list = (List<IndexType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG65
 list.add(index); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type_spec_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // index_type_spec_list ::= index_type_specification 
            {
              List<IndexType> RESULT =null;
		Location indexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location indexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IndexType index = (IndexType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG66
 List<IndexType> indexTypeList = new ArrayList<IndexType>();
                                                           indexTypeList.add(index); RESULT = indexTypeList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type_spec_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // index_type_specification ::= ID DOUBLEDOT ID COLON type_id_or_primitive 
            {
              IndexType RESULT =null;
		Location lowxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location lowxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String low = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location highxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location highxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String high = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdOrPrimitive type = (TypeIdOrPrimitive)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG67
 RESULT = new IndexType(low, high, type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type_specification",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= statement_ 
            {
              Statement RESULT =null;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG68
 RESULT = stm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= NUMINT COLON statement_ 
            {
              Statement RESULT =null;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement_ ::= variable_access ASSIGN expression 
            {
              Statement RESULT =null;
		Location varAccessxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location varAccessxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		VariableAccess varAccess = (VariableAccess)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG69
 RESULT = new AssignmentStatement(varAccess, exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement_ ::= ID 
            {
              Statement RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG70
 RESULT = new ProcedureStatement(id, Collections.EMPTY_LIST); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement_ ::= ID LPAR expression_list RPAR 
            {
              Statement RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location expListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> expList = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG71
 RESULT = new ProcedureStatement(id, expList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement_ ::= GOTO NUMINT 
            {
              Statement RESULT =null;
		Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		int num = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG72
 RESULT = new GotoStatement(new UnsignedNumber(num)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement_ ::= compound_statement 
            {
              Statement RESULT =null;
		Location cmpStmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cmpStmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement cmpStm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG73
 RESULT = cmpStm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement_ ::= IF expression THEN statement 
            {
              Statement RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG74
 RESULT = new IfStatement(exp, stm, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement_ ::= IF expression THEN statement ELSE statement 
            {
              Statement RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stm2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stm2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement stm2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG75
 RESULT = new IfStatement(exp, stm, stm2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statement_ ::= WHILE expression DO statement 
            {
              Statement RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG76
 RESULT = new WhileStatement(exp, stm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement_ ::= 
            {
              Statement RESULT =null;
		//@@CUPDBG77
 RESULT = new EmptyStatement(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // compound_statement ::= BEGIN statement_sequence END 
            {
              Statement RESULT =null;
		Location cmpStmListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cmpStmListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Statement> cmpStmList = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG78
 RESULT = new CompoundStatement(cmpStmList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement_sequence ::= statement SEMICOLON statement_sequence 
            {
              List<Statement> RESULT =null;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stmsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Statement> stms = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG79
 stms.add(stm); RESULT = stms; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement_sequence ::= statement 
            {
              List<Statement> RESULT =null;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG80
 List<Statement> stmList = new ArrayList<Statement>();
					                    stmList.add(stm); RESULT = stmList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= simple_expression 
            {
              Expression RESULT =null;
		Location simple_expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simple_expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression simple_exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG81
RESULT = simple_exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression relational_operator simple_expression 
            {
              Expression RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location relational_operxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location relational_operxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		RelationalOperator relational_oper = (RelationalOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location simple_expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simple_expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression simple_exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG82
 RESULT = new RelationalExpression(relational_oper, exp, simple_exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // simple_expression ::= simple_expression adding_operator term 
            {
              Expression RESULT =null;
		Location simple_expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location simple_expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression simple_exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression term = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG83
 RESULT =
                            new BinaryArithmeticExpression((BinaryArithmeticOperator) op, simple_exp, term); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // simple_expression ::= sign term 
            {
              Expression RESULT =null;
		Location signxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location signxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Sign sign = (Sign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression term = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG84
 RESULT = new SignedExpression(sign, term); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // simple_expression ::= term 
            {
              Expression RESULT =null;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression term = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG85
 RESULT = term; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // term ::= term multiplying_operator factor 
            {
              Expression RESULT =null;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression term = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location fatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression fator = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG86
 RESULT =  new BinaryArithmeticExpression((BinaryArithmeticOperator) op, term, fator); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // term ::= factor 
            {
              Expression RESULT =null;
		Location fatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression fator = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG87
 RESULT = fator; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // factor ::= variable_access 
            {
              Expression RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		VariableAccess var = (VariableAccess)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG88
 RESULT = var; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // factor ::= LITERALCHARACTER 
            {
              Expression RESULT =null;
		Location chrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location chrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Character chr = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // factor ::= STRINGCHARACTER 
            {
              Expression RESULT =null;
		Location strxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location strxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG89
 RESULT = new StringLiteral(str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // factor ::= NUMINT 
            {
              Expression RESULT =null;
		Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		int num = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG90
 RESULT = new NumberLiteral(num); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // factor ::= ID LPAR expression_list RPAR 
            {
              Expression RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location expListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> expList = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG91
 RESULT = new FunctionDesignator(id, expList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // factor ::= LPAR expression RPAR 
            {
              Expression RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG92
 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // factor ::= NOT factor 
            {
              Expression RESULT =null;
		Location factorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location factorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression factor = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG93
 RESULT = new NotExpression(factor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // multiplying_operator ::= TIMES 
            {
              Object RESULT =null;
		//@@CUPDBG94
RESULT = BinaryArithmeticOperator.TIMES;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplying_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // multiplying_operator ::= DIVIDE 
            {
              Object RESULT =null;
		//@@CUPDBG95
RESULT = BinaryArithmeticOperator.DIV;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplying_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // multiplying_operator ::= MOD 
            {
              Object RESULT =null;
		//@@CUPDBG96
RESULT = BinaryArithmeticOperator.MOD;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplying_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // multiplying_operator ::= AND 
            {
              Object RESULT =null;
		//@@CUPDBG97
RESULT = BinaryBooleanOperator.AND;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplying_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // relational_operator ::= LT 
            {
              RelationalOperator RESULT =null;
		//@@CUPDBG98
RESULT = RelationalOperator.LT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // relational_operator ::= LE 
            {
              RelationalOperator RESULT =null;
		//@@CUPDBG99
RESULT = RelationalOperator.LTE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // relational_operator ::= GT 
            {
              RelationalOperator RESULT =null;
		//@@CUPDBG100
RESULT = RelationalOperator.GT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // relational_operator ::= GE 
            {
              RelationalOperator RESULT =null;
		//@@CUPDBG101
RESULT = RelationalOperator.GTE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // relational_operator ::= EQUAL 
            {
              RelationalOperator RESULT =null;
		//@@CUPDBG102
RESULT = RelationalOperator.EQ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // relational_operator ::= DIFF 
            {
              RelationalOperator RESULT =null;
		//@@CUPDBG103
RESULT = RelationalOperator.NEQ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // unsigned_constant ::= NUMINT 
            {
              Object RESULT =null;
		Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		int num = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG104
 RESULT = new UnsignedNumber(num); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned_constant",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // unsigned_constant ::= STRINGCHARACTER 
            {
              Object RESULT =null;
		Location strxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location strxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG105
 RESULT = new StringLiteral(str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned_constant",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // unsigned_constant ::= LITERALCHARACTER 
            {
              Object RESULT =null;
		Location chxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location chxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG106
 RESULT = new CharLiteral(ch); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned_constant",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // adding_operator ::= PLUS 
            {
              Object RESULT =null;
		//@@CUPDBG107
RESULT = BinaryArithmeticOperator.PLUS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("adding_operator",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // adding_operator ::= MINUS 
            {
              Object RESULT =null;
		//@@CUPDBG108
RESULT = BinaryArithmeticOperator.MINUS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("adding_operator",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // adding_operator ::= OR 
            {
              Object RESULT =null;
		//@@CUPDBG109
RESULT = BinaryBooleanOperator.OR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("adding_operator",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sign ::= MINUS 
            {
              Sign RESULT =null;
		//@@CUPDBG110
 RESULT = Sign.MINUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sign ::= PLUS 
            {
              Sign RESULT =null;
		//@@CUPDBG111
 RESULT = Sign.PLUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // variable_access ::= ID 
            {
              VariableAccess RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG112
 RESULT = new Variable(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_access",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // variable_access ::= variable_access LBRA expression_list RBRA 
            {
              VariableAccess RESULT =null;
		Location var_accessxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location var_accessxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		VariableAccess var_access = (VariableAccess)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exp_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exp_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> exp_list = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG113
 IndexedVariable var = new IndexedVariable(var_access, exp_list.get(0));
					   for (Expression exp : exp_list.subList(1, exp_list.size())) var = new IndexedVariable(var, exp);
					   RESULT = var; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_access",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression_list ::= expression 
            {
              List<Expression> RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG114
 List<Expression> list = new ArrayList<Expression>();
                              	       list.add(exp); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression_list ::= expression COMMA expression_list 
            {
              List<Expression> RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Expression> expList = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG115
 expList.add(exp); RESULT = expList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
