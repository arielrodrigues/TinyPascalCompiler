
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package syntacticAnalyzer;

import abstractSyntax.ConformantArray.*;
import abstractSyntax.Constant.*;
import abstractSyntax.Exp.*;
import abstractSyntax.FormalParameter.*;
import abstractSyntax.labelsAndTypes.*;
import abstractSyntax.Node.*;
import abstractSyntax.Operator.*;
import abstractSyntax.procedureAndFunctionDeclaration.*;
import abstractSyntax.Stm.*;
import abstractSyntax.variablesDeclaration.*;
import java.io.FileInputStream;
import lexicalAnalyzer.Lexer;
import java.io.IOException;
import java.nio.file.Paths;
import java_cup.runtime.*;
import java.io.File;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\007\000\002\002\004\000\002\002" +
    "\012\000\002\004\005\000\002\004\003\000\002\003\007" +
    "\000\002\005\005\000\002\005\002\000\002\006\003\000" +
    "\002\006\005\000\002\023\004\000\002\023\002\000\002" +
    "\010\004\000\002\010\003\000\002\007\006\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\013\010\000\002\017\005\000\002\017\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\014\005" +
    "\000\002\015\005\000\002\030\003\000\002\030\003\000" +
    "\002\030\004\000\002\030\004\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\025\004\000\002\025" +
    "\002\000\002\026\004\000\002\026\003\000\002\024\006" +
    "\000\002\027\005\000\002\027\005\000\002\027\002\000" +
    "\002\031\005\000\002\033\005\000\002\032\004\000\002" +
    "\032\007\000\002\034\006\000\002\034\011\000\002\021" +
    "\003\000\002\021\003\000\002\036\005\000\002\036\003" +
    "\000\002\035\005\000\002\035\006\000\002\035\005\000" +
    "\002\035\006\000\002\037\010\000\002\037\010\000\002" +
    "\041\005\000\002\041\003\000\002\040\007\000\002\042" +
    "\003\000\002\042\005\000\002\043\005\000\002\043\003" +
    "\000\002\043\006\000\002\043\004\000\002\043\003\000" +
    "\002\043\006\000\002\043\010\000\002\043\006\000\002" +
    "\043\002\000\002\044\005\000\002\045\005\000\002\045" +
    "\003\000\002\047\003\000\002\047\005\000\002\050\005" +
    "\000\002\050\004\000\002\050\003\000\002\051\005\000" +
    "\002\051\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\006\000\002\052" +
    "\005\000\002\052\003\000\002\052\003\000\002\052\004" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\056\003\000\002\056\003\000" +
    "\002\057\003\000\002\057\003\000\002\046\003\000\002" +
    "\046\006\000\002\053\003\000\002\053\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\004\043\005\001\002\000\004\002\326\001" +
    "\002\000\004\021\006\001\002\000\006\005\007\011\010" +
    "\001\002\000\016\017\016\023\ufffa\026\ufffa\027\ufffa\030" +
    "\ufffa\031\ufffa\001\002\000\004\021\011\001\002\000\010" +
    "\012\ufffd\020\ufffd\056\ufffd\001\002\000\006\012\014\020" +
    "\013\001\002\000\004\021\323\001\002\000\004\005\015" +
    "\001\002\000\016\017\016\023\ufffa\026\ufffa\027\ufffa\030" +
    "\ufffa\031\ufffa\001\002\000\004\035\316\001\002\000\014" +
    "\023\023\026\ufff6\027\ufff6\030\ufff6\031\ufff6\001\002\000" +
    "\004\013\021\001\002\000\004\002\uffff\001\002\000\012" +
    "\026\102\027\uffd8\030\uffd8\031\uffd8\001\002\000\004\021" +
    "\024\001\002\000\004\014\030\001\002\000\014\021\024" +
    "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\001\002\000\014\021" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\001\002\000\014" +
    "\021\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\001\002\000" +
    "\034\006\031\007\047\011\054\021\037\024\053\035\040" +
    "\036\041\037\046\040\035\061\033\062\042\072\051\127" +
    "\045\001\002\000\004\035\101\001\002\000\004\055\076" +
    "\001\002\000\012\005\uffee\012\uffee\016\uffee\020\uffee\001" +
    "\002\000\004\005\uffeb\001\002\000\012\005\uffdb\016\uffdb" +
    "\020\uffdb\055\uffdb\001\002\000\004\005\ufff0\001\002\000" +
    "\006\005\ufff2\055\uffe0\001\002\000\012\005\uffdf\016\uffdf" +
    "\020\uffdf\055\uffdf\001\002\000\012\005\uffec\012\uffec\016" +
    "\uffec\020\uffec\001\002\000\012\005\uffed\012\uffed\016\uffed" +
    "\020\uffed\001\002\000\004\005\uffea\001\002\000\004\005" +
    "\ufff1\001\002\000\012\005\uffdc\016\uffdc\020\uffdc\055\uffdc" +
    "\001\002\000\012\005\uffda\016\uffda\020\uffda\055\uffda\001" +
    "\002\000\004\035\075\001\002\000\004\005\074\001\002" +
    "\000\012\005\uffef\012\uffef\016\uffef\020\uffef\001\002\000" +
    "\004\005\uffe9\001\002\000\004\015\057\001\002\000\004" +
    "\021\011\001\002\000\006\012\056\020\013\001\002\000" +
    "\010\005\uffe2\016\uffe2\020\uffe2\001\002\000\032\006\031" +
    "\007\047\011\054\021\061\035\040\036\041\037\046\040" +
    "\035\061\033\062\042\072\051\127\045\001\002\000\006" +
    "\016\uffe5\020\uffe5\001\002\000\010\016\uffca\020\uffca\055" +
    "\uffe0\001\002\000\006\016\uffe6\020\uffe6\001\002\000\006" +
    "\016\070\020\067\001\002\000\006\016\uffe3\020\uffe3\001" +
    "\002\000\006\016\uffe4\020\uffe4\001\002\000\012\005\uffcb" +
    "\012\uffcb\016\uffcb\020\uffcb\001\002\000\032\006\031\007" +
    "\047\011\054\021\061\035\040\036\041\037\046\040\035" +
    "\061\033\062\042\072\051\127\045\001\002\000\004\025" +
    "\071\001\002\000\034\006\031\007\047\011\054\021\037" +
    "\024\053\035\040\036\041\037\046\040\035\061\033\062" +
    "\042\072\051\127\045\001\002\000\004\005\uffe8\001\002" +
    "\000\006\016\uffe7\020\uffe7\001\002\000\014\021\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\001\002\000\012\005\uffde" +
    "\016\uffde\020\uffde\055\uffde\001\002\000\020\006\031\007" +
    "\047\021\077\035\040\037\046\040\035\127\045\001\002" +
    "\000\010\005\uffe0\016\uffe0\020\uffe0\001\002\000\010\005" +
    "\uffe1\016\uffe1\020\uffe1\001\002\000\012\005\uffdd\016\uffdd" +
    "\020\uffdd\055\uffdd\001\002\000\004\021\011\001\002\000" +
    "\010\027\uffd2\030\uffd2\031\uffd2\001\002\000\010\027\106" +
    "\030\114\031\110\001\002\000\004\005\305\001\002\000" +
    "\004\021\301\001\002\000\004\005\300\001\002\000\022" +
    "\004\167\005\uffb4\021\171\031\110\032\uffb4\033\174\035" +
    "\170\044\164\001\002\000\006\005\ufffc\013\ufffc\001\002" +
    "\000\004\005\163\001\002\000\004\005\161\001\002\000" +
    "\004\021\115\001\002\000\006\011\116\056\117\001\002" +
    "\000\006\021\011\026\122\001\002\000\014\021\120\036" +
    "\041\061\033\062\042\072\051\001\002\000\010\005\uffca" +
    "\012\uffca\016\uffca\001\002\000\004\005\uffcd\001\002\000" +
    "\004\021\011\001\002\000\006\005\150\012\151\001\002" +
    "\000\006\020\013\056\126\001\002\000\006\005\uffc8\012" +
    "\uffc8\001\002\000\016\021\120\024\130\036\041\061\033" +
    "\062\042\072\051\001\002\000\006\005\uffc7\012\uffc7\001" +
    "\002\000\004\015\132\001\002\000\006\005\uffc5\012\uffc5" +
    "\001\002\000\004\021\133\001\002\000\004\055\144\001" +
    "\002\000\004\016\140\001\002\000\006\005\136\016\uffc0" +
    "\001\002\000\004\021\133\001\002\000\004\016\uffc1\001" +
    "\002\000\004\025\141\001\002\000\016\021\120\024\130" +
    "\036\041\061\033\062\042\072\051\001\002\000\006\005" +
    "\uffc3\012\uffc3\001\002\000\006\005\uffc2\012\uffc2\001\002" +
    "\000\004\021\145\001\002\000\004\056\146\001\002\000" +
    "\014\021\120\036\041\061\033\062\042\072\051\001\002" +
    "\000\006\005\uffbf\016\uffbf\001\002\000\006\021\011\026" +
    "\122\001\002\000\004\056\152\001\002\000\014\021\120" +
    "\036\041\061\033\062\042\072\051\001\002\000\004\005" +
    "\uffcc\001\002\000\006\005\uffc9\012\uffc9\001\002\000\006" +
    "\020\013\056\156\001\002\000\016\021\120\024\130\036" +
    "\041\061\033\062\042\072\051\001\002\000\006\005\uffc6" +
    "\012\uffc6\001\002\000\006\005\uffc4\012\uffc4\001\002\000" +
    "\016\017\016\023\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\001\002\000\004\005\uffd1\001\002\000\010\027\uffd3\030" +
    "\uffd3\031\uffd3\001\002\000\026\006\212\007\204\011\211" +
    "\021\217\022\221\035\213\037\214\040\210\047\222\127" +
    "\205\001\002\000\010\005\uffbe\032\uffbe\042\uffbe\001\002" +
    "\000\010\005\uffb8\032\uffb8\042\uffb8\001\002\000\026\006" +
    "\212\007\204\011\211\021\217\022\221\035\213\037\214" +
    "\040\210\047\222\127\205\001\002\000\004\056\266\001" +
    "\002\000\016\005\uffbb\011\263\015\uff8e\032\uffbb\042\uffbb" +
    "\063\uff8e\001\002\000\006\005\uffb1\032\uffb1\001\002\000" +
    "\006\015\202\063\203\001\002\000\004\035\201\001\002" +
    "\000\006\005\176\032\177\001\002\000\022\004\167\005" +
    "\uffb4\021\171\031\110\032\uffb4\033\174\035\170\044\164" +
    "\001\002\000\012\005\uffb3\013\uffb3\032\uffb3\042\uffb3\001" +
    "\002\000\006\005\uffb2\032\uffb2\001\002\000\010\005\uffb9" +
    "\032\uffb9\042\uffb9\001\002\000\026\006\212\007\204\011" +
    "\211\021\217\022\221\035\213\037\214\040\210\047\222" +
    "\127\205\001\002\000\026\006\212\007\204\011\211\021" +
    "\217\022\221\035\213\037\214\040\210\047\222\127\205" +
    "\001\002\000\022\011\uff90\021\uff90\022\uff90\035\uff90\037" +
    "\uff90\040\uff90\047\uff90\127\uff90\001\002\000\054\005\uffa8" +
    "\006\uffa8\007\uffa8\010\uffa8\012\uffa8\014\uffa8\016\uffa8\020" +
    "\uffa8\032\uffa8\034\uffa8\041\uffa8\042\uffa8\045\uffa8\046\uffa8" +
    "\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\057\uffa8\060" +
    "\uffa8\001\002\000\022\011\211\021\217\022\221\035\213" +
    "\037\214\040\210\047\222\127\205\001\002\000\054\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\012\uffac\014\uffac\016\uffac" +
    "\020\uffac\032\uffac\034\uffac\041\uffac\042\uffac\045\254\046" +
    "\252\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\057\uffac" +
    "\060\uffac\001\002\000\054\005\uffa3\006\uffa3\007\uffa3\010" +
    "\uffa3\012\uffa3\014\uffa3\016\uffa3\020\uffa3\032\uffa3\034\uffa3" +
    "\041\uffa3\042\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3\052" +
    "\uffa3\053\uffa3\054\uffa3\057\uffa3\060\uffa3\001\002\000\026" +
    "\006\212\007\204\011\211\021\217\022\221\035\213\037" +
    "\214\040\210\047\222\127\205\001\002\000\022\011\uff8f" +
    "\021\uff8f\022\uff8f\035\uff8f\037\uff8f\040\uff8f\047\uff8f\127" +
    "\uff8f\001\002\000\054\005\uffa6\006\uffa6\007\uffa6\010\uffa6" +
    "\012\uffa6\014\uffa6\016\uffa6\020\uffa6\032\uffa6\034\uffa6\041" +
    "\uffa6\042\uffa6\045\uffa6\046\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\057\uffa6\060\uffa6\001\002\000\054\005" +
    "\uffa2\006\uffa2\007\uffa2\010\uffa2\012\uffa2\014\uffa2\016\uffa2" +
    "\020\uffa2\032\uffa2\034\uffa2\041\uffa2\042\uffa2\045\uffa2\046" +
    "\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\057\uffa2" +
    "\060\uffa2\001\002\000\024\005\uffbc\014\240\032\uffbc\042" +
    "\uffbc\050\234\051\233\052\237\053\241\054\235\001\002" +
    "\000\050\005\uffb0\006\244\007\245\010\250\012\uffb0\014" +
    "\uffb0\016\uffb0\020\uffb0\032\uffb0\034\uffb0\041\uffb0\042\uffb0" +
    "\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\057\246\060" +
    "\243\001\002\000\060\005\uff8e\006\uff8e\007\uff8e\010\uff8e" +
    "\011\225\012\uff8e\014\uff8e\015\uff8e\016\uff8e\020\uff8e\032" +
    "\uff8e\034\uff8e\041\uff8e\042\uff8e\045\uff8e\046\uff8e\050\uff8e" +
    "\051\uff8e\052\uff8e\053\uff8e\054\uff8e\057\uff8e\060\uff8e\001" +
    "\002\000\054\005\uffaa\006\uffaa\007\uffaa\010\uffaa\012\uffaa" +
    "\014\uffaa\016\uffaa\020\uffaa\032\uffaa\034\uffaa\041\uffaa\042" +
    "\uffaa\045\uffaa\046\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\054\uffaa\057\uffaa\060\uffaa\001\002\000\054\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\012\uffa7\014\uffa7\016\uffa7\020\uffa7" +
    "\032\uffa7\034\uffa7\041\uffa7\042\uffa7\045\uffa7\046\uffa7\050" +
    "\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\057\uffa7\060\uffa7" +
    "\001\002\000\022\011\211\021\217\022\221\035\213\037" +
    "\214\040\210\047\222\127\205\001\002\000\056\005\uffa9" +
    "\006\uffa9\007\uffa9\010\uffa9\012\uffa9\014\uffa9\015\202\016" +
    "\uffa9\020\uffa9\032\uffa9\034\uffa9\041\uffa9\042\uffa9\045\uffa9" +
    "\046\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\057" +
    "\uffa9\060\uffa9\001\002\000\054\005\uffa1\006\uffa1\007\uffa1" +
    "\010\uffa1\012\uffa1\014\uffa1\016\uffa1\020\uffa1\032\uffa1\034" +
    "\uffa1\041\uffa1\042\uffa1\045\uffa1\046\uffa1\050\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\054\uffa1\057\uffa1\060\uffa1\001\002\000" +
    "\026\006\212\007\204\011\211\021\217\022\221\035\213" +
    "\037\214\040\210\047\222\127\205\001\002\000\024\012" +
    "\uff8c\014\240\016\uff8c\020\uff8c\050\234\051\233\052\237" +
    "\053\241\054\235\001\002\000\006\012\231\020\230\001" +
    "\002\000\026\006\212\007\204\011\211\021\217\022\221" +
    "\035\213\037\214\040\210\047\222\127\205\001\002\000" +
    "\054\005\uffa5\006\uffa5\007\uffa5\010\uffa5\012\uffa5\014\uffa5" +
    "\016\uffa5\020\uffa5\032\uffa5\034\uffa5\041\uffa5\042\uffa5\045" +
    "\uffa5\046\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5" +
    "\057\uffa5\060\uffa5\001\002\000\024\012\uff8b\014\240\016" +
    "\uff8b\020\uff8b\050\234\051\233\052\237\053\241\054\235" +
    "\001\002\000\026\006\uff9b\007\uff9b\011\uff9b\021\uff9b\022" +
    "\uff9b\035\uff9b\037\uff9b\040\uff9b\047\uff9b\127\uff9b\001\002" +
    "\000\026\006\uff99\007\uff99\011\uff99\021\uff99\022\uff99\035" +
    "\uff99\037\uff99\040\uff99\047\uff99\127\uff99\001\002\000\026" +
    "\006\uff96\007\uff96\011\uff96\021\uff96\022\uff96\035\uff96\037" +
    "\uff96\040\uff96\047\uff96\127\uff96\001\002\000\026\006\212" +
    "\007\204\011\211\021\217\022\221\035\213\037\214\040" +
    "\210\047\222\127\205\001\002\000\026\006\uff9a\007\uff9a" +
    "\011\uff9a\021\uff9a\022\uff9a\035\uff9a\037\uff9a\040\uff9a\047" +
    "\uff9a\127\uff9a\001\002\000\026\006\uff97\007\uff97\011\uff97" +
    "\021\uff97\022\uff97\035\uff97\037\uff97\040\uff97\047\uff97\127" +
    "\uff97\001\002\000\026\006\uff98\007\uff98\011\uff98\021\uff98" +
    "\022\uff98\035\uff98\037\uff98\040\uff98\047\uff98\127\uff98\001" +
    "\002\000\050\005\uffaf\006\244\007\245\010\250\012\uffaf" +
    "\014\uffaf\016\uffaf\020\uffaf\032\uffaf\034\uffaf\041\uffaf\042" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\057\246" +
    "\060\243\001\002\000\022\011\uff9e\021\uff9e\022\uff9e\035" +
    "\uff9e\037\uff9e\040\uff9e\047\uff9e\127\uff9e\001\002\000\022" +
    "\011\uff9d\021\uff9d\022\uff9d\035\uff9d\037\uff9d\040\uff9d\047" +
    "\uff9d\127\uff9d\001\002\000\022\011\uff9c\021\uff9c\022\uff9c" +
    "\035\uff9c\037\uff9c\040\uff9c\047\uff9c\127\uff9c\001\002\000" +
    "\022\011\uff9f\021\uff9f\022\uff9f\035\uff9f\037\uff9f\040\uff9f" +
    "\047\uff9f\127\uff9f\001\002\000\022\011\211\021\217\022" +
    "\221\035\213\037\214\040\210\047\222\127\205\001\002" +
    "\000\022\011\uffa0\021\uffa0\022\uffa0\035\uffa0\037\uffa0\040" +
    "\uffa0\047\uffa0\127\uffa0\001\002\000\054\005\uffae\006\uffae" +
    "\007\uffae\010\uffae\012\uffae\014\uffae\016\uffae\020\uffae\032" +
    "\uffae\034\uffae\041\uffae\042\uffae\045\254\046\252\050\uffae" +
    "\051\uffae\052\uffae\053\uffae\054\uffae\057\uffae\060\uffae\001" +
    "\002\000\022\011\uff92\021\uff92\022\uff92\035\uff92\037\uff92" +
    "\040\uff92\047\uff92\127\uff92\001\002\000\022\011\211\021" +
    "\217\022\221\035\213\037\214\040\210\047\222\127\205" +
    "\001\002\000\022\011\uff91\021\uff91\022\uff91\035\uff91\037" +
    "\uff91\040\uff91\047\uff91\127\uff91\001\002\000\054\005\uffab" +
    "\006\uffab\007\uffab\010\uffab\012\uffab\014\uffab\016\uffab\020" +
    "\uffab\032\uffab\034\uffab\041\uffab\042\uffab\045\uffab\046\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\057\uffab\060" +
    "\uffab\001\002\000\020\012\257\014\240\050\234\051\233" +
    "\052\237\053\241\054\235\001\002\000\054\005\uffa4\006" +
    "\uffa4\007\uffa4\010\uffa4\012\uffa4\014\uffa4\016\uffa4\020\uffa4" +
    "\032\uffa4\034\uffa4\041\uffa4\042\uffa4\045\uffa4\046\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\057\uffa4\060\uffa4" +
    "\001\002\000\054\005\uffad\006\uffad\007\uffad\010\uffad\012" +
    "\uffad\014\uffad\016\uffad\020\uffad\032\uffad\034\uffad\041\uffad" +
    "\042\uffad\045\254\046\252\050\uffad\051\uffad\052\uffad\053" +
    "\uffad\054\uffad\057\uffad\060\uffad\001\002\000\006\016\262" +
    "\020\230\001\002\000\060\005\uff8d\006\uff8d\007\uff8d\010" +
    "\uff8d\012\uff8d\014\uff8d\015\uff8d\016\uff8d\020\uff8d\032\uff8d" +
    "\034\uff8d\041\uff8d\042\uff8d\045\uff8d\046\uff8d\050\uff8d\051" +
    "\uff8d\052\uff8d\053\uff8d\054\uff8d\057\uff8d\060\uff8d\063\uff8d" +
    "\001\002\000\026\006\212\007\204\011\211\021\217\022" +
    "\221\035\213\037\214\040\210\047\222\127\205\001\002" +
    "\000\006\012\265\020\230\001\002\000\010\005\uffba\032" +
    "\uffba\042\uffba\001\002\000\022\004\167\005\uffb4\021\171" +
    "\031\110\032\uffb4\033\174\042\uffb4\044\164\001\002\000" +
    "\010\005\uffbd\032\uffbd\042\uffbd\001\002\000\020\014\240" +
    "\034\271\050\234\051\233\052\237\053\241\054\235\001" +
    "\002\000\024\004\167\005\uffb4\021\171\031\110\032\uffb4" +
    "\033\174\035\170\042\uffb4\044\164\001\002\000\010\005" +
    "\uffb7\032\uffb7\042\273\001\002\000\024\004\167\005\uffb4" +
    "\021\171\031\110\032\uffb4\033\174\035\170\042\uffb4\044" +
    "\164\001\002\000\010\005\uffb6\032\uffb6\042\uffb6\001\002" +
    "\000\020\014\240\041\276\050\234\051\233\052\237\053" +
    "\241\054\235\001\002\000\024\004\167\005\uffb4\021\171" +
    "\031\110\032\uffb4\033\174\035\170\042\uffb4\044\164\001" +
    "\002\000\010\005\uffb5\032\uffb5\042\uffb5\001\002\000\010" +
    "\027\uffd4\030\uffd4\031\uffd4\001\002\000\006\005\uffcf\011" +
    "\302\001\002\000\006\021\011\026\122\001\002\000\006" +
    "\005\150\012\304\001\002\000\004\005\uffce\001\002\000" +
    "\016\017\016\023\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\001\002\000\004\005\uffd0\001\002\000\006\020\013\056" +
    "\313\001\002\000\012\021\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\001\002\000\012\021\011\027\uffd9\030\uffd9\031\uffd9\001" +
    "\002\000\012\021\uffd7\027\uffd7\030\uffd7\031\uffd7\001\002" +
    "\000\034\006\031\007\047\011\054\021\037\024\053\035" +
    "\040\036\041\037\046\040\035\061\033\062\042\072\051" +
    "\127\045\001\002\000\004\005\315\001\002\000\012\021" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\001\002\000\006\005\ufff9" +
    "\020\ufff9\001\002\000\006\005\321\020\320\001\002\000" +
    "\004\035\322\001\002\000\014\023\ufffb\026\ufffb\027\ufffb" +
    "\030\ufffb\031\ufffb\001\002\000\006\005\ufff8\020\ufff8\001" +
    "\002\000\010\012\ufffe\020\ufffe\056\ufffe\001\002\000\004" +
    "\013\325\001\002\000\004\002\001\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\323\005\016" +
    "\001\001\000\004\004\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\017\005\016\001\001\000\004\006\316\001\001\000" +
    "\004\023\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\102\001\001\000\006\007\025\010\024\001" +
    "\001\000\002\001\001\000\004\007\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\011\047\012\035\013" +
    "\051\014\033\015\042\020\043\030\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\057\015\064\016\061\017\062\020\065\021\063\030\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\057\015\064\016\072\020" +
    "\065\021\063\030\031\001\001\000\002\001\001\000\020" +
    "\011\071\012\035\013\051\014\033\015\042\020\043\030" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\306\024\307\026\310\001\001\000\004\027\103\001" +
    "\001\000\014\031\106\032\112\033\111\034\104\044\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\042\171\043\164\044\165\045\174\046\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\123" +
    "\035\124\036\122\001\001\000\006\020\065\021\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\065\021\126\037\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\134\041\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\134\041\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\065\021\141" +
    "\037\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\065\021\146" +
    "\001\001\000\002\001\001\000\006\004\123\035\153\001" +
    "\001\000\002\001\001\000\006\020\065\021\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\065\021\156\037\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\161\005\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\046\222\047\274" +
    "\050\215\051\206\052\217\057\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\046\222\047\267\050\215" +
    "\051\206\052\217\057\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\042\177\043\164\044" +
    "\165\046\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\046\222\047\225\050\215\051" +
    "\206\052\217\053\260\057\205\001\001\000\016\046\222" +
    "\047\214\050\215\051\206\052\217\057\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\046\222\051\257" +
    "\052\217\001\001\000\004\056\252\001\001\000\002\001" +
    "\001\000\016\046\222\047\255\050\215\051\206\052\217" +
    "\057\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\054\235\001\001\000\004\055\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\046\222\052\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\046\222\047\225\050\215\051" +
    "\206\052\217\053\226\057\205\001\001\000\004\054\235" +
    "\001\001\000\002\001\001\000\016\046\222\047\231\050" +
    "\215\051\206\052\217\057\205\001\001\000\002\001\001" +
    "\000\004\054\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\046\222\050\241\051\206" +
    "\052\217\057\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\246\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\046\222\051\250\052\217\001\001\000\002" +
    "\001\001\000\004\056\252\001\001\000\002\001\001\000" +
    "\006\046\222\052\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\235\001\001\000\002\001\001\000" +
    "\004\056\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\046\222\047\225\050\215\051\206\052\217\053" +
    "\263\057\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\043\266\044\165\046\172\001\001\000\002\001" +
    "\001\000\004\054\235\001\001\000\012\042\271\043\164" +
    "\044\165\046\172\001\001\000\002\001\001\000\012\042" +
    "\273\043\164\044\165\046\172\001\001\000\002\001\001" +
    "\000\004\054\235\001\001\000\012\042\276\043\164\044" +
    "\165\046\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\123\035\124\036\302\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\305" +
    "\005\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\306\024\311\001\001\000\002" +
    "\001\001\000\020\011\313\012\035\013\051\014\033\015" +
    "\042\020\043\030\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

    ComplexSymbolFactory f = new ComplexSymbolFactory();
    symbolFactory = f;
    File file = new File(Paths.get("").toAbsolutePath().toString() + "/src/" + "input.txt");
    FileInputStream fis = null;
    try {
        fis = new FileInputStream(file);
    } catch (IOException e) {
        e.printStackTrace();
    }
    lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2

    return lexer.next_token();

    }

//@@CUPDBG0

  protected Lexer lexer; 

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM ID SEMICOLON block DOT 
            {
              Program RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG3
 RESULT = new Program(nm, Collections.EMPTY_LIST, bl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROGRAM ID LPAR id_list RPAR SEMICOLON block DOT 
            {
              Program RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG4
 RESULT = new Program(nm, ids, bl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // id_list ::= id_list COMMA ID 
            {
              List<String> RESULT =null;
		Location nmsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nmsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> nms = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5
 nms.add(id); RESULT = nms;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // id_list ::= ID 
            {
              List<String> RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
 List<String> ids = new ArrayList<String>(); ids.add(nm);
            RESULT = ids; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= label_declaration_part type_definition_part variable_declaration_part procedure_and_function_declaration_part compound_statement 
            {
              Block RESULT =null;
		Location labelsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location labelsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<Integer> labels = (List<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location typeDefsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typeDefsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<TypeDefinition> typeDefs = (List<TypeDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location varDecsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location varDecsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<VariableDeclaration> varDecs = (List<VariableDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location subprogDecsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location subprogDecsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ProcedureOrFunctionDeclaration> subprogDecs = (List<ProcedureOrFunctionDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
 RESULT = new Block(labels, typeDefs, varDecs, subprogDecs, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // label_declaration_part ::= LABEL label_list SEMICOLON 
            {
              List<Integer> RESULT =null;
		Location labelsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location labelsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Integer> labels = (List<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG8
 RESULT = labels; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // label_declaration_part ::= 
            {
              List<Integer> RESULT =null;
		//@@CUPDBG9
 RESULT = Collections.EMPTY_LIST; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // label_list ::= NUMINT 
            {
              List<Integer> RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		int n = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG10
 List<Integer> list = new ArrayList<>(); list.add(n);
                           RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // label_list ::= label_list COMMA NUMINT 
            {
              List<Integer> RESULT =null;
		Location labelsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location labelsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Integer> labels = (List<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		int n = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG11
 labels.add(n); RESULT = labels; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_definition_part ::= TYPE type_definition_sequence 
            {
              List<TypeDefinition> RESULT =null;
		Location typeDefsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typeDefsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<TypeDefinition> typeDefs = (List<TypeDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG12
 RESULT = typeDefs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_definition_part ::= 
            {
              List<TypeDefinition> RESULT =null;
		//@@CUPDBG13
 RESULT = Collections.EMPTY_LIST; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_definition_sequence ::= type_definition_sequence type_definition 
            {
              List<TypeDefinition> RESULT =null;
		Location defsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location defsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<TypeDefinition> defs = (List<TypeDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location typeDefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typeDefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeDefinition typeDef = (TypeDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG14
 defs.add(typeDef); RESULT = defs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_sequence",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_definition_sequence ::= type_definition 
            {
              List<TypeDefinition> RESULT =null;
		Location typeDefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typeDefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeDefinition typeDef = (TypeDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15
 List<TypeDefinition> types = new ArrayList<>(); types.add(typeDef);
                               RESULT = types; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_sequence",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_definition ::= ID EQUAL type_denoter SEMICOLON 
            {
              TypeDefinition RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location type_denxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location type_denxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeDenoter type_den = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG16
 RESULT = new TypeDefinition(id,type_den); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type_denoter ::= ID 
            {
              TypeDenoter RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17
 RESULT = new IdType(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_denoter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_denoter ::= primitive_type 
            {
              TypeDenoter RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		PrimitiveType type = (PrimitiveType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18
 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_denoter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type_denoter ::= new_type 
            {
              TypeDenoter RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeDenoter type = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG19
 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_denoter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // primitive_type ::= INTEGER 
            {
              PrimitiveType RESULT =null;
		//@@CUPDBG20
 RESULT = PrimitiveType.INTEGER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // primitive_type ::= CHAR 
            {
              PrimitiveType RESULT =null;
		//@@CUPDBG21
 RESULT = PrimitiveType.CHAR; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // primitive_type ::= STRING 
            {
              PrimitiveType RESULT =null;
		//@@CUPDBG22
 RESULT = PrimitiveType.STRING; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // primitive_type ::= BOOLEAN 
            {
              PrimitiveType RESULT =null;
		//@@CUPDBG23
 RESULT = PrimitiveType.BOOLEAN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // new_type ::= enumerated_type 
            {
              TypeDenoter RESULT =null;
		Location enumTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location enumTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		EnumeratedType enumType = (EnumeratedType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24
 RESULT = enumType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // new_type ::= subrange_type 
            {
              TypeDenoter RESULT =null;
		Location subRangeTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location subRangeTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SubrangeType subRangeType = (SubrangeType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG25
 RESULT = subRangeType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // new_type ::= array_type 
            {
              TypeDenoter RESULT =null;
		Location arrayTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arrayTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeDenoter arrayType = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26
 RESULT = arrayType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // array_type ::= ARRAY LBRA ordinal_type_list RBRA OF type_denoter 
            {
              TypeDenoter RESULT =null;
		Location ordsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ordsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<TypeDenoter> ords = (List<TypeDenoter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeDenoter type = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27
 TypeDenoter elemTy = type;
            for (int i=ords.size()-1; i>0; i--)
              elemTy = new Array((TypeDenoter) ords.get(i), elemTy);
            RESULT = new Array((TypeDenoter) ords.get(0), elemTy); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ordinal_type_list ::= ordinal_type_list COMMA ordinal_type 
            {
              List<TypeDenoter> RESULT =null;
		Location ordsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ordsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<TypeDenoter> ords = (List<TypeDenoter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeDenoter type = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG28
 ords.add(type); RESULT = ords; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ordinal_type_list ::= ordinal_type 
            {
              List<TypeDenoter> RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeDenoter type = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG29
 List<TypeDenoter> ords = new ArrayList<>();
            		                       ords.add(type); RESULT = ords; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ordinal_type ::= enumerated_type 
            {
              TypeDenoter RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		EnumeratedType type = (EnumeratedType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG30
 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ordinal_type ::= subrange_type 
            {
              TypeDenoter RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SubrangeType type = (SubrangeType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG31
 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ordinal_type ::= type_id_or_primitive 
            {
              TypeDenoter RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdOrPrimitive type = (TypeIdOrPrimitive)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG32
 RESULT = type instanceof IdType ? (IdType) type : (PrimitiveType) type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // enumerated_type ::= LPAR id_list RPAR 
            {
              EnumeratedType RESULT =null;
		Location idListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<String> idList = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG33
 RESULT = new EnumeratedType(idList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumerated_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // subrange_type ::= constant DOUBLEDOT constant 
            {
              SubrangeType RESULT =null;
		Location const1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location const1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Constant const1 = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location const2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location const2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Constant const2 = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG34
 RESULT = new SubrangeType(const1, const2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subrange_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // constant ::= ID 
            {
              Constant RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG35
 RESULT = new IdConstant(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // constant ::= NUMINT 
            {
              Constant RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		int n = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG36
 RESULT = new UnsignedNumber(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // constant ::= MINUS NUMINT 
            {
              Constant RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		int n = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG37
 RESULT = new SignedNumber(Sign.MINUS, new UnsignedNumber(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // constant ::= PLUS NUMINT 
            {
              Constant RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		int n = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG38
 RESULT = new SignedNumber(Sign.PLUS, new UnsignedNumber(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // constant ::= LITERALCHARACTER 
            {
              Constant RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG39
 RESULT = new CharacterConstant(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // constant ::= TRUE 
            {
              Constant RESULT =null;
		//@@CUPDBG40
 RESULT = BooleanConstant.TRUE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // constant ::= FALSE 
            {
              Constant RESULT =null;
		//@@CUPDBG41
 RESULT = BooleanConstant.FALSE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable_declaration_part ::= VAR variable_declaration_sequence 
            {
              List<VariableDeclaration> RESULT =null;
		Location varDecsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location varDecsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<VariableDeclaration> varDecs = (List<VariableDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG42
 RESULT = varDecs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable_declaration_part ::= 
            {
              List<VariableDeclaration> RESULT =null;
		//@@CUPDBG43
 RESULT = Collections.EMPTY_LIST; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variable_declaration_sequence ::= variable_declaration_sequence variable_declaration 
            {
              List<VariableDeclaration> RESULT =null;
		Location decs1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location decs1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<VariableDeclaration> decs1 = (List<VariableDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location decs2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location decs2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<VariableDeclaration> decs2 = (List<VariableDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG44
 decs1.addAll(decs2); RESULT = decs1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_sequence",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variable_declaration_sequence ::= variable_declaration 
            {
              List<VariableDeclaration> RESULT =null;
		Location decsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location decsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<VariableDeclaration> decs = (List<VariableDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG45
 RESULT = decs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_sequence",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variable_declaration ::= id_list COLON type_denoter SEMICOLON 
            {
              List<VariableDeclaration> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TypeDenoter type = (TypeDenoter)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG46
 List<VariableDeclaration> decs = new ArrayList<VariableDeclaration>();
                            for (String nm : ids) decs.add(new VariableDeclaration(nm, type));
                            RESULT = decs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // procedure_and_function_declaration_part ::= procedure_and_function_declaration_part procedure_declaration SEMICOLON 
            {
              List<ProcedureOrFunctionDeclaration> RESULT =null;
		Location decsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location decsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ProcedureOrFunctionDeclaration> decs = (List<ProcedureOrFunctionDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location procxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location procxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ProcedureDeclaration proc = (ProcedureDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG47
 decs.add(proc); RESULT = decs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_and_function_declaration_part",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // procedure_and_function_declaration_part ::= procedure_and_function_declaration_part function_declaration SEMICOLON 
            {
              List<ProcedureOrFunctionDeclaration> RESULT =null;
		Location decsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location decsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ProcedureOrFunctionDeclaration> decs = (List<ProcedureOrFunctionDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		FunctionDeclaration func = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG48
 decs.add(func); RESULT = decs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_and_function_declaration_part",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // procedure_and_function_declaration_part ::= 
            {
              List<ProcedureOrFunctionDeclaration> RESULT =null;
		//@@CUPDBG49
 RESULT = new ArrayList<ProcedureOrFunctionDeclaration>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_and_function_declaration_part",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // procedure_declaration ::= procedure_heading SEMICOLON block 
            {
              ProcedureDeclaration RESULT =null;
		Location procDecxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location procDecxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ProcedureDeclaration procDec = (ProcedureDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG50
 procDec.body = block; RESULT = procDec; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // function_declaration ::= function_heading SEMICOLON block 
            {
              FunctionDeclaration RESULT =null;
		Location funcDecxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location funcDecxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		FunctionDeclaration funcDec = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG51
 funcDec.body = block; RESULT = funcDec; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // procedure_heading ::= PROCEDURE ID 
            {
              ProcedureDeclaration RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG52
 RESULT = new ProcedureDeclaration(nm, Collections.EMPTY_LIST, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // procedure_heading ::= PROCEDURE ID LPAR formal_parameter_list RPAR 
            {
              ProcedureDeclaration RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location formalsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location formalsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<FormalParameter> formals = (List<FormalParameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG53
 RESULT = new ProcedureDeclaration(nm, formals, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // function_heading ::= FUNCTION ID COLON type_id_or_primitive 
            {
              FunctionDeclaration RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location retTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location retTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdOrPrimitive retType = (TypeIdOrPrimitive)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG54
 RESULT = new FunctionDeclaration(nm, Collections.EMPTY_LIST, retType, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_heading",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // function_heading ::= FUNCTION ID LPAR formal_parameter_list RPAR COLON type_id_or_primitive 
            {
              FunctionDeclaration RESULT =null;
		Location nmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location nmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location formalsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location formalsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<FormalParameter> formals = (List<FormalParameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location retTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location retTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdOrPrimitive retType = (TypeIdOrPrimitive)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG55
 RESULT = new FunctionDeclaration(nm, formals, retType, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_heading",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type_id_or_primitive ::= primitive_type 
            {
              TypeIdOrPrimitive RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		PrimitiveType type = (PrimitiveType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG56
 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_or_primitive",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type_id_or_primitive ::= ID 
            {
              TypeIdOrPrimitive RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG57
 RESULT = new IdType(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_or_primitive",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // formal_parameter_list ::= formal_parameter_list SEMICOLON formal_parameter 
            {
              List<FormalParameter> RESULT =null;
		Location fp_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fp_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<FormalParameter> fp_list = (List<FormalParameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location fpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<FormalParameter> fp = (List<FormalParameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG58
 fp_list.addAll(fp); RESULT = fp_list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // formal_parameter_list ::= formal_parameter 
            {
              List<FormalParameter> RESULT =null;
		Location fpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<FormalParameter> fp = (List<FormalParameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG59
 List<FormalParameter> formals = new ArrayList<>();
                                                 formals.addAll(fp); RESULT = formals; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // formal_parameter ::= id_list COLON type_id_or_primitive 
            {
              List<FormalParameter> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdOrPrimitive type = (TypeIdOrPrimitive)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG60
 List<FormalParameter> formals = new ArrayList<FormalParameter>();
                                                                     for (String id : ids) formals.add(new FormalPar(RefOrValue.Val, id, type));
                                                                     RESULT = formals; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // formal_parameter ::= VAR id_list COLON type_id_or_primitive 
            {
              List<FormalParameter> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdOrPrimitive type = (TypeIdOrPrimitive)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG61
 List<FormalParameter> formals = new ArrayList<FormalParameter>();
                                                                         for (String id : ids) formals.add(new FormalPar(RefOrValue.Ref, id, type));
                                                                         RESULT = formals; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // formal_parameter ::= id_list COLON conformant_array_schema 
            {
              List<FormalParameter> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location schemaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location schemaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ConformantArraySchema schema = (ConformantArraySchema)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG62
 List<FormalParameter> conformantArray = new ArrayList<FormalParameter>();
                         for (String id : ids) conformantArray.add(new ConformantArrayParameter(RefOrValue.Val, id, schema));
                         RESULT = conformantArray; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // formal_parameter ::= VAR id_list COLON conformant_array_schema 
            {
              List<FormalParameter> RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> ids = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location schemaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location schemaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ConformantArraySchema schema = (ConformantArraySchema)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG63
 List<FormalParameter> conformantArray = new ArrayList<FormalParameter>();
                         for (String id : ids) conformantArray.add(new ConformantArrayParameter(RefOrValue.Ref, id, schema));
                         RESULT = conformantArray; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // conformant_array_schema ::= ARRAY LBRA index_type_spec_list RBRA OF type_id_or_primitive 
            {
              ConformantArraySchema RESULT =null;
		Location indexListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location indexListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IndexType> indexList = (List<IndexType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdOrPrimitive type = (TypeIdOrPrimitive)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG64

                             TypeIdOrPrimitive type_ = (type instanceof IdType)? (IdType) type : (PrimitiveType) type;
                             ConformantArraySchema elemTy = new OneDimensionConformant(
                                                                         indexList.get(indexList.size()-1).lowId,
                                                                         indexList.get(indexList.size()-1).highId,
                                                                         indexList.get(indexList.size()-1).rangeTy, type_);
                                for (int i = indexList.size()-2; i >= 0; i--)
                                    elemTy = new MultiDimensionConformant(indexList.get(i).lowId, indexList.get(i).highId,
                                                           indexList.get(i).rangeTy, elemTy);
                                RESULT = elemTy;
                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conformant_array_schema",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // conformant_array_schema ::= ARRAY LBRA index_type_spec_list RBRA OF conformant_array_schema 
            {
              ConformantArraySchema RESULT =null;
		Location indexListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location indexListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<IndexType> indexList = (List<IndexType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ConformantArraySchema type = (ConformantArraySchema)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG65

						     ConformantArraySchema elemTy = new MultiDimensionConformant(
						                                                 indexList.get(indexList.size()-1).lowId,
                                                                         indexList.get(indexList.size()-1).highId,
                                                                         indexList.get(indexList.size()-1).rangeTy, type);
                              for (int i = indexList.size()-2; i >= 0; i--)
                                  elemTy = new MultiDimensionConformant(indexList.get(i).lowId, indexList.get(i).highId,
                                                                 indexList.get(i).rangeTy,(ConformantArraySchema) elemTy);
                              RESULT = elemTy;
                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conformant_array_schema",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // index_type_spec_list ::= index_type_specification SEMICOLON index_type_spec_list 
            {
              List<IndexType> RESULT =null;
		Location indexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location indexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		IndexType index = (IndexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IndexType> list = (List<IndexType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG66
 list.add(index); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type_spec_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // index_type_spec_list ::= index_type_specification 
            {
              List<IndexType> RESULT =null;
		Location indexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location indexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IndexType index = (IndexType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG67
 List<IndexType> indexTypeList = new ArrayList<IndexType>();
                                                           indexTypeList.add(index); RESULT = indexTypeList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type_spec_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // index_type_specification ::= ID DOUBLEDOT ID COLON type_id_or_primitive 
            {
              IndexType RESULT =null;
		Location lowxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location lowxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String low = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location highxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location highxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String high = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeIdOrPrimitive type = (TypeIdOrPrimitive)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG68
 RESULT = new IndexType(low, high, type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type_specification",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= statement_ 
            {
              Statement RESULT =null;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG69
 RESULT = stm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= NUMINT COLON statement_ 
            {
              Statement RESULT =null;
		Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		int num = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG70
 RESULT = new LabeledStatement(num, stm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement_ ::= variable_access ASSIGN expression 
            {
              Statement RESULT =null;
		Location varAccessxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location varAccessxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		VariableAccess varAccess = (VariableAccess)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG71
 RESULT = new AssignmentStatement(varAccess, exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement_ ::= ID 
            {
              Statement RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG72
 RESULT = new ProcedureStatement(id, Collections.EMPTY_LIST); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement_ ::= ID LPAR expression_list RPAR 
            {
              Statement RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location expListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> expList = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG73
 RESULT = new ProcedureStatement(id, expList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement_ ::= GOTO NUMINT 
            {
              Statement RESULT =null;
		Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		int num = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG74
 RESULT = new GotoStatement(new UnsignedNumber(num)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement_ ::= compound_statement 
            {
              Statement RESULT =null;
		Location cmpStmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cmpStmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement cmpStm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG75
 RESULT = cmpStm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statement_ ::= IF expression THEN statement 
            {
              Statement RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG76
 RESULT = new IfStatement(exp, stm, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement_ ::= IF expression THEN statement ELSE statement 
            {
              Statement RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stm2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stm2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement stm2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG77
 RESULT = new IfStatement(exp, stm, stm2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statement_ ::= WHILE expression DO statement 
            {
              Statement RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG78
 RESULT = new WhileStatement(exp, stm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement_ ::= 
            {
              Statement RESULT =null;
		//@@CUPDBG79
 RESULT = new EmptyStatement(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // compound_statement ::= BEGIN statement_sequence END 
            {
              Statement RESULT =null;
		Location cmpStmListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cmpStmListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Statement> cmpStmList = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG80
 RESULT = new CompoundStatement(cmpStmList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statement_sequence ::= statement_sequence SEMICOLON statement 
            {
              List<Statement> RESULT =null;
		Location stmsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location stmsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Statement> stms = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG81
 stms.add(stm); RESULT = stms; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement_sequence ::= statement 
            {
              List<Statement> RESULT =null;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG82
 List<Statement> stmList = new ArrayList<Statement>();
					                    stmList.add(stm); RESULT = stmList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= simple_expression 
            {
              Expression RESULT =null;
		Location simple_expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simple_expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression simple_exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG83
RESULT = simple_exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= expression relational_operator simple_expression 
            {
              Expression RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location relational_operxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location relational_operxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		RelationalOperator relational_oper = (RelationalOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location simple_expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simple_expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression simple_exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG84
 RESULT = new RelationalExpression(relational_oper, exp, simple_exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // simple_expression ::= simple_expression arithmetic_operator term 
            {
              Expression RESULT =null;
		Location simple_expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location simple_expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression simple_exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		BinaryArithmeticOperator op = (BinaryArithmeticOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression term = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG85
 RESULT =
                            new BinaryArithmeticExpression((BinaryArithmeticOperator) op, simple_exp, term); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // simple_expression ::= sign term 
            {
              Expression RESULT =null;
		Location signxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location signxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Sign sign = (Sign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression term = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG86
 RESULT = new SignedExpression(sign, term); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // simple_expression ::= term 
            {
              Expression RESULT =null;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression term = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG87
 RESULT = term; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // term ::= term boolean_operator factor 
            {
              Expression RESULT =null;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression term = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		BinaryBooleanOperator op = (BinaryBooleanOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location fatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression fator = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG88
 RESULT =  new BinaryBooleanExpression((BinaryBooleanOperator) op, term, fator); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // term ::= factor 
            {
              Expression RESULT =null;
		Location fatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression fator = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG89
 RESULT = fator; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // factor ::= variable_access 
            {
              Expression RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		VariableAccess var = (VariableAccess)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG90
 RESULT = var; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // factor ::= LITERALCHARACTER 
            {
              Expression RESULT =null;
		Location chrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location chrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Character chr = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG91
 RESULT = new CharacterLiteral(chr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // factor ::= STRINGCHARACTER 
            {
              Expression RESULT =null;
		Location strxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location strxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG92
 RESULT = new StringLiteral(str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // factor ::= NUMINT 
            {
              Expression RESULT =null;
		Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		int num = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG93
 RESULT = new NumberLiteral(num); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // factor ::= ID LPAR expression_list RPAR 
            {
              Expression RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location expListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> expList = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG94
 RESULT = new FunctionDesignator(id, expList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // factor ::= LPAR expression RPAR 
            {
              Expression RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG95
 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // factor ::= TRUE 
            {
              Expression RESULT =null;
		//@@CUPDBG96
 RESULT = BooleanLiteral.TRUE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // factor ::= FALSE 
            {
              Expression RESULT =null;
		//@@CUPDBG97
 RESULT = BooleanLiteral.FALSE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // factor ::= NOT factor 
            {
              Expression RESULT =null;
		Location factorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location factorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression factor = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG98
 RESULT = new NotExpression(factor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // arithmetic_operator ::= TIMES 
            {
              BinaryArithmeticOperator RESULT =null;
		//@@CUPDBG99
RESULT = BinaryArithmeticOperator.TIMES;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // arithmetic_operator ::= DIV 
            {
              BinaryArithmeticOperator RESULT =null;
		//@@CUPDBG100
RESULT = BinaryArithmeticOperator.DIV;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // arithmetic_operator ::= MOD 
            {
              BinaryArithmeticOperator RESULT =null;
		//@@CUPDBG101
RESULT = BinaryArithmeticOperator.MOD;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // arithmetic_operator ::= PLUS 
            {
              BinaryArithmeticOperator RESULT =null;
		//@@CUPDBG102
RESULT = BinaryArithmeticOperator.PLUS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // arithmetic_operator ::= MINUS 
            {
              BinaryArithmeticOperator RESULT =null;
		//@@CUPDBG103
RESULT = BinaryArithmeticOperator.MINUS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // relational_operator ::= LT 
            {
              RelationalOperator RESULT =null;
		//@@CUPDBG104
RESULT = RelationalOperator.LT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // relational_operator ::= LE 
            {
              RelationalOperator RESULT =null;
		//@@CUPDBG105
RESULT = RelationalOperator.LTE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // relational_operator ::= GT 
            {
              RelationalOperator RESULT =null;
		//@@CUPDBG106
RESULT = RelationalOperator.GT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // relational_operator ::= GE 
            {
              RelationalOperator RESULT =null;
		//@@CUPDBG107
RESULT = RelationalOperator.GTE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // relational_operator ::= EQUAL 
            {
              RelationalOperator RESULT =null;
		//@@CUPDBG108
RESULT = RelationalOperator.EQ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // relational_operator ::= DIFF 
            {
              RelationalOperator RESULT =null;
		//@@CUPDBG109
RESULT = RelationalOperator.NEQ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // unsigned_constant ::= NUMINT 
            {
              Object RESULT =null;
		Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		int num = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG110
 RESULT = new UnsignedNumber(num); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned_constant",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // unsigned_constant ::= STRINGCHARACTER 
            {
              Object RESULT =null;
		Location strxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location strxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG111
 RESULT = new StringLiteral(str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned_constant",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // unsigned_constant ::= LITERALCHARACTER 
            {
              Object RESULT =null;
		Location chxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location chxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG112
 RESULT = new CharLiteral(ch); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned_constant",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // boolean_operator ::= AND 
            {
              BinaryBooleanOperator RESULT =null;
		//@@CUPDBG113
RESULT = BinaryBooleanOperator.AND;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operator",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // boolean_operator ::= OR 
            {
              BinaryBooleanOperator RESULT =null;
		//@@CUPDBG114
RESULT = BinaryBooleanOperator.OR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operator",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sign ::= MINUS 
            {
              Sign RESULT =null;
		//@@CUPDBG115
 RESULT = Sign.MINUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sign ::= PLUS 
            {
              Sign RESULT =null;
		//@@CUPDBG116
 RESULT = Sign.PLUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // variable_access ::= ID 
            {
              VariableAccess RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG117
 RESULT = new IdExpression(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_access",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // variable_access ::= variable_access LBRA expression_list RBRA 
            {
              VariableAccess RESULT =null;
		Location var_accessxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location var_accessxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		VariableAccess var_access = (VariableAccess)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exp_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exp_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> exp_list = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG118
 IndexedVariable var = new IndexedVariable(var_access, exp_list.get(0));
                           for (Expression exp : exp_list.subList(1, exp_list.size())) var = new IndexedVariable(var, exp);
                           RESULT = var; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_access",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression_list ::= expression 
            {
              List<Expression> RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG119
 List<Expression> list = new ArrayList<Expression>();
                              	       list.add(exp); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression_list ::= expression_list COMMA expression 
            {
              List<Expression> RESULT =null;
		Location expListxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expListxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Expression> expList = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG120
 expList.add(exp); RESULT = expList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
