/* The following code was generated by JFlex 1.6.1 */

package	LexicalAnalyzer;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/ariel/IdeaProjects/tinypascalcompiler/src/LexicalAnalyzer/pascal.lex</tt>
 */
public class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\62\1\1\1\1\22\0\1\1\1\0\1\30"+
    "\4\0\1\27\1\17\1\20\1\15\1\13\1\6\1\14\1\5\1\16"+
    "\1\25\11\4\1\7\1\10\1\23\1\12\1\24\2\0\1\33\1\42"+
    "\1\45\1\35\1\26\1\54\1\43\1\60\1\44\1\56\1\57\1\53"+
    "\1\41\1\34\1\46\1\55\1\3\1\36\1\40\1\47\1\50\1\51"+
    "\1\52\1\61\1\37\1\3\1\21\1\0\1\22\1\11\2\0\1\33"+
    "\1\42\1\45\1\35\1\26\1\54\1\43\1\60\1\44\1\56\1\57"+
    "\1\53\1\41\1\34\1\46\1\55\1\3\1\36\1\40\1\47\1\50"+
    "\1\51\1\52\1\61\1\37\1\3\1\31\1\2\1\32\7\0\1\62"+
    "\u1fa2\0\1\62\1\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\4\1\3\3\1"+
    "\23\3\2\0\1\25\1\26\1\0\1\27\1\30\1\31"+
    "\1\32\2\3\3\0\1\33\7\3\1\34\7\3\1\35"+
    "\1\3\1\36\2\3\1\37\1\3\1\40\1\3\1\41"+
    "\15\3\1\32\1\0\1\32\1\42\1\3\1\0\1\43"+
    "\1\44\1\33\1\45\1\3\1\46\1\47\1\50\1\3"+
    "\1\51\3\3\1\52\1\3\1\53\1\54\1\55\15\3"+
    "\1\56\4\3\1\57\4\3\1\60\1\61\1\44\7\3"+
    "\1\62\3\3\1\63\2\3\1\64\1\65\1\66\1\3"+
    "\1\67\1\70\2\3\1\71\5\3\1\72\5\3\1\73"+
    "\4\3\1\74\1\3\1\75\1\76\1\77\6\3\1\100"+
    "\1\101\1\102\1\103\2\3\1\104\2\3\1\105\1\106"+
    "\1\3\1\107\4\3\1\110\3\3\1\111\5\3\1\112"+
    "\2\3\1\113\2\3\1\114\1\115\3\3\1\116\2\3"+
    "\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\63\0\146\0\146\0\231\0\314\0\63"+
    "\0\377\0\63\0\63\0\63\0\63\0\63\0\63\0\63"+
    "\0\u0132\0\63\0\63\0\63\0\u0165\0\u0198\0\u01cb\0\u01fe"+
    "\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396"+
    "\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e"+
    "\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6"+
    "\0\63\0\63\0\u0297\0\63\0\63\0\63\0\u01cb\0\u06f9"+
    "\0\u072c\0\u075f\0\u0792\0\u07c5\0\u0297\0\u07f8\0\u082b\0\u085e"+
    "\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6"+
    "\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\146\0\u0b5b"+
    "\0\u0b8e\0\146\0\u0bc1\0\146\0\u0bf4\0\146\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ebe\0\u0ef1\0\146\0\u0f24"+
    "\0\u0f57\0\u0f57\0\u0792\0\63\0\146\0\u0f8a\0\146\0\146"+
    "\0\146\0\u0fbd\0\146\0\u0ff0\0\u1023\0\u1056\0\146\0\u1089"+
    "\0\146\0\146\0\146\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188"+
    "\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320"+
    "\0\146\0\u1353\0\u1386\0\u13b9\0\u13ec\0\146\0\u141f\0\u1452"+
    "\0\u1485\0\u14b8\0\146\0\146\0\u0f57\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15ea\0\u161d\0\146\0\u1650\0\u1683\0\u16b6"+
    "\0\146\0\u16e9\0\u171c\0\146\0\146\0\146\0\u174f\0\146"+
    "\0\146\0\u1782\0\u17b5\0\146\0\u17e8\0\u181b\0\u184e\0\u1881"+
    "\0\u18b4\0\146\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\146"+
    "\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\146\0\146"+
    "\0\146\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\146"+
    "\0\146\0\146\0\146\0\u1c4a\0\u1c7d\0\146\0\u1cb0\0\u1ce3"+
    "\0\146\0\146\0\u1d16\0\146\0\u1d49\0\u1d7c\0\u1daf\0\u1de2"+
    "\0\146\0\u1e15\0\u1e48\0\u1e7b\0\146\0\u1eae\0\u1ee1\0\u1f14"+
    "\0\u1f47\0\u1f7a\0\146\0\u1fad\0\u1fe0\0\146\0\u2013\0\u2046"+
    "\0\146\0\146\0\u2079\0\u20ac\0\u20df\0\146\0\u2112\0\u2145"+
    "\0\146";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\2\1\34\1\35\1\36\1\37\1\5"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\3\5\1\56"+
    "\66\0\3\5\20\0\2\5\4\0\27\5\3\0\1\57"+
    "\1\0\1\6\1\60\17\0\1\6\1\57\41\0\1\61"+
    "\67\0\1\62\65\0\1\63\57\0\1\64\11\0\1\65"+
    "\50\0\1\66\52\0\1\57\1\0\1\67\1\60\17\0"+
    "\1\67\1\57\36\0\3\5\20\0\2\5\4\0\1\5"+
    "\1\70\16\5\1\71\6\5\1\0\63\72\63\73\15\63"+
    "\1\74\14\63\1\75\30\63\2\0\3\5\20\0\2\5"+
    "\4\0\1\5\1\76\1\5\1\77\1\5\1\100\21\5"+
    "\3\0\3\5\20\0\2\5\4\0\11\5\1\101\1\5"+
    "\1\102\13\5\3\0\3\5\20\0\1\5\1\103\4\0"+
    "\11\5\1\104\1\5\1\105\13\5\3\0\3\5\20\0"+
    "\1\5\1\106\4\0\27\5\3\0\3\5\20\0\1\5"+
    "\1\107\4\0\14\5\1\110\10\5\1\111\1\5\3\0"+
    "\3\5\20\0\2\5\4\0\13\5\1\112\13\5\3\0"+
    "\3\5\20\0\1\5\1\113\4\0\27\5\3\0\3\5"+
    "\20\0\2\5\4\0\13\5\1\114\13\5\3\0\3\5"+
    "\20\0\2\5\4\0\1\5\1\115\4\5\1\116\12\5"+
    "\1\117\5\5\3\0\3\5\20\0\2\5\4\0\1\120"+
    "\12\5\1\121\13\5\3\0\3\5\20\0\2\5\4\0"+
    "\3\5\1\122\3\5\1\123\11\5\1\124\5\5\3\0"+
    "\3\5\20\0\2\5\4\0\4\5\1\125\6\5\1\126"+
    "\11\5\1\127\1\5\3\0\3\5\20\0\2\5\4\0"+
    "\1\5\1\130\3\5\1\131\21\5\3\0\3\5\20\0"+
    "\2\5\4\0\1\132\26\5\3\0\3\5\20\0\2\5"+
    "\4\0\11\5\1\133\13\5\1\134\1\5\3\0\3\5"+
    "\20\0\2\5\4\0\1\135\26\5\3\0\3\5\20\0"+
    "\2\5\4\0\11\5\1\136\1\5\1\137\1\5\1\140"+
    "\11\5\3\0\3\5\20\0\2\5\4\0\1\141\2\5"+
    "\1\142\23\5\3\0\3\5\20\0\2\5\4\0\13\5"+
    "\1\143\13\5\5\0\1\144\6\0\2\145\10\0\1\144"+
    "\41\0\1\146\20\0\1\146\37\0\3\5\20\0\2\5"+
    "\4\0\2\5\1\147\24\5\3\0\3\5\20\0\2\5"+
    "\4\0\5\5\1\150\21\5\1\0\27\151\1\152\33\151"+
    "\30\73\1\153\32\73\15\63\1\74\2\63\1\154\42\63"+
    "\2\0\3\5\20\0\2\5\4\0\2\5\1\155\24\5"+
    "\3\0\3\5\20\0\2\5\4\0\3\5\1\156\23\5"+
    "\3\0\3\5\20\0\2\5\4\0\6\5\1\157\20\5"+
    "\3\0\3\5\20\0\2\5\4\0\20\5\1\160\6\5"+
    "\3\0\3\5\20\0\2\5\4\0\14\5\1\161\12\5"+
    "\3\0\3\5\20\0\2\5\4\0\5\5\1\162\21\5"+
    "\3\0\3\5\20\0\2\5\4\0\16\5\1\163\10\5"+
    "\3\0\3\5\20\0\2\5\4\0\17\5\1\164\7\5"+
    "\3\0\3\5\20\0\2\5\4\0\12\5\1\165\7\5"+
    "\1\166\4\5\3\0\3\5\20\0\2\5\4\0\14\5"+
    "\1\167\12\5\3\0\3\5\20\0\2\5\4\0\3\5"+
    "\1\170\23\5\3\0\3\5\20\0\2\5\4\0\3\5"+
    "\1\171\14\5\1\172\6\5\3\0\3\5\20\0\2\5"+
    "\4\0\2\5\1\173\24\5\3\0\3\5\20\0\2\5"+
    "\4\0\10\5\1\174\16\5\3\0\3\5\20\0\2\5"+
    "\4\0\14\5\1\175\12\5\3\0\3\5\20\0\2\5"+
    "\4\0\14\5\1\176\3\5\1\177\6\5\3\0\3\5"+
    "\20\0\2\5\4\0\22\5\1\200\4\5\3\0\3\5"+
    "\20\0\2\5\4\0\5\5\1\201\21\5\3\0\3\5"+
    "\20\0\2\5\4\0\1\5\1\202\25\5\3\0\3\5"+
    "\20\0\2\5\4\0\23\5\1\203\3\5\3\0\3\5"+
    "\20\0\2\5\4\0\22\5\1\204\4\5\3\0\3\5"+
    "\20\0\1\5\1\205\4\0\27\5\3\0\3\5\20\0"+
    "\2\5\4\0\11\5\1\206\2\5\1\207\12\5\3\0"+
    "\3\5\20\0\1\5\1\210\4\0\27\5\3\0\3\5"+
    "\20\0\2\5\4\0\3\5\1\211\23\5\3\0\3\5"+
    "\20\0\2\5\4\0\14\5\1\212\12\5\3\0\3\5"+
    "\20\0\2\5\4\0\11\5\1\213\15\5\3\0\3\5"+
    "\20\0\2\5\4\0\7\5\1\214\17\5\3\0\3\5"+
    "\20\0\2\5\4\0\20\5\1\215\6\5\3\0\3\5"+
    "\20\0\2\5\4\0\3\5\1\216\13\5\1\217\7\5"+
    "\3\0\3\5\20\0\2\5\4\0\1\5\1\220\25\5"+
    "\3\0\3\5\20\0\2\5\4\0\12\5\1\221\14\5"+
    "\3\0\3\5\20\0\2\5\4\0\13\5\1\222\13\5"+
    "\3\0\3\5\20\0\2\5\4\0\3\5\1\223\23\5"+
    "\5\0\1\144\20\0\1\144\37\0\1\57\1\0\1\146"+
    "\20\0\1\146\1\57\36\0\3\5\20\0\1\5\1\224"+
    "\4\0\27\5\1\0\27\151\1\225\33\151\2\0\3\5"+
    "\20\0\2\5\4\0\1\226\26\5\3\0\3\5\20\0"+
    "\2\5\4\0\14\5\1\227\12\5\3\0\3\5\20\0"+
    "\2\5\4\0\1\5\1\230\25\5\3\0\3\5\20\0"+
    "\2\5\4\0\13\5\1\231\13\5\3\0\3\5\20\0"+
    "\1\5\1\232\4\0\27\5\3\0\3\5\20\0\2\5"+
    "\4\0\11\5\1\233\15\5\3\0\3\5\20\0\2\5"+
    "\4\0\11\5\1\234\15\5\3\0\3\5\20\0\2\5"+
    "\4\0\13\5\1\235\13\5\3\0\3\5\20\0\1\5"+
    "\1\236\4\0\27\5\3\0\3\5\20\0\2\5\4\0"+
    "\11\5\1\237\15\5\3\0\3\5\20\0\2\5\4\0"+
    "\20\5\1\240\6\5\3\0\3\5\20\0\1\5\1\241"+
    "\4\0\27\5\3\0\3\5\20\0\2\5\4\0\5\5"+
    "\1\242\21\5\3\0\3\5\20\0\1\5\1\243\4\0"+
    "\27\5\3\0\3\5\20\0\1\5\1\244\4\0\27\5"+
    "\3\0\3\5\20\0\2\5\4\0\1\5\1\245\25\5"+
    "\3\0\3\5\20\0\2\5\4\0\14\5\1\246\12\5"+
    "\3\0\3\5\20\0\2\5\4\0\11\5\1\247\15\5"+
    "\3\0\3\5\20\0\2\5\4\0\5\5\1\250\21\5"+
    "\3\0\3\5\20\0\2\5\4\0\25\5\1\251\1\5"+
    "\3\0\3\5\20\0\2\5\4\0\20\5\1\252\6\5"+
    "\3\0\3\5\20\0\1\5\1\253\4\0\27\5\3\0"+
    "\3\5\20\0\1\5\1\254\4\0\27\5\3\0\3\5"+
    "\20\0\2\5\4\0\1\255\26\5\3\0\3\5\20\0"+
    "\2\5\4\0\12\5\1\256\14\5\3\0\3\5\20\0"+
    "\2\5\4\0\24\5\1\257\2\5\3\0\3\5\20\0"+
    "\2\5\4\0\10\5\1\260\1\5\1\261\14\5\3\0"+
    "\3\5\20\0\2\5\4\0\4\5\1\262\22\5\3\0"+
    "\3\5\20\0\2\5\4\0\3\5\1\263\23\5\3\0"+
    "\3\5\20\0\2\5\4\0\14\5\1\264\12\5\3\0"+
    "\3\5\20\0\2\5\4\0\3\5\1\265\23\5\3\0"+
    "\3\5\20\0\2\5\4\0\1\266\26\5\3\0\3\5"+
    "\20\0\2\5\4\0\1\5\1\267\25\5\3\0\3\5"+
    "\20\0\2\5\4\0\1\5\1\270\25\5\3\0\3\5"+
    "\20\0\2\5\4\0\3\5\1\271\4\5\1\272\16\5"+
    "\3\0\3\5\20\0\2\5\4\0\1\5\1\273\25\5"+
    "\3\0\3\5\20\0\1\5\1\274\4\0\27\5\3\0"+
    "\3\5\20\0\2\5\4\0\14\5\1\275\12\5\3\0"+
    "\3\5\20\0\2\5\4\0\12\5\1\276\14\5\3\0"+
    "\3\5\20\0\2\5\4\0\20\5\1\277\6\5\3\0"+
    "\3\5\20\0\1\5\1\300\4\0\27\5\3\0\3\5"+
    "\20\0\2\5\4\0\20\5\1\301\6\5\3\0\3\5"+
    "\20\0\2\5\4\0\3\5\1\302\23\5\3\0\3\5"+
    "\20\0\2\5\4\0\14\5\1\303\12\5\3\0\3\5"+
    "\20\0\1\5\1\304\4\0\27\5\3\0\3\5\20\0"+
    "\2\5\4\0\3\5\1\305\23\5\3\0\3\5\20\0"+
    "\1\5\1\306\4\0\27\5\3\0\3\5\20\0\2\5"+
    "\4\0\15\5\1\307\11\5\3\0\3\5\20\0\2\5"+
    "\4\0\13\5\1\310\13\5\3\0\3\5\20\0\2\5"+
    "\4\0\2\5\1\311\24\5\3\0\3\5\20\0\2\5"+
    "\4\0\14\5\1\312\12\5\3\0\3\5\20\0\2\5"+
    "\4\0\10\5\1\313\16\5\3\0\3\5\20\0\2\5"+
    "\4\0\21\5\1\314\5\5\3\0\3\5\20\0\1\5"+
    "\1\315\4\0\27\5\3\0\3\5\20\0\1\5\1\316"+
    "\4\0\27\5\3\0\3\5\20\0\2\5\4\0\6\5"+
    "\1\317\20\5\3\0\3\5\20\0\2\5\4\0\3\5"+
    "\1\320\23\5\3\0\3\5\20\0\2\5\4\0\14\5"+
    "\1\321\12\5\3\0\3\5\20\0\2\5\4\0\2\5"+
    "\1\322\24\5\3\0\3\5\20\0\2\5\4\0\11\5"+
    "\1\323\15\5\3\0\3\5\20\0\2\5\4\0\2\5"+
    "\1\324\24\5\3\0\3\5\20\0\2\5\4\0\1\325"+
    "\26\5\3\0\3\5\20\0\2\5\4\0\2\5\1\326"+
    "\24\5\3\0\3\5\20\0\2\5\4\0\12\5\1\327"+
    "\14\5\3\0\3\5\20\0\2\5\4\0\1\330\26\5"+
    "\3\0\3\5\20\0\2\5\4\0\3\5\1\331\23\5"+
    "\3\0\3\5\20\0\1\5\1\332\4\0\27\5\3\0"+
    "\3\5\20\0\2\5\4\0\15\5\1\333\11\5\3\0"+
    "\3\5\20\0\2\5\4\0\13\5\1\334\13\5\3\0"+
    "\3\5\20\0\2\5\4\0\6\5\1\335\20\5\3\0"+
    "\3\5\20\0\2\5\4\0\15\5\1\336\11\5\3\0"+
    "\3\5\20\0\2\5\4\0\14\5\1\337\12\5\3\0"+
    "\3\5\20\0\2\5\4\0\12\5\1\340\14\5\3\0"+
    "\3\5\20\0\2\5\4\0\1\5\1\341\25\5\3\0"+
    "\3\5\20\0\2\5\4\0\12\5\1\342\14\5\3\0"+
    "\3\5\20\0\2\5\4\0\1\5\1\343\25\5\3\0"+
    "\3\5\20\0\2\5\4\0\3\5\1\344\23\5\3\0"+
    "\3\5\20\0\2\5\4\0\13\5\1\345\13\5\3\0"+
    "\3\5\20\0\1\5\1\346\4\0\27\5\3\0\3\5"+
    "\20\0\2\5\4\0\14\5\1\347\12\5\3\0\3\5"+
    "\20\0\2\5\4\0\14\5\1\350\12\5\3\0\3\5"+
    "\20\0\1\5\1\351\4\0\27\5\3\0\3\5\20\0"+
    "\2\5\4\0\3\5\1\352\23\5\3\0\3\5\20\0"+
    "\2\5\4\0\1\353\26\5\3\0\3\5\20\0\2\5"+
    "\4\0\13\5\1\354\13\5\3\0\3\5\20\0\2\5"+
    "\4\0\14\5\1\355\12\5\3\0\3\5\20\0\2\5"+
    "\4\0\3\5\1\356\23\5\3\0\3\5\20\0\2\5"+
    "\4\0\11\5\1\357\15\5\3\0\3\5\20\0\2\5"+
    "\4\0\13\5\1\360\13\5\3\0\3\5\20\0\2\5"+
    "\4\0\1\5\1\361\25\5\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8568];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\1\1\7\11\1\1\3\11"+
    "\32\1\2\0\2\11\1\0\3\11\3\1\3\0\50\1"+
    "\1\0\3\1\1\0\2\1\1\11\205\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private Symbol newSymbol(String nome) {
    return new Symbol(nome, yyline, yycolumn);
}

private Symbol newSymbol(String nome, String lexema) {
    return new Symbol(nome, lexema, yyline, yycolumn);
}

private Symbol newSymbol(String nome, String lexema, Object value) {
    return new Symbol(nome, lexema, value, yyline, yycolumn);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 220) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caracteres não conhecido " + yytext() +
 ". Linha: " + yyline + ", Coluna: " + yycolumn);
            }
          case 80: break;
          case 2: 
            { 
            }
          case 81: break;
          case 3: 
            { return newSymbol("ID", yytext());
            }
          case 82: break;
          case 4: 
            { return newSymbol("NUMINT", yytext(), Integer.parseInt(yytext()));
            }
          case 83: break;
          case 5: 
            { return newSymbol("DOT");
            }
          case 84: break;
          case 6: 
            { return newSymbol("COMMA");
            }
          case 85: break;
          case 7: 
            { return newSymbol("COLON");
            }
          case 86: break;
          case 8: 
            { return newSymbol("SEMICOLON");
            }
          case 87: break;
          case 9: 
            { return newSymbol("CARET");
            }
          case 88: break;
          case 10: 
            { return newSymbol("EQUAL");
            }
          case 89: break;
          case 11: 
            { return newSymbol("PLUS");
            }
          case 90: break;
          case 12: 
            { return newSymbol("MINUS");
            }
          case 91: break;
          case 13: 
            { return newSymbol("MULTIPLY");
            }
          case 92: break;
          case 14: 
            { return newSymbol("DIVIDE");
            }
          case 93: break;
          case 15: 
            { return newSymbol("LPAR");
            }
          case 94: break;
          case 16: 
            { return newSymbol("RPAR");
            }
          case 95: break;
          case 17: 
            { return newSymbol("LBRA");
            }
          case 96: break;
          case 18: 
            { return newSymbol("RBRA");
            }
          case 97: break;
          case 19: 
            { return newSymbol("LT");
            }
          case 98: break;
          case 20: 
            { return newSymbol("GT");
            }
          case 99: break;
          case 21: 
            { return newSymbol("DOUBLEDOT");
            }
          case 100: break;
          case 22: 
            { return newSymbol("ASSIGN");
            }
          case 101: break;
          case 23: 
            { return newSymbol("LE");
            }
          case 102: break;
          case 24: 
            { return newSymbol("DIFF");
            }
          case 103: break;
          case 25: 
            { return newSymbol("GE");
            }
          case 104: break;
          case 26: 
            { return newSymbol("NUMREAL", yytext(), Double.parseDouble(yytext()));
            }
          case 105: break;
          case 27: 
            { return newSymbol("COMMENT", yytext());
            }
          case 106: break;
          case 28: 
            { return newSymbol("DO");
            }
          case 107: break;
          case 29: 
            { return newSymbol("IN");
            }
          case 108: break;
          case 30: 
            { return newSymbol("IF");
            }
          case 109: break;
          case 31: 
            { return newSymbol("OR");
            }
          case 110: break;
          case 32: 
            { return newSymbol("OF");
            }
          case 111: break;
          case 33: 
            { return newSymbol("TO");
            }
          case 112: break;
          case 34: 
            { return newSymbol("END");
            }
          case 113: break;
          case 35: 
            { return newSymbol("CHAR", yytext());
            }
          case 114: break;
          case 36: 
            { return newSymbol("STRING", yytext());
            }
          case 115: break;
          case 37: 
            { return newSymbol("AND");
            }
          case 116: break;
          case 38: 
            { return newSymbol("ASM");
            }
          case 117: break;
          case 39: 
            { return newSymbol("NIL");
            }
          case 118: break;
          case 40: 
            { return newSymbol("NOT");
            }
          case 119: break;
          case 41: 
            { return newSymbol("DIV");
            }
          case 120: break;
          case 42: 
            { return newSymbol("SET");
            }
          case 121: break;
          case 43: 
            { return newSymbol("SHR");
            }
          case 122: break;
          case 44: 
            { return newSymbol("SHL");
            }
          case 123: break;
          case 45: 
            { return newSymbol("MOD");
            }
          case 124: break;
          case 46: 
            { return newSymbol("VAR");
            }
          case 125: break;
          case 47: 
            { return newSymbol("FOR");
            }
          case 126: break;
          case 48: 
            { return newSymbol("XOR");
            }
          case 127: break;
          case 49: 
            { return newSymbol("ELSE");
            }
          case 128: break;
          case 50: 
            { return newSymbol("GOTO");
            }
          case 129: break;
          case 51: 
            { return newSymbol("CASE");
            }
          case 130: break;
          case 52: 
            { return newSymbol("TYPE");
            }
          case 131: break;
          case 53: 
            { return newSymbol("THEN");
            }
          case 132: break;
          case 54: 
            { return newSymbol("UNIT");
            }
          case 133: break;
          case 55: 
            { return newSymbol("USES");
            }
          case 134: break;
          case 56: 
            { return newSymbol("WITH");
            }
          case 135: break;
          case 57: 
            { return newSymbol("FILE");
            }
          case 136: break;
          case 58: 
            { return newSymbol("Array");
            }
          case 137: break;
          case 59: 
            { return newSymbol("BEGIN");
            }
          case 138: break;
          case 60: 
            { return newSymbol("CONST");
            }
          case 139: break;
          case 61: 
            { return newSymbol("UNTIL");
            }
          case 140: break;
          case 62: 
            { return newSymbol("WHILE");
            }
          case 141: break;
          case 63: 
            { return newSymbol("LABEL");
            }
          case 142: break;
          case 64: 
            { return newSymbol("DOWNTO");
            }
          case 143: break;
          case 65: 
            { return newSymbol("RECORD");
            }
          case 144: break;
          case 66: 
            { return newSymbol("REPEAT");
            }
          case 145: break;
          case 67: 
            { return newSymbol("STRING");
            }
          case 146: break;
          case 68: 
            { return newSymbol("INLINE");
            }
          case 147: break;
          case 69: 
            { return newSymbol("OBJECT");
            }
          case 148: break;
          case 70: 
            { return newSymbol("FOWARD");
            }
          case 149: break;
          case 71: 
            { return newSymbol("PACKED");
            }
          case 150: break;
          case 72: 
            { return newSymbol("INTEGER");
            }
          case 151: break;
          case 73: 
            { return newSymbol("PROGRAM");
            }
          case 152: break;
          case 74: 
            { return newSymbol("FUNCTION");
            }
          case 153: break;
          case 75: 
            { return newSymbol("INTERFACE");
            }
          case 154: break;
          case 76: 
            { return newSymbol("PROCEDURE");
            }
          case 155: break;
          case 77: 
            { return newSymbol("DESTRUCTOR");
            }
          case 156: break;
          case 78: 
            { return newSymbol("CONSTRUCTOR");
            }
          case 157: break;
          case 79: 
            { return newSymbol("IMPLEMENTATION");
            }
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
