/* The following code was generated by JFlex 1.6.1 */

package	LexicalAnalyzer;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/ariel/IdeaProjects/tinypascalcompiler/src/LexicalAnalyzer/pascal.lex</tt>
 */
public class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\63\1\1\1\1\22\0\1\31\6\30\1\27"+
    "\1\17\1\20\1\15\1\13\1\6\1\14\1\5\1\16\1\25\11\4"+
    "\1\7\1\10\1\23\1\12\1\24\2\30\1\34\1\43\1\46\1\36"+
    "\1\26\1\55\1\44\1\61\1\45\1\57\1\60\1\54\1\42\1\35"+
    "\1\47\1\56\1\3\1\37\1\41\1\50\1\51\1\52\1\53\1\62"+
    "\1\40\1\3\1\21\1\30\1\22\1\11\2\30\1\34\1\43\1\46"+
    "\1\36\1\26\1\55\1\44\1\61\1\45\1\57\1\60\1\54\1\42"+
    "\1\35\1\47\1\56\1\3\1\37\1\41\1\50\1\51\1\52\1\53"+
    "\1\62\1\40\1\3\1\32\1\2\1\33\7\30\1\64\172\30\u1f28\0"+
    "\1\63\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\4\1\3\2\1"+
    "\23\3\2\0\1\25\1\26\1\0\1\27\1\30\1\31"+
    "\1\32\2\3\1\0\1\33\1\0\1\34\7\3\1\35"+
    "\7\3\1\36\1\3\1\37\2\3\1\40\1\3\1\41"+
    "\1\3\1\42\15\3\1\32\1\0\1\32\1\43\1\3"+
    "\1\0\1\33\1\0\1\34\1\44\1\3\1\45\1\46"+
    "\1\47\1\3\1\50\3\3\1\51\1\3\1\52\1\53"+
    "\1\54\15\3\1\55\4\3\1\56\4\3\1\57\1\60"+
    "\1\61\7\3\1\62\3\3\1\63\2\3\1\64\1\65"+
    "\1\66\1\3\1\67\1\70\2\3\1\71\5\3\1\72"+
    "\5\3\1\73\4\3\1\74\1\3\1\75\1\76\1\77"+
    "\6\3\1\100\1\101\1\102\1\103\2\3\1\104\2\3"+
    "\1\105\1\106\1\3\1\107\4\3\1\110\3\3\1\111"+
    "\5\3\1\112\2\3\1\113\2\3\1\114\1\115\3\3"+
    "\1\116\2\3\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\65\0\152\0\152\0\237\0\324\0\65"+
    "\0\u0109\0\65\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\u013e\0\65\0\65\0\65\0\u0173\0\u01a8\0\u01dd\0\u0212"+
    "\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba"+
    "\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562"+
    "\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\65"+
    "\0\65\0\u027c\0\65\0\65\0\65\0\u01dd\0\u070a\0\u073f"+
    "\0\u0774\0\u0774\0\u07a9\0\u027c\0\u07de\0\u0813\0\u0848\0\u087d"+
    "\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25"+
    "\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\152\0\u0b63\0\u0b98"+
    "\0\152\0\u0bcd\0\152\0\u0c02\0\152\0\u0c37\0\u0c6c\0\u0ca1"+
    "\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0ee8\0\u0f1d\0\152\0\u0f52\0\u0f87"+
    "\0\u0f87\0\u0fbc\0\65\0\152\0\u0ff1\0\152\0\152\0\152"+
    "\0\u1026\0\152\0\u105b\0\u1090\0\u10c5\0\152\0\u10fa\0\152"+
    "\0\152\0\152\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238"+
    "\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\152"+
    "\0\u13e0\0\u1415\0\u144a\0\u147f\0\152\0\u14b4\0\u14e9\0\u151e"+
    "\0\u1553\0\152\0\152\0\u0f87\0\u1588\0\u15bd\0\u15f2\0\u1627"+
    "\0\u165c\0\u1691\0\u16c6\0\152\0\u16fb\0\u1730\0\u1765\0\152"+
    "\0\u179a\0\u17cf\0\152\0\152\0\152\0\u1804\0\152\0\152"+
    "\0\u1839\0\u186e\0\152\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977"+
    "\0\152\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\152\0\u1ab5"+
    "\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\152\0\152\0\152"+
    "\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\152\0\152"+
    "\0\152\0\152\0\u1d31\0\u1d66\0\152\0\u1d9b\0\u1dd0\0\152"+
    "\0\152\0\u1e05\0\152\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\152"+
    "\0\u1f0e\0\u1f43\0\u1f78\0\152\0\u1fad\0\u1fe2\0\u2017\0\u204c"+
    "\0\u2081\0\152\0\u20b6\0\u20eb\0\152\0\u2120\0\u2155\0\152"+
    "\0\152\0\u218a\0\u21bf\0\u21f4\0\152\0\u2229\0\u225e\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\2\1\3\1\32\1\2\1\33\1\34\1\35\1\36"+
    "\1\5\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\3\5"+
    "\1\55\71\0\3\5\20\0\2\5\5\0\27\5\4\0"+
    "\1\56\1\0\1\6\1\57\17\0\1\6\1\56\43\0"+
    "\1\60\71\0\1\61\67\0\1\62\61\0\1\63\11\0"+
    "\1\64\52\0\1\65\54\0\1\56\1\0\1\66\1\57"+
    "\17\0\1\66\1\56\40\0\3\5\20\0\2\5\5\0"+
    "\1\5\1\67\16\5\1\70\6\5\4\0\25\71\1\72"+
    "\33\71\1\0\1\71\15\62\1\73\15\62\1\74\31\62"+
    "\2\0\3\5\20\0\2\5\5\0\1\5\1\75\1\5"+
    "\1\76\1\5\1\77\21\5\4\0\3\5\20\0\2\5"+
    "\5\0\11\5\1\100\1\5\1\101\13\5\4\0\3\5"+
    "\20\0\1\5\1\102\5\0\11\5\1\103\1\5\1\104"+
    "\13\5\4\0\3\5\20\0\1\5\1\105\5\0\27\5"+
    "\4\0\3\5\20\0\1\5\1\106\5\0\14\5\1\107"+
    "\10\5\1\110\1\5\4\0\3\5\20\0\2\5\5\0"+
    "\13\5\1\111\13\5\4\0\3\5\20\0\1\5\1\112"+
    "\5\0\27\5\4\0\3\5\20\0\2\5\5\0\13\5"+
    "\1\113\13\5\4\0\3\5\20\0\2\5\5\0\1\5"+
    "\1\114\4\5\1\115\12\5\1\116\5\5\4\0\3\5"+
    "\20\0\2\5\5\0\1\117\12\5\1\120\13\5\4\0"+
    "\3\5\20\0\2\5\5\0\3\5\1\121\3\5\1\122"+
    "\11\5\1\123\5\5\4\0\3\5\20\0\2\5\5\0"+
    "\4\5\1\124\6\5\1\125\11\5\1\126\1\5\4\0"+
    "\3\5\20\0\2\5\5\0\1\5\1\127\3\5\1\130"+
    "\21\5\4\0\3\5\20\0\2\5\5\0\1\131\26\5"+
    "\4\0\3\5\20\0\2\5\5\0\11\5\1\132\13\5"+
    "\1\133\1\5\4\0\3\5\20\0\2\5\5\0\1\134"+
    "\26\5\4\0\3\5\20\0\2\5\5\0\11\5\1\135"+
    "\1\5\1\136\1\5\1\137\11\5\4\0\3\5\20\0"+
    "\2\5\5\0\1\140\2\5\1\141\23\5\4\0\3\5"+
    "\20\0\2\5\5\0\13\5\1\142\13\5\6\0\1\143"+
    "\6\0\2\144\10\0\1\143\43\0\1\145\20\0\1\145"+
    "\41\0\3\5\20\0\2\5\5\0\2\5\1\146\24\5"+
    "\4\0\3\5\20\0\2\5\5\0\5\5\1\147\21\5"+
    "\4\0\25\150\1\151\33\150\1\0\1\150\15\62\1\152"+
    "\2\62\1\153\44\62\2\0\3\5\20\0\2\5\5\0"+
    "\2\5\1\154\24\5\4\0\3\5\20\0\2\5\5\0"+
    "\3\5\1\155\23\5\4\0\3\5\20\0\2\5\5\0"+
    "\6\5\1\156\20\5\4\0\3\5\20\0\2\5\5\0"+
    "\20\5\1\157\6\5\4\0\3\5\20\0\2\5\5\0"+
    "\14\5\1\160\12\5\4\0\3\5\20\0\2\5\5\0"+
    "\5\5\1\161\21\5\4\0\3\5\20\0\2\5\5\0"+
    "\16\5\1\162\10\5\4\0\3\5\20\0\2\5\5\0"+
    "\17\5\1\163\7\5\4\0\3\5\20\0\2\5\5\0"+
    "\12\5\1\164\7\5\1\165\4\5\4\0\3\5\20\0"+
    "\2\5\5\0\14\5\1\166\12\5\4\0\3\5\20\0"+
    "\2\5\5\0\3\5\1\167\23\5\4\0\3\5\20\0"+
    "\2\5\5\0\3\5\1\170\14\5\1\171\6\5\4\0"+
    "\3\5\20\0\2\5\5\0\2\5\1\172\24\5\4\0"+
    "\3\5\20\0\2\5\5\0\10\5\1\173\16\5\4\0"+
    "\3\5\20\0\2\5\5\0\14\5\1\174\12\5\4\0"+
    "\3\5\20\0\2\5\5\0\14\5\1\175\3\5\1\176"+
    "\6\5\4\0\3\5\20\0\2\5\5\0\22\5\1\177"+
    "\4\5\4\0\3\5\20\0\2\5\5\0\5\5\1\200"+
    "\21\5\4\0\3\5\20\0\2\5\5\0\1\5\1\201"+
    "\25\5\4\0\3\5\20\0\2\5\5\0\23\5\1\202"+
    "\3\5\4\0\3\5\20\0\2\5\5\0\22\5\1\203"+
    "\4\5\4\0\3\5\20\0\1\5\1\204\5\0\27\5"+
    "\4\0\3\5\20\0\2\5\5\0\11\5\1\205\2\5"+
    "\1\206\12\5\4\0\3\5\20\0\1\5\1\207\5\0"+
    "\27\5\4\0\3\5\20\0\2\5\5\0\3\5\1\210"+
    "\23\5\4\0\3\5\20\0\2\5\5\0\14\5\1\211"+
    "\12\5\4\0\3\5\20\0\2\5\5\0\11\5\1\212"+
    "\15\5\4\0\3\5\20\0\2\5\5\0\7\5\1\213"+
    "\17\5\4\0\3\5\20\0\2\5\5\0\20\5\1\214"+
    "\6\5\4\0\3\5\20\0\2\5\5\0\3\5\1\215"+
    "\13\5\1\216\7\5\4\0\3\5\20\0\2\5\5\0"+
    "\1\5\1\217\25\5\4\0\3\5\20\0\2\5\5\0"+
    "\12\5\1\220\14\5\4\0\3\5\20\0\2\5\5\0"+
    "\13\5\1\221\13\5\4\0\3\5\20\0\2\5\5\0"+
    "\3\5\1\222\23\5\6\0\1\143\20\0\1\143\41\0"+
    "\1\56\1\0\1\145\20\0\1\145\1\56\40\0\3\5"+
    "\20\0\1\5\1\223\5\0\27\5\4\0\25\150\1\224"+
    "\33\150\1\0\1\150\15\62\1\152\2\62\1\74\12\62"+
    "\1\74\31\62\2\0\3\5\20\0\2\5\5\0\1\225"+
    "\26\5\4\0\3\5\20\0\2\5\5\0\14\5\1\226"+
    "\12\5\4\0\3\5\20\0\2\5\5\0\1\5\1\227"+
    "\25\5\4\0\3\5\20\0\2\5\5\0\13\5\1\230"+
    "\13\5\4\0\3\5\20\0\1\5\1\231\5\0\27\5"+
    "\4\0\3\5\20\0\2\5\5\0\11\5\1\232\15\5"+
    "\4\0\3\5\20\0\2\5\5\0\11\5\1\233\15\5"+
    "\4\0\3\5\20\0\2\5\5\0\13\5\1\234\13\5"+
    "\4\0\3\5\20\0\1\5\1\235\5\0\27\5\4\0"+
    "\3\5\20\0\2\5\5\0\11\5\1\236\15\5\4\0"+
    "\3\5\20\0\2\5\5\0\20\5\1\237\6\5\4\0"+
    "\3\5\20\0\1\5\1\240\5\0\27\5\4\0\3\5"+
    "\20\0\2\5\5\0\5\5\1\241\21\5\4\0\3\5"+
    "\20\0\1\5\1\242\5\0\27\5\4\0\3\5\20\0"+
    "\1\5\1\243\5\0\27\5\4\0\3\5\20\0\2\5"+
    "\5\0\1\5\1\244\25\5\4\0\3\5\20\0\2\5"+
    "\5\0\14\5\1\245\12\5\4\0\3\5\20\0\2\5"+
    "\5\0\11\5\1\246\15\5\4\0\3\5\20\0\2\5"+
    "\5\0\5\5\1\247\21\5\4\0\3\5\20\0\2\5"+
    "\5\0\25\5\1\250\1\5\4\0\3\5\20\0\2\5"+
    "\5\0\20\5\1\251\6\5\4\0\3\5\20\0\1\5"+
    "\1\252\5\0\27\5\4\0\3\5\20\0\1\5\1\253"+
    "\5\0\27\5\4\0\3\5\20\0\2\5\5\0\1\254"+
    "\26\5\4\0\3\5\20\0\2\5\5\0\12\5\1\255"+
    "\14\5\4\0\3\5\20\0\2\5\5\0\24\5\1\256"+
    "\2\5\4\0\3\5\20\0\2\5\5\0\10\5\1\257"+
    "\1\5\1\260\14\5\4\0\3\5\20\0\2\5\5\0"+
    "\4\5\1\261\22\5\4\0\3\5\20\0\2\5\5\0"+
    "\3\5\1\262\23\5\4\0\3\5\20\0\2\5\5\0"+
    "\14\5\1\263\12\5\4\0\3\5\20\0\2\5\5\0"+
    "\3\5\1\264\23\5\4\0\3\5\20\0\2\5\5\0"+
    "\1\265\26\5\4\0\3\5\20\0\2\5\5\0\1\5"+
    "\1\266\25\5\4\0\3\5\20\0\2\5\5\0\1\5"+
    "\1\267\25\5\4\0\3\5\20\0\2\5\5\0\3\5"+
    "\1\270\4\5\1\271\16\5\4\0\3\5\20\0\2\5"+
    "\5\0\1\5\1\272\25\5\4\0\3\5\20\0\1\5"+
    "\1\273\5\0\27\5\4\0\3\5\20\0\2\5\5\0"+
    "\14\5\1\274\12\5\4\0\3\5\20\0\2\5\5\0"+
    "\12\5\1\275\14\5\4\0\3\5\20\0\2\5\5\0"+
    "\20\5\1\276\6\5\4\0\3\5\20\0\1\5\1\277"+
    "\5\0\27\5\4\0\3\5\20\0\2\5\5\0\20\5"+
    "\1\300\6\5\4\0\3\5\20\0\2\5\5\0\3\5"+
    "\1\301\23\5\4\0\3\5\20\0\2\5\5\0\14\5"+
    "\1\302\12\5\4\0\3\5\20\0\1\5\1\303\5\0"+
    "\27\5\4\0\3\5\20\0\2\5\5\0\3\5\1\304"+
    "\23\5\4\0\3\5\20\0\1\5\1\305\5\0\27\5"+
    "\4\0\3\5\20\0\2\5\5\0\15\5\1\306\11\5"+
    "\4\0\3\5\20\0\2\5\5\0\13\5\1\307\13\5"+
    "\4\0\3\5\20\0\2\5\5\0\2\5\1\310\24\5"+
    "\4\0\3\5\20\0\2\5\5\0\14\5\1\311\12\5"+
    "\4\0\3\5\20\0\2\5\5\0\10\5\1\312\16\5"+
    "\4\0\3\5\20\0\2\5\5\0\21\5\1\313\5\5"+
    "\4\0\3\5\20\0\1\5\1\314\5\0\27\5\4\0"+
    "\3\5\20\0\1\5\1\315\5\0\27\5\4\0\3\5"+
    "\20\0\2\5\5\0\6\5\1\316\20\5\4\0\3\5"+
    "\20\0\2\5\5\0\3\5\1\317\23\5\4\0\3\5"+
    "\20\0\2\5\5\0\14\5\1\320\12\5\4\0\3\5"+
    "\20\0\2\5\5\0\2\5\1\321\24\5\4\0\3\5"+
    "\20\0\2\5\5\0\11\5\1\322\15\5\4\0\3\5"+
    "\20\0\2\5\5\0\2\5\1\323\24\5\4\0\3\5"+
    "\20\0\2\5\5\0\1\324\26\5\4\0\3\5\20\0"+
    "\2\5\5\0\2\5\1\325\24\5\4\0\3\5\20\0"+
    "\2\5\5\0\12\5\1\326\14\5\4\0\3\5\20\0"+
    "\2\5\5\0\1\327\26\5\4\0\3\5\20\0\2\5"+
    "\5\0\3\5\1\330\23\5\4\0\3\5\20\0\1\5"+
    "\1\331\5\0\27\5\4\0\3\5\20\0\2\5\5\0"+
    "\15\5\1\332\11\5\4\0\3\5\20\0\2\5\5\0"+
    "\13\5\1\333\13\5\4\0\3\5\20\0\2\5\5\0"+
    "\6\5\1\334\20\5\4\0\3\5\20\0\2\5\5\0"+
    "\15\5\1\335\11\5\4\0\3\5\20\0\2\5\5\0"+
    "\14\5\1\336\12\5\4\0\3\5\20\0\2\5\5\0"+
    "\12\5\1\337\14\5\4\0\3\5\20\0\2\5\5\0"+
    "\1\5\1\340\25\5\4\0\3\5\20\0\2\5\5\0"+
    "\12\5\1\341\14\5\4\0\3\5\20\0\2\5\5\0"+
    "\1\5\1\342\25\5\4\0\3\5\20\0\2\5\5\0"+
    "\3\5\1\343\23\5\4\0\3\5\20\0\2\5\5\0"+
    "\13\5\1\344\13\5\4\0\3\5\20\0\1\5\1\345"+
    "\5\0\27\5\4\0\3\5\20\0\2\5\5\0\14\5"+
    "\1\346\12\5\4\0\3\5\20\0\2\5\5\0\14\5"+
    "\1\347\12\5\4\0\3\5\20\0\1\5\1\350\5\0"+
    "\27\5\4\0\3\5\20\0\2\5\5\0\3\5\1\351"+
    "\23\5\4\0\3\5\20\0\2\5\5\0\1\352\26\5"+
    "\4\0\3\5\20\0\2\5\5\0\13\5\1\353\13\5"+
    "\4\0\3\5\20\0\2\5\5\0\14\5\1\354\12\5"+
    "\4\0\3\5\20\0\2\5\5\0\3\5\1\355\23\5"+
    "\4\0\3\5\20\0\2\5\5\0\11\5\1\356\15\5"+
    "\4\0\3\5\20\0\2\5\5\0\13\5\1\357\13\5"+
    "\4\0\3\5\20\0\2\5\5\0\1\5\1\360\25\5"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8851];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\1\1\7\11\1\1\3\11"+
    "\31\1\2\0\2\11\1\0\3\11\3\1\1\0\1\1"+
    "\1\0\50\1\1\0\3\1\1\0\1\1\1\0\1\11"+
    "\205\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private Symbol newSymbol(String nome) {
    return new Symbol(nome, yyline, yycolumn);
}

private Symbol newSymbol(String nome, String lexema) {
    return new Symbol(nome, lexema, yyline, yycolumn);
}

private Symbol newSymbol(String nome, String lexema, Object value) {
    return new Symbol(nome, lexema, value, yyline, yycolumn);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 218) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caracter não reconhecido " + yytext() +
 ". Linha: " + yyline + ", Coluna: " + yycolumn);
            }
          case 80: break;
          case 2: 
            { 
            }
          case 81: break;
          case 3: 
            { return newSymbol("ID", yytext());
            }
          case 82: break;
          case 4: 
            { return newSymbol("NUMINT", yytext(), Integer.parseInt(yytext()));
            }
          case 83: break;
          case 5: 
            { return newSymbol("DOT");
            }
          case 84: break;
          case 6: 
            { return newSymbol("COMMA");
            }
          case 85: break;
          case 7: 
            { return newSymbol("COLON");
            }
          case 86: break;
          case 8: 
            { return newSymbol("SEMICOLON");
            }
          case 87: break;
          case 9: 
            { return newSymbol("CARET");
            }
          case 88: break;
          case 10: 
            { return newSymbol("EQUAL");
            }
          case 89: break;
          case 11: 
            { return newSymbol("PLUS");
            }
          case 90: break;
          case 12: 
            { return newSymbol("MINUS");
            }
          case 91: break;
          case 13: 
            { return newSymbol("MULTIPLY");
            }
          case 92: break;
          case 14: 
            { return newSymbol("DIVIDE");
            }
          case 93: break;
          case 15: 
            { return newSymbol("LPAR");
            }
          case 94: break;
          case 16: 
            { return newSymbol("RPAR");
            }
          case 95: break;
          case 17: 
            { return newSymbol("LBRA");
            }
          case 96: break;
          case 18: 
            { return newSymbol("RBRA");
            }
          case 97: break;
          case 19: 
            { return newSymbol("LT");
            }
          case 98: break;
          case 20: 
            { return newSymbol("GT");
            }
          case 99: break;
          case 21: 
            { return newSymbol("DOUBLEDOT");
            }
          case 100: break;
          case 22: 
            { return newSymbol("ASSIGN");
            }
          case 101: break;
          case 23: 
            { return newSymbol("LE");
            }
          case 102: break;
          case 24: 
            { return newSymbol("DIFF");
            }
          case 103: break;
          case 25: 
            { return newSymbol("GE");
            }
          case 104: break;
          case 26: 
            { return newSymbol("NUMREAL", yytext(), Double.parseDouble(yytext()));
            }
          case 105: break;
          case 27: 
            { return newSymbol("CHAR", yytext());
            }
          case 106: break;
          case 28: 
            { return newSymbol("COMMENT", yytext());
            }
          case 107: break;
          case 29: 
            { return newSymbol("DO");
            }
          case 108: break;
          case 30: 
            { return newSymbol("IN");
            }
          case 109: break;
          case 31: 
            { return newSymbol("IF");
            }
          case 110: break;
          case 32: 
            { return newSymbol("OR");
            }
          case 111: break;
          case 33: 
            { return newSymbol("OF");
            }
          case 112: break;
          case 34: 
            { return newSymbol("TO");
            }
          case 113: break;
          case 35: 
            { return newSymbol("END");
            }
          case 114: break;
          case 36: 
            { return newSymbol("AND");
            }
          case 115: break;
          case 37: 
            { return newSymbol("ASM");
            }
          case 116: break;
          case 38: 
            { return newSymbol("NIL");
            }
          case 117: break;
          case 39: 
            { return newSymbol("NOT");
            }
          case 118: break;
          case 40: 
            { return newSymbol("DIV");
            }
          case 119: break;
          case 41: 
            { return newSymbol("SET");
            }
          case 120: break;
          case 42: 
            { return newSymbol("SHR");
            }
          case 121: break;
          case 43: 
            { return newSymbol("SHL");
            }
          case 122: break;
          case 44: 
            { return newSymbol("MOD");
            }
          case 123: break;
          case 45: 
            { return newSymbol("VAR");
            }
          case 124: break;
          case 46: 
            { return newSymbol("FOR");
            }
          case 125: break;
          case 47: 
            { return newSymbol("XOR");
            }
          case 126: break;
          case 48: 
            { return newSymbol("ELSE");
            }
          case 127: break;
          case 49: 
            { return newSymbol("STRING", yytext());
            }
          case 128: break;
          case 50: 
            { return newSymbol("GOTO");
            }
          case 129: break;
          case 51: 
            { return newSymbol("CASE");
            }
          case 130: break;
          case 52: 
            { return newSymbol("TYPE");
            }
          case 131: break;
          case 53: 
            { return newSymbol("THEN");
            }
          case 132: break;
          case 54: 
            { return newSymbol("UNIT");
            }
          case 133: break;
          case 55: 
            { return newSymbol("USES");
            }
          case 134: break;
          case 56: 
            { return newSymbol("WITH");
            }
          case 135: break;
          case 57: 
            { return newSymbol("FILE");
            }
          case 136: break;
          case 58: 
            { return newSymbol("Array");
            }
          case 137: break;
          case 59: 
            { return newSymbol("BEGIN");
            }
          case 138: break;
          case 60: 
            { return newSymbol("CONST");
            }
          case 139: break;
          case 61: 
            { return newSymbol("UNTIL");
            }
          case 140: break;
          case 62: 
            { return newSymbol("WHILE");
            }
          case 141: break;
          case 63: 
            { return newSymbol("LABEL");
            }
          case 142: break;
          case 64: 
            { return newSymbol("DOWNTO");
            }
          case 143: break;
          case 65: 
            { return newSymbol("RECORD");
            }
          case 144: break;
          case 66: 
            { return newSymbol("REPEAT");
            }
          case 145: break;
          case 67: 
            { return newSymbol("STRING");
            }
          case 146: break;
          case 68: 
            { return newSymbol("INLINE");
            }
          case 147: break;
          case 69: 
            { return newSymbol("OBJECT");
            }
          case 148: break;
          case 70: 
            { return newSymbol("FOWARD");
            }
          case 149: break;
          case 71: 
            { return newSymbol("PACKED");
            }
          case 150: break;
          case 72: 
            { return newSymbol("INTEGER");
            }
          case 151: break;
          case 73: 
            { return newSymbol("PROGRAM");
            }
          case 152: break;
          case 74: 
            { return newSymbol("FUNCTION");
            }
          case 153: break;
          case 75: 
            { return newSymbol("INTERFACE");
            }
          case 154: break;
          case 76: 
            { return newSymbol("PROCEDURE");
            }
          case 155: break;
          case 77: 
            { return newSymbol("DESTRUCTOR");
            }
          case 156: break;
          case 78: 
            { return newSymbol("CONSTRUCTOR");
            }
          case 157: break;
          case 79: 
            { return newSymbol("IMPLEMENTATION");
            }
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
