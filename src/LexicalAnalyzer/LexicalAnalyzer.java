/* The following code was generated by JFlex 1.6.1 */

package	LexicalAnalyzer;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/ariel/IdeaProjects/tinypascalcompiler/src/LexicalAnalyzer/pascal.lex</tt>
 */
public class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\64\1\1\1\1\22\0\1\31\2\30\1\32"+
    "\3\30\1\27\1\17\1\20\1\15\1\13\1\6\1\14\1\5\1\16"+
    "\1\25\11\4\1\7\1\10\1\23\1\12\1\24\2\30\1\35\1\44"+
    "\1\51\1\37\1\26\1\57\1\45\1\52\1\46\1\61\1\62\1\50"+
    "\1\43\1\36\1\47\1\60\1\3\1\40\1\42\1\53\1\54\1\55"+
    "\1\56\1\63\1\41\1\3\1\21\1\30\1\22\1\11\2\30\1\35"+
    "\1\44\1\51\1\37\1\26\1\57\1\45\1\52\1\46\1\61\1\62"+
    "\1\50\1\43\1\36\1\47\1\60\1\3\1\40\1\42\1\53\1\54"+
    "\1\55\1\56\1\63\1\41\1\3\1\33\1\2\1\34\7\30\1\65"+
    "\172\30\u1f28\0\1\64\1\64\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\4\1\3\2\1"+
    "\23\3\2\0\1\25\1\26\1\0\1\27\1\30\1\31"+
    "\1\32\2\3\1\0\1\33\1\0\1\34\7\3\1\35"+
    "\10\3\1\36\1\3\1\37\1\40\1\3\1\41\6\3"+
    "\1\42\15\3\1\32\1\0\1\32\1\43\1\3\1\0"+
    "\1\33\1\0\1\44\1\3\1\45\1\46\1\47\1\3"+
    "\1\50\3\3\1\51\1\52\1\53\1\3\1\54\21\3"+
    "\1\55\4\3\1\56\4\3\1\57\1\60\1\61\1\34"+
    "\10\3\1\62\5\3\1\63\1\3\1\64\1\65\1\66"+
    "\1\67\1\70\1\3\1\71\1\72\2\3\1\73\5\3"+
    "\1\0\1\74\5\3\1\75\6\3\1\76\1\77\1\100"+
    "\1\101\1\102\5\3\1\61\1\3\1\103\1\104\1\105"+
    "\1\106\1\3\1\107\3\3\1\110\1\3\1\111\1\3"+
    "\1\112\3\3\1\113\1\3\1\114\3\3\1\115\5\3"+
    "\1\116\2\3\1\117\2\3\1\120\1\121\3\3\1\122"+
    "\2\3\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\154\0\154\0\242\0\330\0\66"+
    "\0\u010e\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\u0144\0\66\0\66\0\66\0\u017a\0\u01b0\0\u01e6\0\u021c"+
    "\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc"+
    "\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c"+
    "\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\66"+
    "\0\66\0\u0288\0\66\0\66\0\66\0\u01e6\0\u072c\0\u0762"+
    "\0\u0798\0\u0798\0\u07ce\0\66\0\u0804\0\u083a\0\u0870\0\u08a6"+
    "\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\154\0\154"+
    "\0\u0bd0\0\154\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14"+
    "\0\154\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e"+
    "\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u1008"+
    "\0\u103e\0\154\0\u1074\0\u10aa\0\u10aa\0\u10e0\0\154\0\u1116"+
    "\0\154\0\154\0\154\0\u114c\0\154\0\u1182\0\u11b8\0\u11ee"+
    "\0\154\0\154\0\154\0\u1224\0\154\0\u125a\0\u1290\0\u12c6"+
    "\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476"+
    "\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\154\0\u15f0"+
    "\0\u1626\0\u165c\0\u1692\0\154\0\u16c8\0\u16fe\0\u1734\0\u176a"+
    "\0\154\0\154\0\u17a0\0\u0288\0\u17d6\0\u180c\0\u1842\0\u1878"+
    "\0\u18ae\0\u18e4\0\u191a\0\u1950\0\154\0\u1986\0\u19bc\0\u19f2"+
    "\0\u1a28\0\u1a5e\0\154\0\u1a94\0\154\0\154\0\154\0\154"+
    "\0\154\0\u1aca\0\154\0\154\0\u1b00\0\u1b36\0\154\0\u1b6c"+
    "\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\154\0\u1cb0\0\u1ce6"+
    "\0\u1d1c\0\u1d52\0\u1d88\0\154\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60"+
    "\0\u1e96\0\u1ecc\0\154\0\u1f02\0\154\0\154\0\154\0\u1f38"+
    "\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c\0\154\0\154"+
    "\0\154\0\154\0\u20b2\0\154\0\u20e8\0\u211e\0\u2154\0\154"+
    "\0\u218a\0\154\0\u21c0\0\154\0\u21f6\0\u222c\0\u2262\0\154"+
    "\0\u2298\0\154\0\u22ce\0\u2304\0\u233a\0\154\0\u2370\0\u23a6"+
    "\0\u23dc\0\u2412\0\u2448\0\154\0\u247e\0\u24b4\0\154\0\u24ea"+
    "\0\u2520\0\154\0\154\0\u2556\0\u258c\0\u25c2\0\154\0\u25f8"+
    "\0\u262e\0\154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\2\1\3\1\2\1\32\1\2\1\33\1\34\1\35"+
    "\1\36\1\5\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\5\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\2\5\1\55\72\0\3\5\20\0\2\5\6\0"+
    "\27\5\4\0\1\56\1\0\1\6\1\57\17\0\1\6"+
    "\1\56\44\0\1\60\72\0\1\61\70\0\1\62\62\0"+
    "\1\63\11\0\1\64\53\0\1\65\55\0\1\56\1\0"+
    "\1\66\1\57\17\0\1\66\1\56\41\0\3\5\20\0"+
    "\2\5\6\0\1\5\1\67\11\5\1\70\13\5\4\0"+
    "\25\71\1\72\34\71\1\0\1\71\15\62\1\73\16\62"+
    "\1\74\31\62\2\0\3\5\20\0\2\5\6\0\1\5"+
    "\1\75\1\5\1\76\1\5\1\77\21\5\4\0\3\5"+
    "\20\0\2\5\6\0\11\5\1\100\1\101\14\5\4\0"+
    "\3\5\20\0\1\5\1\102\6\0\11\5\1\103\1\104"+
    "\14\5\4\0\3\5\20\0\1\5\1\105\6\0\27\5"+
    "\4\0\3\5\20\0\1\5\1\106\6\0\15\5\1\107"+
    "\1\110\10\5\4\0\3\5\20\0\2\5\6\0\12\5"+
    "\1\111\14\5\4\0\3\5\20\0\1\5\1\112\6\0"+
    "\12\5\1\113\14\5\4\0\3\5\20\0\2\5\6\0"+
    "\12\5\1\114\14\5\4\0\3\5\20\0\2\5\6\0"+
    "\1\5\1\115\4\5\1\116\13\5\1\117\4\5\4\0"+
    "\3\5\20\0\2\5\6\0\3\5\1\120\3\5\1\121"+
    "\12\5\1\122\4\5\4\0\3\5\20\0\2\5\6\0"+
    "\1\123\26\5\4\0\3\5\20\0\2\5\6\0\1\124"+
    "\11\5\1\125\2\5\1\126\11\5\4\0\3\5\20\0"+
    "\2\5\6\0\3\5\1\127\1\130\5\5\1\131\2\5"+
    "\1\132\11\5\4\0\3\5\20\0\2\5\6\0\1\5"+
    "\1\133\3\5\1\134\21\5\4\0\3\5\20\0\2\5"+
    "\6\0\1\135\26\5\4\0\3\5\20\0\2\5\6\0"+
    "\11\5\1\136\3\5\1\137\11\5\4\0\3\5\20\0"+
    "\2\5\6\0\1\140\10\5\1\141\1\142\4\5\1\143"+
    "\7\5\4\0\3\5\20\0\2\5\6\0\1\144\2\5"+
    "\1\145\23\5\4\0\3\5\20\0\2\5\6\0\12\5"+
    "\1\146\14\5\6\0\1\147\6\0\2\150\10\0\1\147"+
    "\44\0\1\151\20\0\1\151\42\0\3\5\20\0\2\5"+
    "\6\0\2\5\1\152\24\5\4\0\3\5\20\0\2\5"+
    "\6\0\5\5\1\153\21\5\4\0\25\154\1\155\34\154"+
    "\1\0\1\154\15\62\1\156\2\62\1\74\13\62\1\0"+
    "\31\62\2\0\3\5\20\0\2\5\6\0\2\5\1\157"+
    "\24\5\4\0\3\5\20\0\2\5\6\0\3\5\1\160"+
    "\23\5\4\0\3\5\20\0\2\5\6\0\6\5\1\161"+
    "\20\5\4\0\3\5\20\0\2\5\6\0\13\5\1\162"+
    "\13\5\4\0\3\5\20\0\2\5\6\0\16\5\1\163"+
    "\10\5\4\0\3\5\20\0\2\5\6\0\5\5\1\164"+
    "\21\5\4\0\3\5\20\0\2\5\6\0\20\5\1\165"+
    "\6\5\4\0\3\5\20\0\2\5\6\0\21\5\1\166"+
    "\5\5\4\0\3\5\20\0\2\5\6\0\14\5\1\167"+
    "\6\5\1\170\3\5\4\0\3\5\20\0\2\5\6\0"+
    "\16\5\1\171\10\5\4\0\3\5\20\0\2\5\6\0"+
    "\3\5\1\172\7\5\1\173\13\5\4\0\3\5\20\0"+
    "\2\5\6\0\3\5\1\174\23\5\4\0\3\5\20\0"+
    "\2\5\6\0\2\5\1\175\24\5\4\0\3\5\20\0"+
    "\2\5\6\0\10\5\1\176\16\5\4\0\3\5\20\0"+
    "\2\5\6\0\12\5\1\177\14\5\4\0\3\5\20\0"+
    "\2\5\6\0\16\5\1\200\10\5\4\0\3\5\20\0"+
    "\2\5\6\0\13\5\1\201\2\5\1\202\10\5\4\0"+
    "\3\5\20\0\2\5\6\0\23\5\1\203\3\5\4\0"+
    "\3\5\20\0\2\5\6\0\24\5\1\204\2\5\4\0"+
    "\3\5\20\0\2\5\6\0\7\5\1\205\17\5\4\0"+
    "\3\5\20\0\2\5\6\0\5\5\1\206\21\5\4\0"+
    "\3\5\20\0\2\5\6\0\1\5\1\207\25\5\4\0"+
    "\3\5\20\0\2\5\6\0\1\210\26\5\4\0\3\5"+
    "\20\0\2\5\6\0\17\5\1\211\7\5\4\0\3\5"+
    "\20\0\2\5\6\0\23\5\1\212\3\5\4\0\3\5"+
    "\20\0\1\5\1\213\6\0\27\5\4\0\3\5\20\0"+
    "\2\5\6\0\11\5\1\214\4\5\1\215\10\5\4\0"+
    "\3\5\20\0\1\5\1\216\6\0\27\5\4\0\3\5"+
    "\20\0\2\5\6\0\3\5\1\217\23\5\4\0\3\5"+
    "\20\0\2\5\6\0\16\5\1\220\10\5\4\0\3\5"+
    "\20\0\2\5\6\0\11\5\1\221\15\5\4\0\3\5"+
    "\20\0\2\5\6\0\13\5\1\222\13\5\4\0\3\5"+
    "\20\0\2\5\6\0\13\5\1\223\13\5\4\0\3\5"+
    "\20\0\2\5\6\0\3\5\1\224\15\5\1\225\5\5"+
    "\4\0\3\5\20\0\2\5\6\0\1\5\1\226\25\5"+
    "\4\0\3\5\20\0\2\5\6\0\14\5\1\227\12\5"+
    "\4\0\3\5\20\0\2\5\6\0\12\5\1\230\14\5"+
    "\4\0\3\5\20\0\2\5\6\0\3\5\1\231\23\5"+
    "\6\0\1\147\20\0\1\147\42\0\1\56\1\0\1\151"+
    "\20\0\1\151\1\56\41\0\3\5\20\0\1\5\1\232"+
    "\6\0\27\5\4\0\25\154\1\233\34\154\1\0\1\154"+
    "\15\62\1\156\2\62\1\234\13\62\1\74\31\62\2\0"+
    "\3\5\20\0\2\5\6\0\1\235\26\5\4\0\3\5"+
    "\20\0\2\5\6\0\16\5\1\236\10\5\4\0\3\5"+
    "\20\0\2\5\6\0\1\5\1\237\25\5\4\0\3\5"+
    "\20\0\2\5\6\0\12\5\1\240\14\5\4\0\3\5"+
    "\20\0\1\5\1\241\6\0\27\5\4\0\3\5\20\0"+
    "\2\5\6\0\11\5\1\242\15\5\4\0\3\5\20\0"+
    "\2\5\6\0\11\5\1\243\15\5\4\0\3\5\20\0"+
    "\2\5\6\0\13\5\1\244\13\5\4\0\3\5\20\0"+
    "\2\5\6\0\12\5\1\245\14\5\4\0\3\5\20\0"+
    "\2\5\6\0\11\5\1\246\15\5\4\0\3\5\20\0"+
    "\1\5\1\247\6\0\27\5\4\0\3\5\20\0\2\5"+
    "\6\0\13\5\1\250\13\5\4\0\3\5\20\0\1\5"+
    "\1\251\6\0\27\5\4\0\3\5\20\0\1\5\1\252"+
    "\6\0\27\5\4\0\3\5\20\0\1\5\1\253\6\0"+
    "\27\5\4\0\3\5\20\0\2\5\6\0\5\5\1\254"+
    "\21\5\4\0\3\5\20\0\2\5\6\0\3\5\1\255"+
    "\23\5\4\0\3\5\20\0\1\5\1\256\6\0\27\5"+
    "\4\0\3\5\20\0\1\5\1\257\6\0\27\5\4\0"+
    "\3\5\20\0\2\5\6\0\1\5\1\260\25\5\4\0"+
    "\3\5\20\0\2\5\6\0\16\5\1\261\10\5\4\0"+
    "\3\5\20\0\2\5\6\0\11\5\1\262\15\5\4\0"+
    "\3\5\20\0\2\5\6\0\5\5\1\263\21\5\4\0"+
    "\3\5\20\0\2\5\6\0\15\5\1\264\11\5\4\0"+
    "\3\5\20\0\2\5\6\0\13\5\1\265\13\5\4\0"+
    "\3\5\20\0\2\5\6\0\5\5\1\266\21\5\4\0"+
    "\3\5\20\0\1\5\1\267\6\0\27\5\4\0\3\5"+
    "\20\0\2\5\6\0\1\270\26\5\4\0\3\5\20\0"+
    "\2\5\6\0\14\5\1\271\12\5\4\0\3\5\20\0"+
    "\2\5\6\0\25\5\1\272\1\5\4\0\3\5\20\0"+
    "\2\5\6\0\10\5\1\273\3\5\1\274\12\5\4\0"+
    "\25\154\1\233\2\154\1\275\31\154\1\0\1\154\2\0"+
    "\3\5\20\0\2\5\6\0\4\5\1\276\22\5\4\0"+
    "\3\5\20\0\2\5\6\0\3\5\1\277\23\5\4\0"+
    "\3\5\20\0\2\5\6\0\16\5\1\300\10\5\4\0"+
    "\3\5\20\0\2\5\6\0\3\5\1\301\23\5\4\0"+
    "\3\5\20\0\2\5\6\0\1\302\26\5\4\0\3\5"+
    "\20\0\2\5\6\0\1\5\1\303\25\5\4\0\3\5"+
    "\20\0\2\5\6\0\1\5\1\304\25\5\4\0\3\5"+
    "\20\0\1\5\1\305\6\0\27\5\4\0\3\5\20\0"+
    "\2\5\6\0\1\5\1\306\25\5\4\0\3\5\20\0"+
    "\2\5\6\0\3\5\1\307\4\5\1\310\16\5\4\0"+
    "\3\5\20\0\1\5\1\311\6\0\27\5\4\0\3\5"+
    "\20\0\2\5\6\0\14\5\1\312\12\5\4\0\3\5"+
    "\20\0\2\5\6\0\13\5\1\313\13\5\4\0\3\5"+
    "\20\0\2\5\6\0\16\5\1\314\10\5\4\0\3\5"+
    "\20\0\2\5\6\0\13\5\1\315\13\5\4\0\3\5"+
    "\20\0\1\5\1\316\6\0\27\5\4\0\3\5\20\0"+
    "\1\5\1\317\6\0\27\5\4\0\3\5\20\0\2\5"+
    "\6\0\3\5\1\320\23\5\4\0\3\5\20\0\2\5"+
    "\6\0\16\5\1\321\10\5\4\0\3\5\20\0\1\5"+
    "\1\322\6\0\27\5\4\0\3\5\20\0\2\5\6\0"+
    "\3\5\1\323\23\5\4\0\3\5\20\0\1\5\1\324"+
    "\6\0\27\5\4\0\2\154\1\325\20\154\1\233\1\154"+
    "\1\233\34\154\1\0\1\154\2\0\3\5\20\0\2\5"+
    "\6\0\17\5\1\326\7\5\4\0\3\5\20\0\2\5"+
    "\6\0\12\5\1\327\14\5\4\0\3\5\20\0\2\5"+
    "\6\0\2\5\1\330\24\5\4\0\3\5\20\0\2\5"+
    "\6\0\16\5\1\331\10\5\4\0\3\5\20\0\2\5"+
    "\6\0\10\5\1\332\16\5\4\0\3\5\20\0\2\5"+
    "\6\0\1\333\26\5\4\0\3\5\20\0\1\5\1\334"+
    "\6\0\27\5\4\0\3\5\20\0\2\5\6\0\22\5"+
    "\1\335\4\5\4\0\3\5\20\0\1\5\1\336\6\0"+
    "\27\5\4\0\3\5\20\0\2\5\6\0\6\5\1\337"+
    "\20\5\4\0\3\5\20\0\2\5\6\0\16\5\1\340"+
    "\10\5\4\0\3\5\20\0\2\5\6\0\3\5\1\341"+
    "\23\5\4\0\3\5\20\0\2\5\6\0\2\5\1\342"+
    "\24\5\4\0\3\5\20\0\2\5\6\0\11\5\1\343"+
    "\15\5\4\0\3\5\20\0\2\5\6\0\2\5\1\344"+
    "\24\5\4\0\3\5\20\0\2\5\6\0\1\345\26\5"+
    "\4\0\3\5\20\0\2\5\6\0\2\5\1\346\24\5"+
    "\4\0\2\154\1\325\20\154\1\325\1\154\1\233\2\154"+
    "\1\275\31\154\1\0\1\154\2\0\3\5\20\0\2\5"+
    "\6\0\14\5\1\347\12\5\4\0\3\5\20\0\2\5"+
    "\6\0\1\5\1\350\25\5\4\0\3\5\20\0\2\5"+
    "\6\0\1\351\26\5\4\0\3\5\20\0\2\5\6\0"+
    "\3\5\1\352\23\5\4\0\3\5\20\0\1\5\1\353"+
    "\6\0\27\5\4\0\3\5\20\0\2\5\6\0\17\5"+
    "\1\354\7\5\4\0\3\5\20\0\2\5\6\0\12\5"+
    "\1\355\14\5\4\0\3\5\20\0\2\5\6\0\6\5"+
    "\1\356\20\5\4\0\3\5\20\0\2\5\6\0\17\5"+
    "\1\357\7\5\4\0\3\5\20\0\2\5\6\0\16\5"+
    "\1\360\10\5\4\0\3\5\20\0\2\5\6\0\14\5"+
    "\1\361\12\5\4\0\3\5\20\0\2\5\6\0\1\5"+
    "\1\362\25\5\4\0\3\5\20\0\2\5\6\0\14\5"+
    "\1\363\12\5\4\0\3\5\20\0\2\5\6\0\1\5"+
    "\1\364\25\5\4\0\3\5\20\0\2\5\6\0\3\5"+
    "\1\365\23\5\4\0\3\5\20\0\2\5\6\0\12\5"+
    "\1\366\14\5\4\0\3\5\20\0\1\5\1\367\6\0"+
    "\27\5\4\0\3\5\20\0\2\5\6\0\16\5\1\370"+
    "\10\5\4\0\3\5\20\0\2\5\6\0\16\5\1\371"+
    "\10\5\4\0\3\5\20\0\1\5\1\372\6\0\27\5"+
    "\4\0\3\5\20\0\2\5\6\0\3\5\1\373\23\5"+
    "\4\0\3\5\20\0\2\5\6\0\1\374\26\5\4\0"+
    "\3\5\20\0\2\5\6\0\12\5\1\375\14\5\4\0"+
    "\3\5\20\0\2\5\6\0\16\5\1\376\10\5\4\0"+
    "\3\5\20\0\2\5\6\0\3\5\1\377\23\5\4\0"+
    "\3\5\20\0\2\5\6\0\11\5\1\u0100\15\5\4\0"+
    "\3\5\20\0\2\5\6\0\12\5\1\u0101\14\5\4\0"+
    "\3\5\20\0\2\5\6\0\1\5\1\u0102\25\5\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9828];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\1\1\7\11\1\1\3\11"+
    "\31\1\2\0\2\11\1\0\3\11\3\1\1\0\1\1"+
    "\1\0\1\11\53\1\1\0\3\1\1\0\1\1\1\0"+
    "\116\1\1\0\105\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private Symbol newSymbol(String nome) {
    return new Symbol(nome, yyline+1, yycolumn);
}

private Symbol newSymbol(String nome, String lexema) {
    return new Symbol(nome, lexema, yyline+1, yycolumn);
}

private Symbol newSymbol(String nome, String lexema, Object value) {
    return new Symbol(nome, lexema, value, yyline+1, yycolumn);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caracter não reconhecido " + yytext() +
 ". Linha: " + yyline+1 + ", Coluna: " + yycolumn);
            }
          case 84: break;
          case 2: 
            { 
            }
          case 85: break;
          case 3: 
            { return newSymbol("ID", yytext());
            }
          case 86: break;
          case 4: 
            { return newSymbol("NUMINT", yytext(), Integer.parseInt(yytext()));
            }
          case 87: break;
          case 5: 
            { return newSymbol("DOT");
            }
          case 88: break;
          case 6: 
            { return newSymbol("COMMA");
            }
          case 89: break;
          case 7: 
            { return newSymbol("COLON");
            }
          case 90: break;
          case 8: 
            { return newSymbol("SEMICOLON");
            }
          case 91: break;
          case 9: 
            { return newSymbol("CARET");
            }
          case 92: break;
          case 10: 
            { return newSymbol("EQUAL");
            }
          case 93: break;
          case 11: 
            { return newSymbol("PLUS");
            }
          case 94: break;
          case 12: 
            { return newSymbol("MINUS");
            }
          case 95: break;
          case 13: 
            { return newSymbol("MULTIPLY");
            }
          case 96: break;
          case 14: 
            { return newSymbol("DIVIDE");
            }
          case 97: break;
          case 15: 
            { return newSymbol("LPAR");
            }
          case 98: break;
          case 16: 
            { return newSymbol("RPAR");
            }
          case 99: break;
          case 17: 
            { return newSymbol("LBRA");
            }
          case 100: break;
          case 18: 
            { return newSymbol("RBRA");
            }
          case 101: break;
          case 19: 
            { return newSymbol("LT");
            }
          case 102: break;
          case 20: 
            { return newSymbol("GT");
            }
          case 103: break;
          case 21: 
            { return newSymbol("DOUBLEDOT");
            }
          case 104: break;
          case 22: 
            { return newSymbol("ASSIGN");
            }
          case 105: break;
          case 23: 
            { return newSymbol("LE");
            }
          case 106: break;
          case 24: 
            { return newSymbol("DIFF");
            }
          case 107: break;
          case 25: 
            { return newSymbol("GE");
            }
          case 108: break;
          case 26: 
            { return newSymbol("NUMREAL", yytext(), Double.parseDouble(yytext()));
            }
          case 109: break;
          case 27: 
            { return newSymbol("CHAR", yytext());
            }
          case 110: break;
          case 28: 
            { return newSymbol("COMMENT", yytext());
            }
          case 111: break;
          case 29: 
            { return newSymbol("DO");
            }
          case 112: break;
          case 30: 
            { return newSymbol("IN");
            }
          case 113: break;
          case 31: 
            { return newSymbol("IF");
            }
          case 114: break;
          case 32: 
            { return newSymbol("OR");
            }
          case 115: break;
          case 33: 
            { return newSymbol("OF");
            }
          case 116: break;
          case 34: 
            { return newSymbol("TO");
            }
          case 117: break;
          case 35: 
            { return newSymbol("END");
            }
          case 118: break;
          case 36: 
            { return newSymbol("AND");
            }
          case 119: break;
          case 37: 
            { return newSymbol("ASM");
            }
          case 120: break;
          case 38: 
            { return newSymbol("NIL");
            }
          case 121: break;
          case 39: 
            { return newSymbol("NOT");
            }
          case 122: break;
          case 40: 
            { return newSymbol("DIV");
            }
          case 123: break;
          case 41: 
            { return newSymbol("SET");
            }
          case 124: break;
          case 42: 
            { return newSymbol("SHR");
            }
          case 125: break;
          case 43: 
            { return newSymbol("SHL");
            }
          case 126: break;
          case 44: 
            { return newSymbol("MOD");
            }
          case 127: break;
          case 45: 
            { return newSymbol("VAR");
            }
          case 128: break;
          case 46: 
            { return newSymbol("FOR");
            }
          case 129: break;
          case 47: 
            { return newSymbol("XOR");
            }
          case 130: break;
          case 48: 
            { return newSymbol("ELSE");
            }
          case 131: break;
          case 49: 
            { return newSymbol("STRING", yytext());
            }
          case 132: break;
          case 50: 
            { return newSymbol("GOTO");
            }
          case 133: break;
          case 51: 
            { return newSymbol("CASE");
            }
          case 134: break;
          case 52: 
            { return newSymbol("CHAR");
            }
          case 135: break;
          case 53: 
            { return newSymbol("TRUE");
            }
          case 136: break;
          case 54: 
            { return newSymbol("TYPE");
            }
          case 137: break;
          case 55: 
            { return newSymbol("THEN");
            }
          case 138: break;
          case 56: 
            { return newSymbol("UNIT");
            }
          case 139: break;
          case 57: 
            { return newSymbol("USES");
            }
          case 140: break;
          case 58: 
            { return newSymbol("WITH");
            }
          case 141: break;
          case 59: 
            { return newSymbol("FILE");
            }
          case 142: break;
          case 60: 
            { return newSymbol("Array");
            }
          case 143: break;
          case 61: 
            { return newSymbol("BEGIN");
            }
          case 144: break;
          case 62: 
            { return newSymbol("LABEL");
            }
          case 145: break;
          case 63: 
            { return newSymbol("CONST");
            }
          case 146: break;
          case 64: 
            { return newSymbol("UNTIL");
            }
          case 147: break;
          case 65: 
            { return newSymbol("WHILE");
            }
          case 148: break;
          case 66: 
            { return newSymbol("FALSE");
            }
          case 149: break;
          case 67: 
            { return newSymbol("DOWNTO");
            }
          case 150: break;
          case 68: 
            { return newSymbol("RECORD");
            }
          case 151: break;
          case 69: 
            { return newSymbol("REPEAT");
            }
          case 152: break;
          case 70: 
            { return newSymbol("STRING");
            }
          case 153: break;
          case 71: 
            { return newSymbol("INLINE");
            }
          case 154: break;
          case 72: 
            { return newSymbol("OBJECT");
            }
          case 155: break;
          case 73: 
            { return newSymbol("FOWARD");
            }
          case 156: break;
          case 74: 
            { return newSymbol("PACKED");
            }
          case 157: break;
          case 75: 
            { return newSymbol("BOOLEAN");
            }
          case 158: break;
          case 76: 
            { return newSymbol("INTEGER");
            }
          case 159: break;
          case 77: 
            { return newSymbol("PROGRAM");
            }
          case 160: break;
          case 78: 
            { return newSymbol("FUNCTION");
            }
          case 161: break;
          case 79: 
            { return newSymbol("INTERFACE");
            }
          case 162: break;
          case 80: 
            { return newSymbol("PROCEDURE");
            }
          case 163: break;
          case 81: 
            { return newSymbol("DESTRUCTOR");
            }
          case 164: break;
          case 82: 
            { return newSymbol("CONSTRUCTOR");
            }
          case 165: break;
          case 83: 
            { return newSymbol("IMPLEMENTATION");
            }
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
