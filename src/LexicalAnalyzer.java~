/* The following code was generated by JFlex 1.6.1 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/ariel/IdeaProjects/TinyPascalCompiler/src/pascal.lex</tt>
 */
public class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CODESEG = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\2\1\63\1\1\1\1\22\0\1\2\1\0\1\27"+
    "\4\0\1\26\1\20\1\21\1\16\1\14\1\7\1\15\1\6\1\17"+
    "\1\30\11\5\1\10\1\11\1\24\1\13\1\25\2\0\1\34\1\43"+
    "\1\50\1\36\1\31\1\56\1\44\1\51\1\45\1\60\1\61\1\47"+
    "\1\42\1\35\1\46\1\57\1\4\1\37\1\41\1\52\1\53\1\54"+
    "\1\55\1\62\1\40\1\4\1\22\1\0\1\23\1\12\2\0\1\34"+
    "\1\43\1\50\1\36\1\31\1\56\1\44\1\51\1\45\1\60\1\61"+
    "\1\47\1\42\1\35\1\46\1\57\1\4\1\37\1\41\1\52\1\53"+
    "\1\54\1\55\1\62\1\40\1\4\1\32\1\3\1\33\7\0\1\63"+
    "\u1fa2\0\1\63\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\4"+
    "\1\3\1\1\23\3\2\0\1\27\1\30\1\0\1\31"+
    "\1\32\1\33\1\0\1\34\2\3\1\0\1\35\7\3"+
    "\1\36\10\3\1\37\1\3\1\40\1\41\1\3\1\42"+
    "\6\3\1\43\15\3\1\34\1\0\1\34\1\0\1\44"+
    "\1\45\1\3\1\0\1\46\1\3\1\47\1\50\1\51"+
    "\1\3\1\52\4\3\1\53\1\54\1\55\1\3\1\56"+
    "\21\3\1\57\4\3\1\60\4\3\1\61\1\62\1\63"+
    "\1\35\3\3\1\64\5\3\1\65\5\3\1\66\1\3"+
    "\1\67\1\70\1\71\1\72\1\73\1\3\1\74\1\75"+
    "\2\3\1\76\5\3\1\77\5\3\1\100\6\3\1\101"+
    "\1\102\1\103\1\104\1\105\6\3\1\106\1\107\1\110"+
    "\1\111\1\3\1\112\3\3\1\113\1\3\1\114\1\3"+
    "\1\115\3\3\1\116\1\3\1\117\3\3\1\120\5\3"+
    "\1\121\2\3\1\122\2\3\1\123\1\124\3\3\1\125"+
    "\2\3\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\150\0\234\0\234\0\320\0\u0104"+
    "\0\150\0\u0138\0\150\0\150\0\150\0\150\0\150\0\150"+
    "\0\150\0\u016c\0\150\0\150\0\150\0\u01a0\0\u01d4\0\u0208"+
    "\0\150\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374"+
    "\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514"+
    "\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4"+
    "\0\u06e8\0\150\0\150\0\u02a4\0\150\0\150\0\150\0\u071c"+
    "\0\u023c\0\u0750\0\u0784\0\u07b8\0\150\0\u07ec\0\u0820\0\u0854"+
    "\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4"+
    "\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\234"+
    "\0\234\0\u0b94\0\234\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98"+
    "\0\u0ccc\0\234\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04"+
    "\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4"+
    "\0\u0fa4\0\u0fd8\0\u100c\0\150\0\234\0\u1040\0\u1074\0\234"+
    "\0\u10a8\0\234\0\234\0\234\0\u10dc\0\234\0\u1110\0\u1144"+
    "\0\u1178\0\u11ac\0\234\0\234\0\234\0\u11e0\0\234\0\u1214"+
    "\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4"+
    "\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554"+
    "\0\234\0\u1588\0\u15bc\0\u15f0\0\u1624\0\234\0\u1658\0\u168c"+
    "\0\u16c0\0\u16f4\0\234\0\150\0\234\0\u02a4\0\u1728\0\u175c"+
    "\0\u1790\0\234\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\234"+
    "\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998\0\234\0\u19cc\0\234"+
    "\0\234\0\234\0\234\0\234\0\u1a00\0\234\0\234\0\u1a34"+
    "\0\u1a68\0\234\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\234"+
    "\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\234\0\u1ca4\0\u1cd8"+
    "\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\234\0\u1ddc\0\234\0\234"+
    "\0\234\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\234"+
    "\0\234\0\234\0\234\0\u1f48\0\234\0\u1f7c\0\u1fb0\0\u1fe4"+
    "\0\234\0\u2018\0\234\0\u204c\0\234\0\u2080\0\u20b4\0\u20e8"+
    "\0\234\0\u211c\0\234\0\u2150\0\u2184\0\u21b8\0\234\0\u21ec"+
    "\0\u2220\0\u2254\0\u2288\0\u22bc\0\234\0\u22f0\0\u2324\0\234"+
    "\0\u2358\0\u238c\0\234\0\234\0\u23c0\0\u23f4\0\u2428\0\234"+
    "\0\u245c\0\u2490\0\234";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\3\1\35\1\36\1\37\1\40\1\6"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\6\1\51\1\52\1\53\1\54\1\55\1\56\2\6"+
    "\1\57\1\0\1\3\1\0\61\3\70\0\3\6\22\0"+
    "\2\6\2\0\27\6\4\0\1\60\1\0\1\7\1\61"+
    "\21\0\1\7\1\60\40\0\1\62\70\0\1\63\66\0"+
    "\1\64\60\0\1\65\11\0\1\66\51\0\1\67\50\0"+
    "\26\70\1\0\35\70\3\0\1\60\1\0\1\71\1\61"+
    "\21\0\1\71\1\60\35\0\3\6\22\0\2\6\2\0"+
    "\1\6\1\72\11\6\1\73\13\6\1\0\16\64\1\74"+
    "\14\64\1\75\30\64\3\0\3\6\22\0\2\6\2\0"+
    "\1\6\1\76\1\6\1\77\1\6\1\100\21\6\4\0"+
    "\3\6\22\0\2\6\2\0\11\6\1\101\1\102\14\6"+
    "\4\0\3\6\22\0\1\6\1\103\2\0\11\6\1\104"+
    "\1\105\14\6\4\0\3\6\22\0\1\6\1\106\2\0"+
    "\27\6\4\0\3\6\22\0\1\6\1\107\2\0\15\6"+
    "\1\110\1\111\10\6\4\0\3\6\22\0\2\6\2\0"+
    "\12\6\1\112\14\6\4\0\3\6\22\0\1\6\1\113"+
    "\2\0\12\6\1\114\14\6\4\0\3\6\22\0\2\6"+
    "\2\0\12\6\1\115\14\6\4\0\3\6\22\0\2\6"+
    "\2\0\1\6\1\116\4\6\1\117\13\6\1\120\4\6"+
    "\4\0\3\6\22\0\2\6\2\0\3\6\1\121\3\6"+
    "\1\122\12\6\1\123\4\6\4\0\3\6\22\0\2\6"+
    "\2\0\1\124\26\6\4\0\3\6\22\0\2\6\2\0"+
    "\1\125\11\6\1\126\2\6\1\127\11\6\4\0\3\6"+
    "\22\0\2\6\2\0\3\6\1\130\1\131\5\6\1\132"+
    "\2\6\1\133\11\6\4\0\3\6\22\0\2\6\2\0"+
    "\1\6\1\134\3\6\1\135\21\6\4\0\3\6\22\0"+
    "\2\6\2\0\1\136\26\6\4\0\3\6\22\0\2\6"+
    "\2\0\11\6\1\137\3\6\1\140\11\6\4\0\3\6"+
    "\22\0\2\6\2\0\1\141\10\6\1\142\1\143\4\6"+
    "\1\144\7\6\4\0\3\6\22\0\2\6\2\0\1\145"+
    "\2\6\1\146\23\6\4\0\3\6\22\0\2\6\2\0"+
    "\12\6\1\147\14\6\6\0\1\150\6\0\2\151\12\0"+
    "\1\150\40\0\1\152\22\0\1\152\33\0\26\153\1\154"+
    "\35\153\3\0\3\6\22\0\2\6\2\0\2\6\1\155"+
    "\24\6\4\0\3\6\22\0\2\6\2\0\5\6\1\156"+
    "\21\6\1\0\16\64\1\157\2\64\1\75\11\64\1\0"+
    "\30\64\3\0\3\6\22\0\2\6\2\0\2\6\1\160"+
    "\24\6\4\0\3\6\22\0\2\6\2\0\3\6\1\161"+
    "\23\6\4\0\3\6\22\0\2\6\2\0\6\6\1\162"+
    "\20\6\4\0\3\6\22\0\2\6\2\0\13\6\1\163"+
    "\13\6\4\0\3\6\22\0\2\6\2\0\16\6\1\164"+
    "\10\6\4\0\3\6\22\0\2\6\2\0\5\6\1\165"+
    "\21\6\4\0\3\6\22\0\2\6\2\0\20\6\1\166"+
    "\6\6\4\0\3\6\22\0\2\6\2\0\21\6\1\167"+
    "\5\6\4\0\3\6\22\0\2\6\2\0\1\170\13\6"+
    "\1\171\6\6\1\172\3\6\4\0\3\6\22\0\2\6"+
    "\2\0\16\6\1\173\10\6\4\0\3\6\22\0\2\6"+
    "\2\0\3\6\1\174\7\6\1\175\13\6\4\0\3\6"+
    "\22\0\2\6\2\0\3\6\1\176\23\6\4\0\3\6"+
    "\22\0\2\6\2\0\2\6\1\177\24\6\4\0\3\6"+
    "\22\0\2\6\2\0\10\6\1\200\16\6\4\0\3\6"+
    "\22\0\2\6\2\0\12\6\1\201\14\6\4\0\3\6"+
    "\22\0\2\6\2\0\16\6\1\202\10\6\4\0\3\6"+
    "\22\0\2\6\2\0\13\6\1\203\2\6\1\204\10\6"+
    "\4\0\3\6\22\0\2\6\2\0\23\6\1\205\3\6"+
    "\4\0\3\6\22\0\2\6\2\0\24\6\1\206\2\6"+
    "\4\0\3\6\22\0\2\6\2\0\7\6\1\207\17\6"+
    "\4\0\3\6\22\0\2\6\2\0\5\6\1\210\21\6"+
    "\4\0\3\6\22\0\2\6\2\0\1\6\1\211\25\6"+
    "\4\0\3\6\22\0\2\6\2\0\1\212\26\6\4\0"+
    "\3\6\22\0\2\6\2\0\17\6\1\213\7\6\4\0"+
    "\3\6\22\0\2\6\2\0\23\6\1\214\3\6\4\0"+
    "\3\6\22\0\1\6\1\215\2\0\27\6\4\0\3\6"+
    "\22\0\2\6\2\0\11\6\1\216\4\6\1\217\10\6"+
    "\4\0\3\6\22\0\1\6\1\220\2\0\27\6\4\0"+
    "\3\6\22\0\2\6\2\0\3\6\1\221\23\6\4\0"+
    "\3\6\22\0\2\6\2\0\16\6\1\222\10\6\4\0"+
    "\3\6\22\0\2\6\2\0\11\6\1\223\15\6\4\0"+
    "\3\6\22\0\2\6\2\0\13\6\1\224\13\6\4\0"+
    "\3\6\22\0\2\6\2\0\13\6\1\225\13\6\4\0"+
    "\3\6\22\0\2\6\2\0\3\6\1\226\15\6\1\227"+
    "\5\6\4\0\3\6\22\0\2\6\2\0\1\6\1\230"+
    "\25\6\4\0\3\6\22\0\2\6\2\0\14\6\1\231"+
    "\12\6\4\0\3\6\22\0\2\6\2\0\12\6\1\232"+
    "\14\6\4\0\3\6\22\0\2\6\2\0\3\6\1\233"+
    "\23\6\6\0\1\150\22\0\1\150\36\0\1\60\1\0"+
    "\1\152\22\0\1\152\1\60\32\0\26\153\1\234\35\153"+
    "\3\0\3\6\22\0\1\6\1\235\2\0\27\6\1\0"+
    "\16\64\1\157\2\64\1\236\11\64\1\75\30\64\3\0"+
    "\3\6\22\0\2\6\2\0\1\237\26\6\4\0\3\6"+
    "\22\0\2\6\2\0\16\6\1\240\10\6\4\0\3\6"+
    "\22\0\2\6\2\0\1\6\1\241\25\6\4\0\3\6"+
    "\22\0\2\6\2\0\13\6\1\242\13\6\4\0\3\6"+
    "\22\0\2\6\2\0\12\6\1\243\14\6\4\0\3\6"+
    "\22\0\1\6\1\244\2\0\27\6\4\0\3\6\22\0"+
    "\2\6\2\0\11\6\1\245\15\6\4\0\3\6\22\0"+
    "\2\6\2\0\11\6\1\246\15\6\4\0\3\6\22\0"+
    "\2\6\2\0\13\6\1\247\13\6\4\0\3\6\22\0"+
    "\2\6\2\0\12\6\1\250\14\6\4\0\3\6\22\0"+
    "\2\6\2\0\11\6\1\251\15\6\4\0\3\6\22\0"+
    "\1\6\1\252\2\0\27\6\4\0\3\6\22\0\2\6"+
    "\2\0\13\6\1\253\13\6\4\0\3\6\22\0\1\6"+
    "\1\254\2\0\27\6\4\0\3\6\22\0\1\6\1\255"+
    "\2\0\27\6\4\0\3\6\22\0\1\6\1\256\2\0"+
    "\27\6\4\0\3\6\22\0\2\6\2\0\5\6\1\257"+
    "\21\6\4\0\3\6\22\0\2\6\2\0\3\6\1\260"+
    "\23\6\4\0\3\6\22\0\1\6\1\261\2\0\27\6"+
    "\4\0\3\6\22\0\1\6\1\262\2\0\27\6\4\0"+
    "\3\6\22\0\2\6\2\0\1\6\1\263\25\6\4\0"+
    "\3\6\22\0\2\6\2\0\16\6\1\264\10\6\4\0"+
    "\3\6\22\0\2\6\2\0\11\6\1\265\15\6\4\0"+
    "\3\6\22\0\2\6\2\0\5\6\1\266\21\6\4\0"+
    "\3\6\22\0\2\6\2\0\15\6\1\267\11\6\4\0"+
    "\3\6\22\0\2\6\2\0\13\6\1\270\13\6\4\0"+
    "\3\6\22\0\2\6\2\0\5\6\1\271\21\6\4\0"+
    "\3\6\22\0\1\6\1\272\2\0\27\6\4\0\3\6"+
    "\22\0\2\6\2\0\1\273\26\6\4\0\3\6\22\0"+
    "\2\6\2\0\14\6\1\274\12\6\4\0\3\6\22\0"+
    "\2\6\2\0\25\6\1\275\1\6\4\0\3\6\22\0"+
    "\2\6\2\0\10\6\1\276\3\6\1\277\12\6\4\0"+
    "\3\6\22\0\2\6\2\0\4\6\1\300\22\6\4\0"+
    "\3\6\22\0\2\6\2\0\3\6\1\301\23\6\4\0"+
    "\3\6\22\0\2\6\2\0\16\6\1\302\10\6\4\0"+
    "\3\6\22\0\2\6\2\0\3\6\1\303\23\6\4\0"+
    "\3\6\22\0\2\6\2\0\1\304\26\6\4\0\3\6"+
    "\22\0\2\6\2\0\1\6\1\305\25\6\4\0\3\6"+
    "\22\0\2\6\2\0\1\6\1\306\25\6\4\0\3\6"+
    "\22\0\1\6\1\307\2\0\27\6\4\0\3\6\22\0"+
    "\2\6\2\0\1\6\1\310\25\6\4\0\3\6\22\0"+
    "\2\6\2\0\3\6\1\311\4\6\1\312\16\6\4\0"+
    "\3\6\22\0\1\6\1\313\2\0\27\6\4\0\3\6"+
    "\22\0\2\6\2\0\14\6\1\314\12\6\4\0\3\6"+
    "\22\0\2\6\2\0\13\6\1\315\13\6\4\0\3\6"+
    "\22\0\2\6\2\0\16\6\1\316\10\6\4\0\3\6"+
    "\22\0\2\6\2\0\13\6\1\317\13\6\4\0\3\6"+
    "\22\0\1\6\1\320\2\0\27\6\4\0\3\6\22\0"+
    "\1\6\1\321\2\0\27\6\4\0\3\6\22\0\2\6"+
    "\2\0\3\6\1\322\23\6\4\0\3\6\22\0\2\6"+
    "\2\0\16\6\1\323\10\6\4\0\3\6\22\0\1\6"+
    "\1\324\2\0\27\6\4\0\3\6\22\0\2\6\2\0"+
    "\3\6\1\325\23\6\4\0\3\6\22\0\1\6\1\326"+
    "\2\0\27\6\4\0\3\6\22\0\2\6\2\0\17\6"+
    "\1\327\7\6\4\0\3\6\22\0\2\6\2\0\12\6"+
    "\1\330\14\6\4\0\3\6\22\0\2\6\2\0\2\6"+
    "\1\331\24\6\4\0\3\6\22\0\2\6\2\0\16\6"+
    "\1\332\10\6\4\0\3\6\22\0\2\6\2\0\10\6"+
    "\1\333\16\6\4\0\3\6\22\0\2\6\2\0\1\334"+
    "\26\6\4\0\3\6\22\0\1\6\1\335\2\0\27\6"+
    "\4\0\3\6\22\0\2\6\2\0\22\6\1\336\4\6"+
    "\4\0\3\6\22\0\1\6\1\337\2\0\27\6\4\0"+
    "\3\6\22\0\2\6\2\0\6\6\1\340\20\6\4\0"+
    "\3\6\22\0\2\6\2\0\16\6\1\341\10\6\4\0"+
    "\3\6\22\0\2\6\2\0\3\6\1\342\23\6\4\0"+
    "\3\6\22\0\2\6\2\0\2\6\1\343\24\6\4\0"+
    "\3\6\22\0\2\6\2\0\11\6\1\344\15\6\4\0"+
    "\3\6\22\0\2\6\2\0\2\6\1\345\24\6\4\0"+
    "\3\6\22\0\2\6\2\0\1\346\26\6\4\0\3\6"+
    "\22\0\2\6\2\0\2\6\1\347\24\6\4\0\3\6"+
    "\22\0\2\6\2\0\14\6\1\350\12\6\4\0\3\6"+
    "\22\0\2\6\2\0\1\6\1\351\25\6\4\0\3\6"+
    "\22\0\2\6\2\0\1\352\26\6\4\0\3\6\22\0"+
    "\2\6\2\0\3\6\1\353\23\6\4\0\3\6\22\0"+
    "\1\6\1\354\2\0\27\6\4\0\3\6\22\0\2\6"+
    "\2\0\17\6\1\355\7\6\4\0\3\6\22\0\2\6"+
    "\2\0\12\6\1\356\14\6\4\0\3\6\22\0\2\6"+
    "\2\0\6\6\1\357\20\6\4\0\3\6\22\0\2\6"+
    "\2\0\17\6\1\360\7\6\4\0\3\6\22\0\2\6"+
    "\2\0\16\6\1\361\10\6\4\0\3\6\22\0\2\6"+
    "\2\0\14\6\1\362\12\6\4\0\3\6\22\0\2\6"+
    "\2\0\1\6\1\363\25\6\4\0\3\6\22\0\2\6"+
    "\2\0\14\6\1\364\12\6\4\0\3\6\22\0\2\6"+
    "\2\0\1\6\1\365\25\6\4\0\3\6\22\0\2\6"+
    "\2\0\3\6\1\366\23\6\4\0\3\6\22\0\2\6"+
    "\2\0\12\6\1\367\14\6\4\0\3\6\22\0\1\6"+
    "\1\370\2\0\27\6\4\0\3\6\22\0\2\6\2\0"+
    "\16\6\1\371\10\6\4\0\3\6\22\0\2\6\2\0"+
    "\16\6\1\372\10\6\4\0\3\6\22\0\1\6\1\373"+
    "\2\0\27\6\4\0\3\6\22\0\2\6\2\0\3\6"+
    "\1\374\23\6\4\0\3\6\22\0\2\6\2\0\1\375"+
    "\26\6\4\0\3\6\22\0\2\6\2\0\12\6\1\376"+
    "\14\6\4\0\3\6\22\0\2\6\2\0\16\6\1\377"+
    "\10\6\4\0\3\6\22\0\2\6\2\0\3\6\1\u0100"+
    "\23\6\4\0\3\6\22\0\2\6\2\0\11\6\1\u0101"+
    "\15\6\4\0\3\6\22\0\2\6\2\0\12\6\1\u0102"+
    "\14\6\4\0\3\6\22\0\2\6\2\0\1\6\1\u0103"+
    "\25\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9412];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\4\1\1\11\1\1\7\11\1\1\3\11"+
    "\3\1\1\11\26\1\2\0\2\11\1\0\3\11\1\0"+
    "\3\1\1\0\1\11\53\1\1\0\1\1\1\0\1\11"+
    "\2\1\1\0\54\1\1\11\147\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private String newSymbol(String nome) {
    System.out.println(nome);
    return "";
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 220) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     return newSymbol("EOF");
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter não reconhecido " + yytext() + " -- ignorado");
            }
          case 87: break;
          case 2: 
            { 
            }
          case 88: break;
          case 3: 
            { return newSymbol("ID");
            }
          case 89: break;
          case 4: 
            { return newSymbol("NUMINT");
            }
          case 90: break;
          case 5: 
            { return newSymbol("DOT");
            }
          case 91: break;
          case 6: 
            { return newSymbol("COMMA");
            }
          case 92: break;
          case 7: 
            { return newSymbol("COLON");
            }
          case 93: break;
          case 8: 
            { return newSymbol("SEMICOLON");
            }
          case 94: break;
          case 9: 
            { return newSymbol("CARET");
            }
          case 95: break;
          case 10: 
            { return newSymbol("EQUAL");
            }
          case 96: break;
          case 11: 
            { return newSymbol("PLUS");
            }
          case 97: break;
          case 12: 
            { return newSymbol("MINUS");
            }
          case 98: break;
          case 13: 
            { return newSymbol("MULTIPLY");
            }
          case 99: break;
          case 14: 
            { return newSymbol("DIVIDE");
            }
          case 100: break;
          case 15: 
            { return newSymbol("LPAR");
            }
          case 101: break;
          case 16: 
            { return newSymbol("RPAR");
            }
          case 102: break;
          case 17: 
            { return newSymbol("LBRA");
            }
          case 103: break;
          case 18: 
            { return newSymbol("RBRA");
            }
          case 104: break;
          case 19: 
            { return newSymbol("LT");
            }
          case 105: break;
          case 20: 
            { return newSymbol("GT");
            }
          case 106: break;
          case 21: 
            { return newSymbol("SINGLEQUOTE");
            }
          case 107: break;
          case 22: 
            { return newSymbol("DOUBLEQUOTE");
            }
          case 108: break;
          case 23: 
            { return newSymbol("DOUBLEDOT");
            }
          case 109: break;
          case 24: 
            { return newSymbol("ASSIGN");
            }
          case 110: break;
          case 25: 
            { return newSymbol("LE");
            }
          case 111: break;
          case 26: 
            { return newSymbol("DIFF");
            }
          case 112: break;
          case 27: 
            { return newSymbol("GE");
            }
          case 113: break;
          case 28: 
            { return newSymbol("NUMREAL");
            }
          case 114: break;
          case 29: 
            { return newSymbol("COMMENT");
            }
          case 115: break;
          case 30: 
            { return newSymbol("DO");
            }
          case 116: break;
          case 31: 
            { return newSymbol("IN");
            }
          case 117: break;
          case 32: 
            { return newSymbol("IF");
            }
          case 118: break;
          case 33: 
            { return newSymbol("OR");
            }
          case 119: break;
          case 34: 
            { return newSymbol("OF");
            }
          case 120: break;
          case 35: 
            { return newSymbol("TO");
            }
          case 121: break;
          case 36: 
            { return newSymbol("CHR");
            }
          case 122: break;
          case 37: 
            { return newSymbol("END");
            }
          case 123: break;
          case 38: 
            { return newSymbol("AND");
            }
          case 124: break;
          case 39: 
            { return newSymbol("ASM");
            }
          case 125: break;
          case 40: 
            { return newSymbol("NIL");
            }
          case 126: break;
          case 41: 
            { return newSymbol("NOT");
            }
          case 127: break;
          case 42: 
            { return newSymbol("DIV");
            }
          case 128: break;
          case 43: 
            { return newSymbol("SET");
            }
          case 129: break;
          case 44: 
            { return newSymbol("SHR");
            }
          case 130: break;
          case 45: 
            { return newSymbol("SHL");
            }
          case 131: break;
          case 46: 
            { return newSymbol("MOD");
            }
          case 132: break;
          case 47: 
            { return newSymbol("VAR");
            }
          case 133: break;
          case 48: 
            { return newSymbol("FOR");
            }
          case 134: break;
          case 49: 
            { return newSymbol("XOR");
            }
          case 135: break;
          case 50: 
            { return newSymbol("STRINGCHARACTER");
            }
          case 136: break;
          case 51: 
            { return newSymbol("ELSE");
            }
          case 137: break;
          case 52: 
            { return newSymbol("REAL");
            }
          case 138: break;
          case 53: 
            { return newSymbol("GOTO");
            }
          case 139: break;
          case 54: 
            { return newSymbol("CASE");
            }
          case 140: break;
          case 55: 
            { return newSymbol("CHAR");
            }
          case 141: break;
          case 56: 
            { return newSymbol("TRUE");
            }
          case 142: break;
          case 57: 
            { return newSymbol("TYPE");
            }
          case 143: break;
          case 58: 
            { return newSymbol("THEN");
            }
          case 144: break;
          case 59: 
            { return newSymbol("UNIT");
            }
          case 145: break;
          case 60: 
            { return newSymbol("USES");
            }
          case 146: break;
          case 61: 
            { return newSymbol("WITH");
            }
          case 147: break;
          case 62: 
            { return newSymbol("FILE");
            }
          case 148: break;
          case 63: 
            { return newSymbol("ARRAY");
            }
          case 149: break;
          case 64: 
            { return newSymbol("BEGIN");
            }
          case 150: break;
          case 65: 
            { return newSymbol("LABEL");
            }
          case 151: break;
          case 66: 
            { return newSymbol("CONST");
            }
          case 152: break;
          case 67: 
            { return newSymbol("UNTIL");
            }
          case 153: break;
          case 68: 
            { return newSymbol("WHILE");
            }
          case 154: break;
          case 69: 
            { return newSymbol("FALSE");
            }
          case 155: break;
          case 70: 
            { return newSymbol("DOWNTO");
            }
          case 156: break;
          case 71: 
            { return newSymbol("RECORD");
            }
          case 157: break;
          case 72: 
            { return newSymbol("REPEAT");
            }
          case 158: break;
          case 73: 
            { return newSymbol("STRING");
            }
          case 159: break;
          case 74: 
            { return newSymbol("INLINE");
            }
          case 160: break;
          case 75: 
            { return newSymbol("OBJECT");
            }
          case 161: break;
          case 76: 
            { return newSymbol("FOWARD");
            }
          case 162: break;
          case 77: 
            { return newSymbol("PACKED");
            }
          case 163: break;
          case 78: 
            { return newSymbol("BOOLEAN");
            }
          case 164: break;
          case 79: 
            { return newSymbol("INTEGER");
            }
          case 165: break;
          case 80: 
            { return newSymbol("PROGRAM");
            }
          case 166: break;
          case 81: 
            { return newSymbol("FUNCTION");
            }
          case 167: break;
          case 82: 
            { return newSymbol("INTERFACE");
            }
          case 168: break;
          case 83: 
            { return newSymbol("PROCEDURE");
            }
          case 169: break;
          case 84: 
            { return newSymbol("DESTRUCTOR");
            }
          case 170: break;
          case 85: 
            { return newSymbol("CONSTRUCTOR");
            }
          case 171: break;
          case 86: 
            { return newSymbol("IMPLEMENTATION");
            }
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
