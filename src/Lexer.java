/* The following code was generated by JFlex 1.3.5 on 13/03/17 10:00 */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.ComplexSymbolFactory;
import java.io.InputStreamReader;
import java_cup.runtime.Symbol;
import java.lang.*;
import cup.example.*;
import java.io.FileInputStream;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 13/03/17 10:00 from the specification file
 * <tt>file:/home/ariel.ferreira/Downloads/marotagem/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 0;
  final public static int YYINITIAL = 0;

  /**
   * Translates characters to character classes
   */
  final private static String yycmap_packed =
          "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\31\2\30\1\32"+
                  "\3\30\1\27\1\17\1\20\1\15\1\13\1\6\1\14\1\5\1\16"+
                  "\1\25\11\4\1\7\1\10\1\23\1\12\1\24\2\30\1\35\1\44"+
                  "\1\51\1\37\1\26\1\57\1\45\1\52\1\46\1\61\1\62\1\50"+
                  "\1\43\1\36\1\47\1\60\1\3\1\40\1\42\1\53\1\54\1\55"+
                  "\1\56\1\63\1\41\1\3\1\21\1\30\1\22\1\11\2\30\1\35"+
                  "\1\44\1\51\1\37\1\26\1\57\1\45\1\52\1\46\1\61\1\62"+
                  "\1\50\1\43\1\36\1\47\1\60\1\3\1\40\1\42\1\53\1\54"+
                  "\1\55\1\56\1\63\1\41\1\3\1\33\1\2\1\34\202\30\uff00\0";

  /**
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /**
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = {
          0,    52,    52,   104,   104,   156,   208,    52,   260,    52,
          52,    52,    52,    52,    52,    52,   312,    52,    52,    52,
          364,   416,   468,   520,   572,   624,   676,   728,   780,   832,
          884,   936,   988,  1040,  1092,  1144,  1196,  1248,  1300,  1352,
          1404,  1456,  1508,  1560,  1612,  1664,  1716,    52,    52,   624,
          52,    52,    52,   468,  1768,  1820,  1872,  1872,  1924,    52,
          1976,  2028,  2080,  2132,  2184,  2236,  2288,  2340,  2392,  2444,
          2496,  2548,  2600,  2652,  2704,  2756,  2808,  2860,   104,   104,
          2912,   104,  2964,  3016,  3068,  3120,  3172,  3224,   104,  3276,
          3328,  3380,  3432,  3484,  3536,  3588,  3640,  3692,  3744,  3796,
          3848,  3900,  3952,  3952,  4004,   104,  4056,  4108,  4108,  4160,
          104,  4212,   104,   104,   104,  4264,   104,  4316,  4368,  4420,
          4472,   104,   104,   104,  4524,   104,  4576,  4628,  4680,  4732,
          4784,  4836,  4888,  4940,  4992,  5044,  5096,  5148,  5200,  5252,
          5304,  5356,  5408,   104,  5460,  5512,  5564,  5616,   104,  5668,
          5720,  5772,  5824,   104,   104,  5876,   624,  5928,  5980,  6032,
          104,  6084,  6136,  6188,  6240,  6292,   104,  6344,  6396,  6448,
          6500,  6552,   104,  6604,   104,   104,   104,   104,   104,  6656,
          104,   104,  6708,  6760,   104,  6812,  6864,  6916,  6968,  7020,
          7072,   104,  7124,  7176,  7228,  7280,  7332,   104,  7384,  7436,
          7488,  7540,  7592,  7644,   104,  7696,   104,   104,   104,  7748,
          7800,  7852,  7904,  7956,  8008,  8060,   104,   104,   104,   104,
          8112,   104,  8164,  8216,  8268,   104,  8320,   104,  8372,   104,
          8424,  8476,  8528,   104,  8580,   104,  8632,  8684,  8736,   104,
          8788,  8840,  8892,  8944,  8996,   104,  9048,  9100,   104,  9152,
          9204,   104,   104,  9256,  9308,  9360,   104,  9412,  9464,   104
  };

  /**
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 =
          "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
                  "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
                  "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
                  "\1\2\1\3\1\2\1\32\1\2\1\33\1\34\1\35"+
                  "\1\36\1\5\1\37\1\40\1\41\1\42\1\43\1\44"+
                  "\1\45\1\46\1\5\1\47\1\50\1\51\1\52\1\53"+
                  "\1\54\2\5\1\55\66\0\3\5\20\0\2\5\6\0"+
                  "\27\5\2\0\1\56\1\0\1\6\1\57\17\0\1\6"+
                  "\1\56\42\0\1\60\70\0\1\61\66\0\1\62\60\0"+
                  "\1\63\11\0\1\64\51\0\1\65\53\0\1\56\1\0"+
                  "\1\66\1\57\17\0\1\66\1\56\37\0\3\5\20\0"+
                  "\2\5\6\0\1\5\1\67\11\5\1\70\13\5\2\0"+
                  "\25\71\1\72\34\71\15\62\1\73\16\62\1\74\27\62"+
                  "\2\0\3\5\20\0\2\5\6\0\1\5\1\75\1\5"+
                  "\1\76\1\5\1\77\21\5\2\0\3\5\20\0\2\5"+
                  "\6\0\11\5\1\100\1\101\14\5\2\0\3\5\20\0"+
                  "\1\5\1\102\6\0\11\5\1\103\1\104\14\5\2\0"+
                  "\3\5\20\0\1\5\1\105\6\0\27\5\2\0\3\5"+
                  "\20\0\1\5\1\106\6\0\15\5\1\107\1\110\10\5"+
                  "\2\0\3\5\20\0\2\5\6\0\12\5\1\111\14\5"+
                  "\2\0\3\5\20\0\1\5\1\112\6\0\12\5\1\113"+
                  "\14\5\2\0\3\5\20\0\2\5\6\0\12\5\1\114"+
                  "\14\5\2\0\3\5\20\0\2\5\6\0\1\5\1\115"+
                  "\4\5\1\116\13\5\1\117\4\5\2\0\3\5\20\0"+
                  "\2\5\6\0\3\5\1\120\3\5\1\121\12\5\1\122"+
                  "\4\5\2\0\3\5\20\0\2\5\6\0\1\123\26\5"+
                  "\2\0\3\5\20\0\2\5\6\0\1\124\11\5\1\125"+
                  "\2\5\1\126\11\5\2\0\3\5\20\0\2\5\6\0"+
                  "\3\5\1\127\1\130\5\5\1\131\2\5\1\132\11\5"+
                  "\2\0\3\5\20\0\2\5\6\0\1\5\1\133\3\5"+
                  "\1\134\21\5\2\0\3\5\20\0\2\5\6\0\1\135"+
                  "\26\5\2\0\3\5\20\0\2\5\6\0\11\5\1\136"+
                  "\3\5\1\137\11\5\2\0\3\5\20\0\2\5\6\0"+
                  "\1\140\10\5\1\141\1\142\4\5\1\143\7\5\2\0"+
                  "\3\5\20\0\2\5\6\0\1\144\2\5\1\145\23\5"+
                  "\2\0\3\5\20\0\2\5\6\0\12\5\1\146\14\5"+
                  "\4\0\1\147\6\0\2\150\10\0\1\147\42\0\1\151"+
                  "\20\0\1\151\40\0\3\5\20\0\2\5\6\0\2\5"+
                  "\1\152\24\5\2\0\3\5\20\0\2\5\6\0\5\5"+
                  "\1\153\21\5\2\0\25\154\1\155\34\154\15\62\1\156"+
                  "\2\62\1\74\13\62\1\0\27\62\2\0\3\5\20\0"+
                  "\2\5\6\0\2\5\1\157\24\5\2\0\3\5\20\0"+
                  "\2\5\6\0\3\5\1\160\23\5\2\0\3\5\20\0"+
                  "\2\5\6\0\6\5\1\161\20\5\2\0\3\5\20\0"+
                  "\2\5\6\0\13\5\1\162\13\5\2\0\3\5\20\0"+
                  "\2\5\6\0\16\5\1\163\10\5\2\0\3\5\20\0"+
                  "\2\5\6\0\5\5\1\164\21\5\2\0\3\5\20\0"+
                  "\2\5\6\0\20\5\1\165\6\5\2\0\3\5\20\0"+
                  "\2\5\6\0\21\5\1\166\5\5\2\0\3\5\20\0"+
                  "\2\5\6\0\1\167\13\5\1\170\6\5\1\171\3\5"+
                  "\2\0\3\5\20\0\2\5\6\0\16\5\1\172\10\5"+
                  "\2\0\3\5\20\0\2\5\6\0\3\5\1\173\7\5"+
                  "\1\174\13\5\2\0\3\5\20\0\2\5\6\0\3\5"+
                  "\1\175\23\5\2\0\3\5\20\0\2\5\6\0\2\5"+
                  "\1\176\24\5\2\0\3\5\20\0\2\5\6\0\10\5"+
                  "\1\177\16\5\2\0\3\5\20\0\2\5\6\0\12\5"+
                  "\1\200\14\5\2\0\3\5\20\0\2\5\6\0\16\5"+
                  "\1\201\10\5\2\0\3\5\20\0\2\5\6\0\13\5"+
                  "\1\202\2\5\1\203\10\5\2\0\3\5\20\0\2\5"+
                  "\6\0\23\5\1\204\3\5\2\0\3\5\20\0\2\5"+
                  "\6\0\24\5\1\205\2\5\2\0\3\5\20\0\2\5"+
                  "\6\0\7\5\1\206\17\5\2\0\3\5\20\0\2\5"+
                  "\6\0\5\5\1\207\21\5\2\0\3\5\20\0\2\5"+
                  "\6\0\1\5\1\210\25\5\2\0\3\5\20\0\2\5"+
                  "\6\0\1\211\26\5\2\0\3\5\20\0\2\5\6\0"+
                  "\17\5\1\212\7\5\2\0\3\5\20\0\2\5\6\0"+
                  "\23\5\1\213\3\5\2\0\3\5\20\0\1\5\1\214"+
                  "\6\0\27\5\2\0\3\5\20\0\2\5\6\0\11\5"+
                  "\1\215\4\5\1\216\10\5\2\0\3\5\20\0\1\5"+
                  "\1\217\6\0\27\5\2\0\3\5\20\0\2\5\6\0"+
                  "\3\5\1\220\23\5\2\0\3\5\20\0\2\5\6\0"+
                  "\16\5\1\221\10\5\2\0\3\5\20\0\2\5\6\0"+
                  "\11\5\1\222\15\5\2\0\3\5\20\0\2\5\6\0"+
                  "\13\5\1\223\13\5\2\0\3\5\20\0\2\5\6\0"+
                  "\13\5\1\224\13\5\2\0\3\5\20\0\2\5\6\0"+
                  "\3\5\1\225\15\5\1\226\5\5\2\0\3\5\20\0"+
                  "\2\5\6\0\1\5\1\227\25\5\2\0\3\5\20\0"+
                  "\2\5\6\0\14\5\1\230\12\5\2\0\3\5\20\0"+
                  "\2\5\6\0\12\5\1\231\14\5\2\0\3\5\20\0"+
                  "\2\5\6\0\3\5\1\232\23\5\4\0\1\147\20\0"+
                  "\1\147\40\0\1\56\1\0\1\151\20\0\1\151\1\56"+
                  "\37\0\3\5\20\0\1\5\1\233\6\0\27\5\2\0"+
                  "\25\154\1\234\34\154\15\62\1\156\2\62\1\235\13\62"+
                  "\1\74\27\62\2\0\3\5\20\0\2\5\6\0\1\236"+
                  "\26\5\2\0\3\5\20\0\2\5\6\0\16\5\1\237"+
                  "\10\5\2\0\3\5\20\0\2\5\6\0\1\5\1\240"+
                  "\25\5\2\0\3\5\20\0\2\5\6\0\13\5\1\241"+
                  "\13\5\2\0\3\5\20\0\2\5\6\0\12\5\1\242"+
                  "\14\5\2\0\3\5\20\0\1\5\1\243\6\0\27\5"+
                  "\2\0\3\5\20\0\2\5\6\0\11\5\1\244\15\5"+
                  "\2\0\3\5\20\0\2\5\6\0\11\5\1\245\15\5"+
                  "\2\0\3\5\20\0\2\5\6\0\13\5\1\246\13\5"+
                  "\2\0\3\5\20\0\2\5\6\0\12\5\1\247\14\5"+
                  "\2\0\3\5\20\0\2\5\6\0\11\5\1\250\15\5"+
                  "\2\0\3\5\20\0\1\5\1\251\6\0\27\5\2\0"+
                  "\3\5\20\0\2\5\6\0\13\5\1\252\13\5\2\0"+
                  "\3\5\20\0\1\5\1\253\6\0\27\5\2\0\3\5"+
                  "\20\0\1\5\1\254\6\0\27\5\2\0\3\5\20\0"+
                  "\1\5\1\255\6\0\27\5\2\0\3\5\20\0\2\5"+
                  "\6\0\5\5\1\256\21\5\2\0\3\5\20\0\2\5"+
                  "\6\0\3\5\1\257\23\5\2\0\3\5\20\0\1\5"+
                  "\1\260\6\0\27\5\2\0\3\5\20\0\1\5\1\261"+
                  "\6\0\27\5\2\0\3\5\20\0\2\5\6\0\1\5"+
                  "\1\262\25\5\2\0\3\5\20\0\2\5\6\0\16\5"+
                  "\1\263\10\5\2\0\3\5\20\0\2\5\6\0\11\5"+
                  "\1\264\15\5\2\0\3\5\20\0\2\5\6\0\5\5"+
                  "\1\265\21\5\2\0\3\5\20\0\2\5\6\0\15\5"+
                  "\1\266\11\5\2\0\3\5\20\0\2\5\6\0\13\5"+
                  "\1\267\13\5\2\0\3\5\20\0\2\5\6\0\5\5"+
                  "\1\270\21\5\2\0\3\5\20\0\1\5\1\271\6\0"+
                  "\27\5\2\0\3\5\20\0\2\5\6\0\1\272\26\5"+
                  "\2\0\3\5\20\0\2\5\6\0\14\5\1\273\12\5"+
                  "\2\0\3\5\20\0\2\5\6\0\25\5\1\274\1\5"+
                  "\2\0\3\5\20\0\2\5\6\0\10\5\1\275\3\5"+
                  "\1\276\12\5\2\0\25\154\1\234\2\154\1\277\31\154"+
                  "\2\0\3\5\20\0\2\5\6\0\4\5\1\300\22\5"+
                  "\2\0\3\5\20\0\2\5\6\0\3\5\1\301\23\5"+
                  "\2\0\3\5\20\0\2\5\6\0\16\5\1\302\10\5"+
                  "\2\0\3\5\20\0\2\5\6\0\3\5\1\303\23\5"+
                  "\2\0\3\5\20\0\2\5\6\0\1\304\26\5\2\0"+
                  "\3\5\20\0\2\5\6\0\1\5\1\305\25\5\2\0"+
                  "\3\5\20\0\2\5\6\0\1\5\1\306\25\5\2\0"+
                  "\3\5\20\0\1\5\1\307\6\0\27\5\2\0\3\5"+
                  "\20\0\2\5\6\0\1\5\1\310\25\5\2\0\3\5"+
                  "\20\0\2\5\6\0\3\5\1\311\4\5\1\312\16\5"+
                  "\2\0\3\5\20\0\1\5\1\313\6\0\27\5\2\0"+
                  "\3\5\20\0\2\5\6\0\14\5\1\314\12\5\2\0"+
                  "\3\5\20\0\2\5\6\0\13\5\1\315\13\5\2\0"+
                  "\3\5\20\0\2\5\6\0\16\5\1\316\10\5\2\0"+
                  "\3\5\20\0\2\5\6\0\13\5\1\317\13\5\2\0"+
                  "\3\5\20\0\1\5\1\320\6\0\27\5\2\0\3\5"+
                  "\20\0\1\5\1\321\6\0\27\5\2\0\3\5\20\0"+
                  "\2\5\6\0\3\5\1\322\23\5\2\0\3\5\20\0"+
                  "\2\5\6\0\16\5\1\323\10\5\2\0\3\5\20\0"+
                  "\1\5\1\324\6\0\27\5\2\0\3\5\20\0\2\5"+
                  "\6\0\3\5\1\325\23\5\2\0\3\5\20\0\1\5"+
                  "\1\326\6\0\27\5\2\0\2\154\1\327\20\154\1\234"+
                  "\1\154\1\234\34\154\2\0\3\5\20\0\2\5\6\0"+
                  "\17\5\1\330\7\5\2\0\3\5\20\0\2\5\6\0"+
                  "\12\5\1\331\14\5\2\0\3\5\20\0\2\5\6\0"+
                  "\2\5\1\332\24\5\2\0\3\5\20\0\2\5\6\0"+
                  "\16\5\1\333\10\5\2\0\3\5\20\0\2\5\6\0"+
                  "\10\5\1\334\16\5\2\0\3\5\20\0\2\5\6\0"+
                  "\1\335\26\5\2\0\3\5\20\0\1\5\1\336\6\0"+
                  "\27\5\2\0\3\5\20\0\2\5\6\0\22\5\1\337"+
                  "\4\5\2\0\3\5\20\0\1\5\1\340\6\0\27\5"+
                  "\2\0\3\5\20\0\2\5\6\0\6\5\1\341\20\5"+
                  "\2\0\3\5\20\0\2\5\6\0\16\5\1\342\10\5"+
                  "\2\0\3\5\20\0\2\5\6\0\3\5\1\343\23\5"+
                  "\2\0\3\5\20\0\2\5\6\0\2\5\1\344\24\5"+
                  "\2\0\3\5\20\0\2\5\6\0\11\5\1\345\15\5"+
                  "\2\0\3\5\20\0\2\5\6\0\2\5\1\346\24\5"+
                  "\2\0\3\5\20\0\2\5\6\0\1\347\26\5\2\0"+
                  "\3\5\20\0\2\5\6\0\2\5\1\350\24\5\2\0"+
                  "\2\154\1\327\20\154\1\327\1\154\1\234\2\154\1\277"+
                  "\31\154\2\0\3\5\20\0\2\5\6\0\14\5\1\351"+
                  "\12\5\2\0\3\5\20\0\2\5\6\0\1\5\1\352"+
                  "\25\5\2\0\3\5\20\0\2\5\6\0\1\353\26\5"+
                  "\2\0\3\5\20\0\2\5\6\0\3\5\1\354\23\5"+
                  "\2\0\3\5\20\0\1\5\1\355\6\0\27\5\2\0"+
                  "\3\5\20\0\2\5\6\0\17\5\1\356\7\5\2\0"+
                  "\3\5\20\0\2\5\6\0\12\5\1\357\14\5\2\0"+
                  "\3\5\20\0\2\5\6\0\6\5\1\360\20\5\2\0"+
                  "\3\5\20\0\2\5\6\0\17\5\1\361\7\5\2\0"+
                  "\3\5\20\0\2\5\6\0\16\5\1\362\10\5\2\0"+
                  "\3\5\20\0\2\5\6\0\14\5\1\363\12\5\2\0"+
                  "\3\5\20\0\2\5\6\0\1\5\1\364\25\5\2\0"+
                  "\3\5\20\0\2\5\6\0\14\5\1\365\12\5\2\0"+
                  "\3\5\20\0\2\5\6\0\1\5\1\366\25\5\2\0"+
                  "\3\5\20\0\2\5\6\0\3\5\1\367\23\5\2\0"+
                  "\3\5\20\0\2\5\6\0\12\5\1\370\14\5\2\0"+
                  "\3\5\20\0\1\5\1\371\6\0\27\5\2\0\3\5"+
                  "\20\0\2\5\6\0\16\5\1\372\10\5\2\0\3\5"+
                  "\20\0\2\5\6\0\16\5\1\373\10\5\2\0\3\5"+
                  "\20\0\1\5\1\374\6\0\27\5\2\0\3\5\20\0"+
                  "\2\5\6\0\3\5\1\375\23\5\2\0\3\5\20\0"+
                  "\2\5\6\0\1\376\26\5\2\0\3\5\20\0\2\5"+
                  "\6\0\12\5\1\377\14\5\2\0\3\5\20\0\2\5"+
                  "\6\0\16\5\1\u0100\10\5\2\0\3\5\20\0\2\5"+
                  "\6\0\3\5\1\u0101\23\5\2\0\3\5\20\0\2\5"+
                  "\6\0\11\5\1\u0102\15\5\2\0\3\5\20\0\2\5"+
                  "\6\0\12\5\1\u0103\14\5\2\0\3\5\20\0\2\5"+
                  "\6\0\1\5\1\u0104\25\5";

  /**
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
          "Unkown internal scanner error",
          "Internal error: unknown state",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
          0,  9,  9,  1,  1,  1,  1,  9,  1,  9,  9,  9,  9,  9,  9,  9,
          1,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  9,
          9,  0,  9,  9,  9,  1,  1,  1,  0,  1,  0,  9,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  0,  1,  0,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
  public Lexer(ComplexSymbolFactory sf, FileInputStream is) {
    this(is);
    symbolFactory = sf;
  }
  public Lexer(ComplexSymbolFactory sf, java.io.Reader reader) {
    this(reader);
    symbolFactory = sf;
  }

  private StringBuffer sb;
  private ComplexSymbolFactory symbolFactory;
  private int csline,cscolumn;

  private Symbol symbol(String name, int code) {
    return symbolFactory.newSymbol(name, code,
            new Location(yyline+1, yycolumn+1, yychar),
            new Location(yyline+1, yycolumn+yylength(), yychar+yylength()));
  }
  public Symbol symbol(String nome, int code, Integer lexem){
    return symbolFactory.newSymbol(nome, code,
            new Location(yyline+1, yycolumn +1, yychar),
            new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
  }
  public Symbol symbol(String nome, int code, Double lexem){
    return symbolFactory.newSymbol(nome, code,
            new Location(yyline+1, yycolumn +1, yychar),
            new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
  }
  public Symbol symbol(String nome, int code, String lexem){
    return symbolFactory.newSymbol(nome, code,
            new Location(yyline+1, yycolumn +1, yychar),
            new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
  }

  protected void emit_warning(String message){
    System.out.println("scanner warning: " + message + " at : 2 "+
            (yyline+1) + " " + (yycolumn+1) + " " + yychar);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[9516];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /**
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead,
              yy_buffer, 0,
              yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead,
            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
           yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
          case '\u000B':
          case '\u000C':
          case '\u0085':
          case '\u2028':
          case '\u2029':
            yyline++;
            yycolumn = 0;
            yy_r = false;
            break;
          case '\r':
            yyline++;
            yycolumn = 0;
            yy_r = true;
            break;
          case '\n':
            if (yy_r)
              yy_r = false;
            else {
              yyline++;
              yycolumn = 0;
            }
            break;
          default:
            yy_r = false;
            yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof)
            yy_peek = false;
          else
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos =
              yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state;
            yy_markedPos_l = yy_currentPos_l;
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 88:
        {  return symbol("TO", TO);  }
        case 261: break;
        case 81:
        {  return symbol("OF", OF);  }
        case 262: break;
        case 79:
        {  return symbol("OR", OR);  }
        case 263: break;
        case 78:
        {  return symbol("IF", IF);  }
        case 264: break;
        case 76:
        {  return symbol("IN", IN);  }
        case 265: break;
        case 67:
        {  return symbol("DO", DO);  }
        case 266: break;
        case 52:
        {  return symbol("GE", GE);  }
        case 267: break;
        case 50:
        {  return symbol("LE", LE);  }
        case 268: break;
        case 21:
        {  return symbol("GT", GT);  }
        case 269: break;
        case 20:
        {  return symbol("LT", LT);  }
        case 270: break;
        case 4:
        case 23:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 54:
        case 55:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 77:
        case 80:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 106:
        case 111:
        case 115:
        case 117:
        case 118:
        case 119:
        case 120:
        case 124:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 141:
        case 142:
        case 144:
        case 145:
        case 146:
        case 147:
        case 149:
        case 150:
        case 151:
        case 152:
        case 157:
        case 158:
        case 159:
        case 161:
        case 162:
        case 163:
        case 164:
        case 165:
        case 167:
        case 168:
        case 169:
        case 170:
        case 171:
        case 173:
        case 179:
        case 182:
        case 183:
        case 185:
        case 186:
        case 187:
        case 188:
        case 189:
        case 192:
        case 193:
        case 194:
        case 195:
        case 196:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 215:
        case 220:
        case 222:
        case 223:
        case 224:
        case 226:
        case 228:
        case 230:
        case 231:
        case 232:
        case 234:
        case 236:
        case 237:
        case 238:
        case 240:
        case 241:
        case 242:
        case 243:
        case 244:
        case 246:
        case 247:
        case 249:
        case 250:
        case 253:
        case 254:
        case 255:
        case 257:
        case 258:
        {  return symbol("ID", ID);  }
        case 271: break;
        case 1:
        case 24:
        case 25:
        {  emit_warning("Caracter não reconhecido " + yytext() + " -- ignorado");  }
        case 272: break;
        case 207:
        {  return symbol("WHILE", WHILE);  }
        case 273: break;
        case 256:
        {  return symbol("CONSTRUCTOR", CONSTRUCTOR);  }
        case 274: break;
        case 252:
        {  return symbol("DESTRUCTOR", DESTRUCTOR);  }
        case 275: break;
        case 206:
        {  return symbol("UNTIL", UNTIL);  }
        case 276: break;
        case 235:
        {  return symbol("INTEGER", INTEGER);  }
        case 277: break;
        case 14:
        {  return symbol("MULTIPLY", MULTIPLY);  }
        case 278: break;
        case 219:
        {  return symbol("STRING", STRING);  }
        case 279: break;
        case 48:
        {  return symbol("ASSIGN", ASSIGN);  }
        case 280: break;
        case 248:
        {  return symbol("INTERFACE", INTERFACE);  }
        case 281: break;
        case 239:
        {  return symbol("PROGRAM", PROGRAM);  }
        case 282: break;
        case 233:
        {  return symbol("BOOLEAN", BOOLEAN);  }
        case 283: break;
        case 227:
        {  return symbol("FOWARD", FOWARD);  }
        case 284: break;
        case 216:
        {  return symbol("DOWNTO", DOWNTO);  }
        case 285: break;
        case 221:
        {  return symbol("INLINE", INLINE);  }
        case 286: break;
        case 59:
        case 156:
        {  return symbol("COMMENT", COMMENT);  }
        case 287: break;
        case 13:
        {  return symbol("MINUS", MINUS);  }
        case 288: break;
        case 47:
        {  return symbol("DOUBLEDOT", DOUBLEDOT);  }
        case 289: break;
        case 204:
        {  return symbol("LABEL", LABEL);  }
        case 290: break;
        case 15:
        {  return symbol("DIVIDE", DIVIDE);  }
        case 291: break;
        case 208:
        {  return symbol("FALSE", FALSE);  }
        case 292: break;
        case 251:
        {  return symbol("PROCEDURE", PROCEDURE);  }
        case 293: break;
        case 11:
        {  return symbol("EQUAL", EQUAL);  }
        case 294: break;
        case 217:
        {  return symbol("RECORD", RECORD);  }
        case 295: break;
        case 218:
        {  return symbol("REPEAT", REPEAT);  }
        case 296: break;
        case 245:
        {  return symbol("FUNCTION", FUNCTION);  }
        case 297: break;
        case 9:
        {  return symbol("SEMICOLON", SEMICOLON);  }
        case 298: break;
        case 8:
        {  return symbol("COLON", COLON);  }
        case 299: break;
        case 7:
        {  return symbol("COMMA", COMMA);  }
        case 300: break;
        case 10:
        {  return symbol("CARET", CARET);  }
        case 301: break;
        case 205:
        {  return symbol("CONST", CONST);  }
        case 302: break;
        case 225:
        {  return symbol("OBJECT", OBJECT);  }
        case 303: break;
        case 197:
        {  return symbol("BEGIN", BEGIN);  }
        case 304: break;
        case 259:
        {  return symbol("IMPLEMENTATION", IMPLEMENTATION);  }
        case 305: break;
        case 229:
        {  return symbol("PACKED", PACKED);  }
        case 306: break;
        case 191:
        {  return symbol("ARRAY", ARRAY);  }
        case 307: break;
        case 53:
        case 102:
        case 104:
        {  return symbol("NUMREAL", NUMREAL, Double.parseDouble(yytext()));  }
        case 308: break;
        case 5:
        case 22:
        {  return symbol("NUMINT", NUMINT, Integer.parseInt(yytext()));  }
        case 309: break;
        case 105:
        {  return symbol("END", END);  }
        case 310: break;
        case 57:
        case 108:
        {  return symbol("CHR", CHR);  }
        case 311: break;
        case 6:
        {  return symbol("DOT", DOT);  }
        case 312: break;
        case 110:
        {  return symbol("AND", AND);  }
        case 313: break;
        case 112:
        {  return symbol("ASM", ASM);  }
        case 314: break;
        case 113:
        {  return symbol("NIL", NIL);  }
        case 315: break;
        case 114:
        {  return symbol("NOT", NOT);  }
        case 316: break;
        case 116:
        {  return symbol("DIV", DIV);  }
        case 317: break;
        case 121:
        {  return symbol("SET", SET);  }
        case 318: break;
        case 122:
        {  return symbol("SHR", SHR);  }
        case 319: break;
        case 123:
        {  return symbol("SHL", SHL);  }
        case 320: break;
        case 125:
        {  return symbol("MOD", MOD);  }
        case 321: break;
        case 143:
        {  return symbol("VAR", VAR);  }
        case 322: break;
        case 148:
        {  return symbol("FOR", FOR);  }
        case 323: break;
        case 153:
        {  return symbol("XOR", XOR);  }
        case 324: break;
        case 155:
        case 214:
        {  return symbol("STR", STR);  }
        case 325: break;
        case 51:
        {  return symbol("DIFF", DIFF);  }
        case 326: break;
        case 19:
        {  return symbol("RBRA", RBRA);  }
        case 327: break;
        case 12:
        {  return symbol("PLUS", PLUS);  }
        case 328: break;
        case 16:
        {  return symbol("LPAR", LPAR);  }
        case 329: break;
        case 17:
        {  return symbol("RPAR", RPAR);  }
        case 330: break;
        case 18:
        {  return symbol("LBRA", LBRA);  }
        case 331: break;
        case 154:
        {  return symbol("ELSE", ELSE);  }
        case 332: break;
        case 160:
        {  return symbol("REAL", REAL);  }
        case 333: break;
        case 166:
        {  return symbol("GOTO", GOTO);  }
        case 334: break;
        case 172:
        {  return symbol("CASE", CASE);  }
        case 335: break;
        case 174:
        {  return symbol("CHAR", CHAR);  }
        case 336: break;
        case 175:
        {  return symbol("TRUE", TRUE);  }
        case 337: break;
        case 176:
        {  return symbol("TYPE", TYPE);  }
        case 338: break;
        case 177:
        {  return symbol("THEN", THEN);  }
        case 339: break;
        case 178:
        {  return symbol("UNIT", UNIT);  }
        case 340: break;
        case 180:
        {  return symbol("USES", USES);  }
        case 341: break;
        case 181:
        {  return symbol("WITH", WITH);  }
        case 342: break;
        case 184:
        {  return symbol("FILE", FILE);  }
        case 343: break;
        case 2:
        case 3:
        {   }
        case 344: break;
        default:
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
            {     return symbol("EOF", sym.EOF);
            }
          }
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
