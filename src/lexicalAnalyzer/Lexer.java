/* The following code was generated by JFlex 1.3.5 on 29/03/17 21:19 */

package lexicalAnalyzer;

import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.ComplexSymbolFactory;
import java.io.IOException;
import java_cup.runtime.Symbol;
import java.lang.*;
import syntacticAnalyzer.sym;
import java.io.FileInputStream;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 29/03/17 21:19 from the specification file
 * <tt>file:/home/ariel/IdeaProjects/TinyPascalCompiler/src/lexicalAnalyzer/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\1\1\0\1\44"+
    "\4\0\1\43\1\2\1\6\1\3\1\12\1\35\1\13\1\34\1\14"+
    "\1\50\11\11\1\36\1\37\1\26\1\27\1\30\2\0\1\31\1\51"+
    "\1\52\1\15\1\46\1\47\1\53\1\23\1\16\1\57\1\60\1\24"+
    "\1\20\1\32\1\21\1\56\1\10\1\25\1\22\1\33\1\45\1\17"+
    "\1\55\1\61\1\54\1\10\1\41\1\0\1\42\1\40\2\0\1\31"+
    "\1\51\1\52\1\15\1\46\1\47\1\53\1\23\1\16\1\57\1\60"+
    "\1\24\1\20\1\32\1\21\1\56\1\10\1\25\1\22\1\33\1\45"+
    "\1\17\1\55\1\61\1\54\1\10\1\4\1\7\1\5\uff82\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    50,   100,   100,   150,   100,   200,   100,   250,   250, 
      300,   100,   100,   100,   350,   400,   450,   500,   550,   600, 
      650,   700,   750,   100,   800,   850,   900,   950,  1000,   100, 
     1050,   100,   100,   100,   100,  1100,   100,  1150,  1200,  1250, 
     1300,  1350,  1400,  1450,  1500,  1550,  1600,   200,  1650,  1700, 
     1750,  1800,  1850,  1900,  1950,  2000,   250,  2050,  2100,   250, 
      250,  2150,  2200,  2250,  2300,  2350,  2400,   100,   100,   100, 
     2450,  2500,  2550,  2600,  2650,   250,  2700,  2750,  2800,   100, 
      100,  2850,  2900,  2950,  3000,  3050,  3100,  3150,  3200,  3250, 
     1300,  3300,  3350,  3400,  3450,  3500,  3550,  3600,  3650,  3700, 
     3750,  3800,  3850,  3900,  3900,  3950,   250,  4000,  4050,  4100, 
     4150,  4200,   250,   250,  4250,   250,   250,  4300,   250,  4350, 
     4400,  4450,  4500,   250,  4550,   250,   250,   250,  4600,  4650, 
     4700,  4750,   100,  4800,  4850,  4900,  4950,   250,  5000,   250, 
     5050,  5100,  5150,  5200,  5250,  5300,  5350,  5400,  5450,  5500, 
     5550,  5600,  5650,   250,   200,  5700,  5750,  5800,  5850,  5900, 
     5950,  6000,  6050,   250,  6100,  6150,  6200,   250,   250,   250, 
      100,   250,   250,  6250,   250,   250,  6300,  6350,  6400,  6450, 
     6500,  6550,   250,   250,   250,   250,  6600,  6650,  6700,  6750, 
     6800,  6850,  6900,  6950,  7000,  7050,  7100,  7150,   250,  7200, 
     7250,   250,   250,  7300,   250,  7350,  7400,   250,  7450,   250, 
     7500,  7550,  7600,   250,  7650,  7700,   250,  7750,  7800,   250, 
      250,   250,   250,   250,  7850,  7900,  7950,  8000,  8050,   250, 
     8100,  8150,  8200,   250,  8250,   250,  8300,  8350,   250,  8400, 
     8450,  8500,   250,  8550,  8600,  8650,  8700,   250,  8750,   250, 
      250,  8800,  8850,  8900,   250,  8950,  9000,   250
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\12\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\12\1\55\1\56\2\12"+
    "\1\57\62\3\65\0\1\60\56\0\3\60\1\61\1\60"+
    "\1\4\54\60\7\0\3\12\3\0\11\12\3\0\3\12"+
    "\11\0\15\12\7\0\1\62\1\0\1\13\22\0\1\63"+
    "\11\0\1\62\1\0\1\13\20\0\3\12\3\0\1\12"+
    "\1\64\2\12\1\65\4\12\3\0\3\12\11\0\1\12"+
    "\1\66\13\12\7\0\3\12\3\0\3\12\1\67\5\12"+
    "\3\0\1\12\1\70\1\12\11\0\2\12\1\71\12\12"+
    "\7\0\3\12\3\0\11\12\3\0\1\72\2\12\11\0"+
    "\15\12\7\0\3\12\3\0\4\12\1\73\4\12\3\0"+
    "\3\12\11\0\15\12\7\0\3\12\3\0\10\12\1\74"+
    "\3\0\3\12\11\0\2\12\1\75\1\12\1\76\10\12"+
    "\7\0\3\12\3\0\6\12\1\77\2\12\3\0\2\12"+
    "\1\100\11\0\1\12\1\101\13\12\7\0\3\12\3\0"+
    "\11\12\3\0\1\102\2\12\11\0\15\12\7\0\3\12"+
    "\3\0\11\12\3\0\3\12\11\0\1\12\1\103\13\12"+
    "\27\0\1\104\1\105\60\0\1\106\41\0\3\12\3\0"+
    "\5\12\1\107\2\12\1\110\3\0\1\12\1\111\1\12"+
    "\11\0\15\12\7\0\3\12\3\0\1\12\1\112\2\12"+
    "\1\113\4\12\3\0\3\12\11\0\15\12\7\0\3\12"+
    "\3\0\4\12\1\114\1\12\1\115\1\12\1\116\3\0"+
    "\3\12\11\0\7\12\1\117\5\12\34\0\1\120\54\0"+
    "\1\121\32\0\43\122\1\0\16\122\7\0\3\12\3\0"+
    "\5\12\1\123\3\12\3\0\1\12\1\124\1\12\11\0"+
    "\15\12\7\0\3\12\3\0\7\12\1\125\1\12\3\0"+
    "\1\12\1\126\1\12\11\0\15\12\7\0\3\12\3\0"+
    "\1\12\1\127\2\12\1\130\4\12\3\0\1\131\2\12"+
    "\11\0\1\132\14\12\7\0\1\62\1\0\1\133\22\0"+
    "\1\63\11\0\1\62\1\0\1\133\20\0\3\12\3\0"+
    "\4\12\1\134\4\12\3\0\3\12\11\0\1\12\1\135"+
    "\13\12\7\0\3\12\3\0\4\12\1\136\1\12\1\137"+
    "\2\12\3\0\1\140\2\12\11\0\15\12\7\0\3\12"+
    "\3\0\4\12\1\141\4\12\3\0\3\12\11\0\15\12"+
    "\7\0\3\12\3\0\1\12\1\142\4\12\1\143\2\12"+
    "\3\0\3\12\11\0\15\12\7\0\3\12\3\0\10\12"+
    "\1\144\3\0\1\145\2\12\11\0\15\12\7\0\3\12"+
    "\3\0\4\12\1\146\4\12\3\0\3\12\11\0\15\12"+
    "\3\60\1\147\1\60\1\0\1\4\53\60\11\0\1\150"+
    "\2\151\34\0\1\150\22\0\1\152\36\0\1\152\20\0"+
    "\3\12\3\0\2\12\1\153\6\12\3\0\3\12\11\0"+
    "\15\12\7\0\3\12\3\0\11\12\3\0\3\12\11\0"+
    "\10\12\1\154\4\12\7\0\3\12\3\0\5\12\1\155"+
    "\3\12\3\0\3\12\11\0\15\12\7\0\3\12\3\0"+
    "\11\12\3\0\3\12\11\0\11\12\1\156\3\12\7\0"+
    "\3\12\3\0\7\12\1\157\1\12\3\0\2\12\1\160"+
    "\11\0\15\12\7\0\3\12\3\0\10\12\1\161\3\0"+
    "\3\12\11\0\15\12\7\0\3\12\3\0\1\162\10\12"+
    "\3\0\3\12\11\0\15\12\7\0\3\12\3\0\11\12"+
    "\3\0\3\12\11\0\12\12\1\163\2\12\7\0\3\12"+
    "\3\0\7\12\1\164\1\165\3\0\3\12\11\0\15\12"+
    "\7\0\3\12\3\0\10\12\1\166\3\0\3\12\11\0"+
    "\15\12\7\0\3\12\3\0\11\12\3\0\2\12\1\167"+
    "\11\0\15\12\7\0\3\12\3\0\11\12\3\0\3\12"+
    "\11\0\4\12\1\170\10\12\7\0\3\12\3\0\11\12"+
    "\3\0\1\171\2\12\11\0\5\12\1\172\3\12\1\173"+
    "\3\12\7\0\3\12\3\0\3\12\1\174\5\12\3\0"+
    "\3\12\11\0\15\12\7\0\3\12\3\0\10\12\1\175"+
    "\3\0\3\12\11\0\15\12\7\0\3\12\3\0\1\176"+
    "\10\12\3\0\3\12\11\0\15\12\7\0\3\12\3\0"+
    "\7\12\1\177\1\12\3\0\3\12\11\0\15\12\7\0"+
    "\3\12\3\0\11\12\3\0\2\12\1\200\11\0\15\12"+
    "\7\0\3\12\3\0\11\12\3\0\3\12\11\0\1\12"+
    "\1\201\13\12\7\0\3\12\3\0\11\12\3\0\3\12"+
    "\11\0\1\202\14\12\7\0\3\12\3\0\11\12\3\0"+
    "\3\12\11\0\11\12\1\203\3\12\43\204\1\205\16\204"+
    "\7\0\3\12\3\0\11\12\3\0\3\12\11\0\1\12"+
    "\1\206\13\12\7\0\3\12\3\0\1\12\1\207\7\12"+
    "\3\0\2\12\1\210\11\0\15\12\7\0\3\12\3\0"+
    "\5\12\1\211\3\12\3\0\3\12\11\0\15\12\7\0"+
    "\3\12\3\0\1\212\10\12\3\0\3\12\11\0\15\12"+
    "\7\0\3\12\3\0\7\12\1\213\1\12\3\0\3\12"+
    "\11\0\15\12\7\0\3\12\3\0\10\12\1\214\3\0"+
    "\3\12\11\0\10\12\1\215\4\12\7\0\3\12\3\0"+
    "\7\12\1\216\1\12\3\0\3\12\11\0\15\12\7\0"+
    "\3\12\3\0\11\12\3\0\1\12\1\217\1\12\11\0"+
    "\15\12\7\0\3\12\3\0\4\12\1\220\4\12\3\0"+
    "\3\12\11\0\15\12\7\0\3\12\3\0\11\12\3\0"+
    "\3\12\11\0\6\12\1\221\6\12\7\0\3\12\3\0"+
    "\11\12\3\0\1\12\1\222\1\12\11\0\15\12\7\0"+
    "\3\12\3\0\11\12\3\0\1\223\2\12\11\0\15\12"+
    "\7\0\3\12\3\0\5\12\1\224\3\12\3\0\3\12"+
    "\11\0\15\12\7\0\3\12\3\0\11\12\3\0\2\12"+
    "\1\225\11\0\15\12\7\0\3\12\3\0\11\12\3\0"+
    "\2\12\1\226\11\0\15\12\7\0\3\12\3\0\1\12"+
    "\1\227\7\12\3\0\3\12\11\0\15\12\7\0\3\12"+
    "\3\0\4\12\1\230\4\12\3\0\3\12\11\0\15\12"+
    "\7\0\3\12\3\0\11\12\3\0\3\12\11\0\5\12"+
    "\1\231\7\12\7\0\3\12\3\0\10\12\1\232\3\0"+
    "\3\12\11\0\15\12\3\60\1\147\1\60\1\4\1\233"+
    "\53\60\11\0\1\150\36\0\1\150\20\0\1\62\1\0"+
    "\1\152\34\0\1\62\1\0\1\152\20\0\3\12\3\0"+
    "\11\12\3\0\1\12\1\234\1\12\11\0\15\12\7\0"+
    "\3\12\3\0\11\12\3\0\2\12\1\235\11\0\15\12"+
    "\7\0\3\12\3\0\7\12\1\236\1\12\3\0\3\12"+
    "\11\0\15\12\7\0\3\12\3\0\1\12\1\237\7\12"+
    "\3\0\3\12\11\0\15\12\7\0\3\12\3\0\11\12"+
    "\3\0\3\12\11\0\1\12\1\240\13\12\7\0\3\12"+
    "\3\0\11\12\3\0\3\12\11\0\1\12\1\241\13\12"+
    "\7\0\3\12\3\0\1\12\1\242\7\12\3\0\3\12"+
    "\11\0\15\12\7\0\3\12\3\0\11\12\3\0\3\12"+
    "\11\0\1\12\1\243\13\12\7\0\3\12\3\0\7\12"+
    "\1\244\1\12\3\0\3\12\11\0\15\12\7\0\3\12"+
    "\3\0\4\12\1\245\4\12\3\0\3\12\11\0\15\12"+
    "\7\0\3\12\3\0\11\12\3\0\3\12\11\0\1\12"+
    "\1\246\13\12\7\0\3\12\3\0\11\12\3\0\1\247"+
    "\2\12\11\0\15\12\7\0\3\12\3\0\11\12\3\0"+
    "\1\12\1\250\1\12\11\0\15\12\7\0\3\12\3\0"+
    "\11\12\3\0\3\12\11\0\1\12\1\251\13\12\7\0"+
    "\3\12\3\0\11\12\3\0\3\12\11\0\1\12\1\252"+
    "\13\12\43\204\1\253\16\204\7\0\3\12\3\0\5\12"+
    "\1\254\3\12\3\0\3\12\11\0\15\12\7\0\3\12"+
    "\3\0\11\12\3\0\2\12\1\255\11\0\15\12\7\0"+
    "\3\12\3\0\1\12\1\256\7\12\3\0\3\12\11\0"+
    "\15\12\7\0\3\12\3\0\11\12\3\0\3\12\11\0"+
    "\1\12\1\257\13\12\7\0\3\12\3\0\11\12\3\0"+
    "\3\12\11\0\1\12\1\260\13\12\7\0\3\12\3\0"+
    "\11\12\3\0\1\261\2\12\11\0\15\12\7\0\3\12"+
    "\3\0\5\12\1\262\3\12\3\0\3\12\11\0\15\12"+
    "\7\0\3\12\3\0\11\12\3\0\3\12\11\0\5\12"+
    "\1\263\7\12\7\0\3\12\3\0\7\12\1\264\1\12"+
    "\3\0\3\12\11\0\15\12\7\0\3\12\3\0\1\12"+
    "\1\265\7\12\3\0\3\12\11\0\15\12\7\0\3\12"+
    "\3\0\5\12\1\266\3\12\3\0\3\12\11\0\15\12"+
    "\7\0\3\12\3\0\10\12\1\267\3\0\3\12\11\0"+
    "\15\12\7\0\3\12\3\0\11\12\3\0\3\12\11\0"+
    "\1\12\1\270\13\12\7\0\3\12\3\0\4\12\1\271"+
    "\4\12\3\0\3\12\11\0\15\12\7\0\3\12\3\0"+
    "\6\12\1\272\2\12\3\0\3\12\11\0\15\12\7\0"+
    "\3\12\3\0\7\12\1\273\1\12\3\0\3\12\11\0"+
    "\15\12\7\0\3\12\3\0\11\12\3\0\3\12\11\0"+
    "\5\12\1\274\1\275\6\12\7\0\3\12\3\0\11\12"+
    "\3\0\3\12\11\0\13\12\1\276\1\12\7\0\3\12"+
    "\3\0\11\12\3\0\2\12\1\277\11\0\15\12\7\0"+
    "\3\12\3\0\10\12\1\300\3\0\3\12\11\0\15\12"+
    "\7\0\3\12\3\0\11\12\3\0\3\12\11\0\1\12"+
    "\1\301\13\12\7\0\3\12\3\0\11\12\3\0\1\12"+
    "\1\302\1\12\11\0\15\12\7\0\3\12\3\0\10\12"+
    "\1\303\3\0\3\12\11\0\6\12\1\304\6\12\7\0"+
    "\3\12\3\0\11\12\3\0\3\12\11\0\5\12\1\305"+
    "\7\12\7\0\3\12\3\0\11\12\3\0\1\12\1\306"+
    "\1\12\11\0\15\12\7\0\3\12\3\0\7\12\1\307"+
    "\1\12\3\0\3\12\11\0\15\12\7\0\3\12\3\0"+
    "\10\12\1\310\3\0\3\12\11\0\15\12\7\0\3\12"+
    "\3\0\11\12\3\0\1\311\2\12\11\0\15\12\7\0"+
    "\3\12\3\0\11\12\3\0\3\12\11\0\7\12\1\312"+
    "\5\12\7\0\3\12\3\0\7\12\1\313\1\12\3\0"+
    "\3\12\11\0\15\12\7\0\3\12\3\0\10\12\1\314"+
    "\3\0\3\12\11\0\15\12\7\0\3\12\3\0\11\12"+
    "\3\0\3\12\11\0\1\12\1\315\13\12\7\0\3\12"+
    "\3\0\11\12\3\0\2\12\1\316\11\0\15\12\7\0"+
    "\3\12\3\0\11\12\3\0\3\12\11\0\1\12\1\317"+
    "\13\12\7\0\3\12\3\0\11\12\3\0\1\12\1\320"+
    "\1\12\11\0\15\12\7\0\3\12\3\0\11\12\3\0"+
    "\2\12\1\321\11\0\15\12\7\0\3\12\3\0\11\12"+
    "\3\0\3\12\11\0\1\12\1\322\13\12\7\0\3\12"+
    "\3\0\11\12\3\0\3\12\11\0\1\12\1\323\13\12"+
    "\7\0\3\12\3\0\10\12\1\324\3\0\3\12\11\0"+
    "\15\12\7\0\3\12\3\0\11\12\3\0\3\12\11\0"+
    "\1\12\1\325\13\12\7\0\3\12\3\0\4\12\1\326"+
    "\4\12\3\0\3\12\11\0\15\12\7\0\3\12\3\0"+
    "\11\12\3\0\3\12\11\0\1\327\14\12\7\0\3\12"+
    "\3\0\3\12\1\330\5\12\3\0\3\12\11\0\15\12"+
    "\7\0\3\12\3\0\11\12\3\0\3\12\11\0\1\12"+
    "\1\331\13\12\7\0\3\12\3\0\11\12\3\0\3\12"+
    "\11\0\2\12\1\332\12\12\7\0\3\12\3\0\11\12"+
    "\3\0\3\12\11\0\1\12\1\333\13\12\7\0\3\12"+
    "\3\0\11\12\3\0\2\12\1\334\11\0\15\12\7\0"+
    "\3\12\3\0\11\12\3\0\3\12\11\0\6\12\1\335"+
    "\6\12\7\0\3\12\3\0\1\336\10\12\3\0\3\12"+
    "\11\0\15\12\7\0\3\12\3\0\11\12\3\0\2\12"+
    "\1\337\11\0\15\12\7\0\3\12\3\0\1\340\10\12"+
    "\3\0\3\12\11\0\15\12\7\0\3\12\3\0\1\12"+
    "\1\341\7\12\3\0\3\12\11\0\15\12\7\0\3\12"+
    "\3\0\11\12\3\0\1\342\2\12\11\0\15\12\7\0"+
    "\3\12\3\0\10\12\1\343\3\0\3\12\11\0\15\12"+
    "\7\0\3\12\3\0\1\344\10\12\3\0\3\12\11\0"+
    "\15\12\7\0\3\12\3\0\11\12\3\0\1\345\2\12"+
    "\11\0\15\12\7\0\3\12\3\0\1\346\10\12\3\0"+
    "\3\12\11\0\15\12\7\0\3\12\3\0\11\12\3\0"+
    "\3\12\11\0\5\12\1\347\7\12\7\0\3\12\3\0"+
    "\11\12\3\0\3\12\11\0\1\12\1\350\13\12\7\0"+
    "\3\12\3\0\11\12\3\0\1\351\2\12\11\0\15\12"+
    "\7\0\3\12\3\0\10\12\1\352\3\0\3\12\11\0"+
    "\15\12\7\0\3\12\3\0\4\12\1\353\4\12\3\0"+
    "\3\12\11\0\15\12\7\0\3\12\3\0\11\12\3\0"+
    "\1\12\1\354\1\12\11\0\15\12\7\0\3\12\3\0"+
    "\11\12\3\0\3\12\11\0\1\355\14\12\7\0\3\12"+
    "\3\0\11\12\3\0\3\12\11\0\1\356\14\12\7\0"+
    "\3\12\3\0\3\12\1\357\5\12\3\0\3\12\11\0"+
    "\15\12\7\0\3\12\3\0\11\12\3\0\2\12\1\360"+
    "\11\0\15\12\7\0\3\12\3\0\11\12\3\0\1\12"+
    "\1\361\1\12\11\0\15\12\7\0\3\12\3\0\11\12"+
    "\3\0\3\12\11\0\5\12\1\362\7\12\7\0\3\12"+
    "\3\0\11\12\3\0\1\12\1\363\1\12\11\0\15\12"+
    "\7\0\3\12\3\0\11\12\3\0\3\12\11\0\5\12"+
    "\1\364\7\12\7\0\3\12\3\0\10\12\1\365\3\0"+
    "\3\12\11\0\15\12\7\0\3\12\3\0\4\12\1\366"+
    "\4\12\3\0\3\12\11\0\15\12\7\0\3\12\3\0"+
    "\11\12\3\0\2\12\1\367\11\0\15\12\7\0\3\12"+
    "\3\0\11\12\3\0\3\12\11\0\1\12\1\370\13\12"+
    "\7\0\3\12\3\0\11\12\3\0\2\12\1\371\11\0"+
    "\15\12\7\0\3\12\3\0\11\12\3\0\3\12\11\0"+
    "\1\12\1\372\13\12\7\0\3\12\3\0\10\12\1\373"+
    "\3\0\3\12\11\0\15\12\7\0\3\12\3\0\11\12"+
    "\3\0\1\374\2\12\11\0\15\12\7\0\3\12\3\0"+
    "\4\12\1\375\4\12\3\0\3\12\11\0\15\12\7\0"+
    "\3\12\3\0\11\12\3\0\2\12\1\376\11\0\15\12"+
    "\7\0\3\12\3\0\10\12\1\377\3\0\3\12\11\0"+
    "\15\12\7\0\3\12\3\0\1\12\1\u0100\7\12\3\0"+
    "\3\12\11\0\15\12\7\0\3\12\3\0\4\12\1\u0101"+
    "\4\12\3\0\3\12\11\0\15\12\7\0\3\12\3\0"+
    "\11\12\3\0\1\12\1\u0102\1\12\11\0\15\12";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  9,  1,  9,  1,  9,  1,  1,  1,  9,  9,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  9,  1,  9, 
     9,  9,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     9,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  1,  0,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    public Lexer(ComplexSymbolFactory sf, FileInputStream is) {
        this(is);
        symbolFactory = sf;
    }
    public Lexer(ComplexSymbolFactory sf, java.io.Reader reader) {
        this(reader);
        symbolFactory = sf;
    }

    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    private Symbol symbol(String name, int code) {
        return symbolFactory.newSymbol(name, code,
                            new Location(yyline+1, yycolumn+1, yychar),
                            new Location(yyline+1, yycolumn+yylength(), yychar+yylength()));
    }
    public Symbol symbol(String nome, int code, Integer lexem){
        return symbolFactory.newSymbol(nome, code,
						new Location(yyline+1, yycolumn +1, yychar),
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    public Symbol symbol(String nome, int code, Double lexem){
      return symbolFactory.newSymbol(nome, code,
              new Location(yyline+1, yycolumn +1, yychar),
              new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    public Symbol symbol(String nome, int code, String lexem){
      return symbolFactory.newSymbol(nome, code,
              new Location(yyline+1, yycolumn +1, yychar),
              new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }

    protected void emit_warning(String message){
        System.out.println("lexicalAnalyzer warning: " + message + " at : 2 "+
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[9050];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 75: 
          {  return symbol("TO", TO);  }
        case 259: break;
        case 69: 
          {  return symbol("GE", GE);  }
        case 260: break;
        case 67: 
          {  return symbol("LE", LE);  }
        case 261: break;
        case 60: 
          {  return symbol("OF", OF);  }
        case 262: break;
        case 59: 
          {  return symbol("OR", OR);  }
        case 263: break;
        case 56: 
          {  return symbol("IF", IF);  }
        case 264: break;
        case 55: 
          {  return symbol("IN", IN);  }
        case 265: break;
        case 52: 
          {  return symbol("DO", DO);  }
        case 266: break;
        case 9: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 25: 
        case 26: 
        case 27: 
        case 37: 
        case 38: 
        case 39: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 51: 
        case 53: 
        case 54: 
        case 57: 
        case 58: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 76: 
        case 77: 
        case 78: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 114: 
        case 117: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 124: 
        case 128: 
        case 129: 
        case 130: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 138: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 164: 
        case 165: 
        case 166: 
        case 173: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 199: 
        case 200: 
        case 203: 
        case 205: 
        case 206: 
        case 210: 
        case 211: 
        case 212: 
        case 214: 
        case 215: 
        case 217: 
        case 218: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 230: 
        case 231: 
        case 232: 
        case 234: 
        case 236: 
        case 237: 
        case 239: 
        case 240: 
        case 241: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 248: 
        case 251: 
        case 252: 
        case 253: 
        case 255: 
        case 256: 
          {  return symbol("ID", ID);  }
        case 267: break;
        case 22: 
          {  return symbol("LT", LT);  }
        case 268: break;
        case 24: 
          {  return symbol("GT", GT);  }
        case 269: break;
        case 2: 
        case 6: 
          {  emit_warning("Caracter não reconhecido " + yytext() + " -- ignorado");  }
        case 270: break;
        case 209: 
          {  return symbol("WHILE", WHILE);  }
        case 271: break;
        case 254: 
          {  return symbol("CONSTRUCTOR", CONSTRUCTOR);  }
        case 272: break;
        case 250: 
          {  return symbol("DESTRUCTOR", DESTRUCTOR);  }
        case 273: break;
        case 202: 
          {  return symbol("UNTIL", UNTIL);  }
        case 274: break;
        case 233: 
          {  return symbol("INTEGER", INTEGER);  }
        case 275: break;
        case 220: 
          {  return symbol("STRING", STRING);  }
        case 276: break;
        case 5: 
          {  return symbol("MULTIPLY", MULTIPLY);  }
        case 277: break;
        case 80: 
          {  return symbol("ASSIGN", ASSIGN);  }
        case 278: break;
        case 247: 
          {  return symbol("INTERFACE", INTERFACE);  }
        case 279: break;
        case 36: 
          {  return symbol("DOUBLEQUOTE", DOUBLEQUOTE);  }
        case 280: break;
        case 35: 
          {  return symbol("SINGLEQUOTE", SINGLEQUOTE);  }
        case 281: break;
        case 238: 
          {  return symbol("PROGRAM", PROGRAM);  }
        case 282: break;
        case 235: 
          {  return symbol("BOOLEAN", BOOLEAN);  }
        case 283: break;
        case 223: 
          {  return symbol("FOWARD", FOWARD);  }
        case 284: break;
        case 213: 
          {  return symbol("DOWNTO", DOWNTO);  }
        case 285: break;
        case 216: 
          {  return symbol("INLINE", INLINE);  }
        case 286: break;
        case 12: 
          {  return symbol("MINUS", MINUS);  }
        case 287: break;
        case 79: 
          {  return symbol("DOUBLEDOT", DOUBLEDOT);  }
        case 288: break;
        case 198: 
          {  return symbol("LABEL", LABEL);  }
        case 289: break;
        case 13: 
          {  return symbol("DIVIDE", DIVIDE);  }
        case 290: break;
        case 204: 
          {  return symbol("FALSE", FALSE);  }
        case 291: break;
        case 249: 
          {  return symbol("PROCEDURE", PROCEDURE);  }
        case 292: break;
        case 222: 
          {  return symbol("REPEAT", REPEAT);  }
        case 293: break;
        case 221: 
          {  return symbol("RECORD", RECORD);  }
        case 294: break;
        case 23: 
          {  return symbol("EQUAL", EQUAL);  }
        case 295: break;
        case 242: 
          {  return symbol("FUNCTION", FUNCTION);  }
        case 296: break;
        case 32: 
          {  return symbol("CARET", CARET);  }
        case 297: break;
        case 29: 
          {  return symbol("COMMA", COMMA);  }
        case 298: break;
        case 30: 
          {  return symbol("COLON", COLON);  }
        case 299: break;
        case 31: 
          {  return symbol("SEMICOLON", SEMICOLON);  }
        case 300: break;
        case 208: 
          {  return symbol("CONST", CONST);  }
        case 301: break;
        case 207: 
          {  return symbol("BEGIN", BEGIN);  }
        case 302: break;
        case 219: 
          {  return symbol("OBJECT", OBJECT);  }
        case 303: break;
        case 257: 
          {  return symbol("IMPLEMENTATION", IMPLEMENTATION);  }
        case 304: break;
        case 229: 
          {  return symbol("PACKED", PACKED);  }
        case 305: break;
        case 132: 
          {  return symbol("CHARACTER", CHARACTER);  }
        case 306: break;
        case 170: 
          {  return symbol("STRINGCHARACTER", STRINGCHARACTER);  }
        case 307: break;
        case 201: 
          {  return symbol("ARRAY", ARRAY);  }
        case 308: break;
        case 90: 
        case 103: 
        case 105: 
          {  return symbol("NUMREAL", NUMREAL, Double.parseDouble(yytext()));  }
        case 309: break;
        case 10: 
        case 40: 
          {  return symbol("NUMINT", NUMINT, Integer.parseInt(yytext()));  }
        case 310: break;
        case 106: 
          {  return symbol("DIV", DIV);  }
        case 311: break;
        case 28: 
          {  return symbol("DOT", DOT);  }
        case 312: break;
        case 112: 
          {  return symbol("VAR", VAR);  }
        case 313: break;
        case 113: 
          {  return symbol("MOD", MOD);  }
        case 314: break;
        case 115: 
          {  return symbol("SHL", SHL);  }
        case 315: break;
        case 116: 
          {  return symbol("SHR", SHR);  }
        case 316: break;
        case 118: 
          {  return symbol("SET", SET);  }
        case 317: break;
        case 123: 
          {  return symbol("ASM", ASM);  }
        case 318: break;
        case 125: 
          {  return symbol("AND", AND);  }
        case 319: break;
        case 126: 
          {  return symbol("NIL", NIL);  }
        case 320: break;
        case 127: 
          {  return symbol("NOT", NOT);  }
        case 321: break;
        case 137: 
          {  return symbol("END", END);  }
        case 322: break;
        case 139: 
          {  return symbol("FOR", FOR);  }
        case 323: break;
        case 153: 
          {  return symbol("XOR", XOR);  }
        case 324: break;
        case 68: 
          {  return symbol("DIFF", DIFF);  }
        case 325: break;
        case 34: 
          {  return symbol("RBRA", RBRA);  }
        case 326: break;
        case 33: 
          {  return symbol("LBRA", LBRA);  }
        case 327: break;
        case 11: 
          {  return symbol("PLUS", PLUS);  }
        case 328: break;
        case 7: 
          {  return symbol("RPAR", RPAR);  }
        case 329: break;
        case 4: 
          {  return symbol("LPAR", LPAR);  }
        case 330: break;
        case 163: 
          {  return symbol("REAL", REAL);  }
        case 331: break;
        case 167: 
          {  return symbol("THEN", THEN);  }
        case 332: break;
        case 168: 
          {  return symbol("TRUE", TRUE);  }
        case 333: break;
        case 169: 
          {  return symbol("TYPE", TYPE);  }
        case 334: break;
        case 171: 
          {  return symbol("USES", USES);  }
        case 335: break;
        case 172: 
          {  return symbol("UNIT", UNIT);  }
        case 336: break;
        case 174: 
          {  return symbol("ELSE", ELSE);  }
        case 337: break;
        case 175: 
          {  return symbol("FILE", FILE);  }
        case 338: break;
        case 182: 
          {  return symbol("CHAR", CHAR);  }
        case 339: break;
        case 183: 
          {  return symbol("CASE", CASE);  }
        case 340: break;
        case 184: 
          {  return symbol("GOTO", GOTO);  }
        case 341: break;
        case 185: 
          {  return symbol("WITH", WITH);  }
        case 342: break;
        case 3: 
        case 8: 
        case 154: 
          {   }
        case 343: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbol("EOF", sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
