/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package SintaxAnalizer;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};
/* Terminals (tokens returned by the scanner). */
terminal            Plus,Minus,Multiply,Divide; // operadores aritmeticos
terminal			Dot,DoubleDot,Comma,Colon,SemiColon,Caret,Assign; 
terminal 			Lpar,Rpar,LBra,RBra;
terminal 			LT,LE,Gt,GE,Equal,Diff;
terminal			Id,Chr,Str,Comment;
terminal			And,Array,Asm,Begin,Boolean,Case,Char,Const,Constructor,Destructor,Div,Do,Downto,Else,End,False,File,For,Foward,Function,Goto,If,Implementation,In,Inline,Integer,Interface,Label,Mod,Nil,Not,object,Of,Or,Packed,Procedure,Program,Record,Repeat,Set,Shl,Shr,String,Then,To,True,Type,Unit,Until,Uses,Var,While,With,Xor;
terminal Integer    NumInt;        // our scanner provides numbers as integers
terminal float  	NumReal;

/* Non terminals */
non terminal            expr_list,Program_Heading,Prog,Block,Id_List,Label_Declaration_Part,Type_Definition_Part;
non terminal 			Variable_Declaration_Part,Procedure_And_Function_Part,Compound_Statement;
non terminal			Label_Declaration_aux,Type_Definition_aux,Type_Definition,Type_Denoter,New_Type,New_Ordinary_Type,Array_Type,Ordinal_Type,Ordinal_Type_aux;
non terminal 			New_Ordinal_Type,Enumerated_Type,SubRange_Type,Constant; 			
non terminal Integer    expr;      // used to store evaluated subexpressions

/* Precedences */
precedence nonassoc RBra;	// Inserted by Eclipse plugin
precedence nonassoc SemiColon;	// Inserted by Eclipse plugin
precedence left Plus,Minus;
precedence left Multiply,Divide;

/* The grammar rules */
Prog ::= Program_Heading SemiColon Block Dot;

Program_Heading ::= Program Id | LPar Id_List RPar;

Id_List ::= Id | Comma Id_List |;

Block ::= Label_Declaration_Part | Type_Definition_Part Variable_Declaration_Part Procedure_And_Function_Part Compound_Statement;

Label_Declaration_Part ::= Label Id Label_Declaration_aux SemiColon; // optional
Label_Declaration_aux ::= Comma Id | Label_Declaration_aux|/*vazio*/ ;

Type_Definition_Part ::= Type Type_Definition SemiColon Type_Definition_aux SemiColon;
Type_Definition_aux ::= Type_Definition | Type_Definition_aux|/*vazio*/ ;
Type_Definition ::= Id Equal Type_Denoter;
Type_Denoter ::= Id | New_Type;
New_Type ::= New_Ordinary_Type | Array_Type;
Array_Type ::= Array LBra Ordinal_Type Ordinal_Type_aux RBra Of Type_Denoter;
Ordinal_Type_aux ::= Comma Ordinal_Type | Ordinal_Type_aux | /*vazio*/;
Ordinal_Type ::= New_Ordinal_Type | Id;
New_Ordinal_Type ::= Enumerated_Type | SubRange_Type;
Enumerated_Type ::= LPar Id_List RPar;
SubRange_Type ::= Constant DoubleDot Constant;
Constant ::= NumInt;
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e); :}
            | expr:e SEMI                   {: System.out.println(e); :}
            ;
            
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;        :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;        :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;        :}
             | MINUS expr:e                 {: RESULT = -e;           :}
             %prec UMINUS
             | LPAREN expr:e RPAREN	         {: RESULT = e;           :}
             | NUMBER:n	                     {: RESULT = n;           :}
             ;
       
