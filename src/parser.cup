/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package SintaxAnalizer;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};
/* Terminals (tokens returned by the scanner). */
terminal            PLUS, MINUS, MULTIPLY, DIVIDE; // operadores aritmeticos
terminal			DOT, DOUBLEDOT, COMMA, COLON, SEMICOLON, CARET, ASSIGN; 
terminal 			LPAR, RPAR, LBRA, RBRA, SINGLEQUOTES;
terminal 			LT,LE,GT,GE,EQUAL,DIFF;
terminal			ID,CHR,STR,COMMENT;
terminal			AND, ARRAY, ASM, BEGIN, BOOLEAN, CASE, CHAR, CONST, CONSTRUCTOR, DESTRUCTOR, 
					DIV, DO, DOWNTO, ELSE, END, FALSE, FILE, FOR, FOWARD, FUNCTION, GOTO,
					IF, IMPLEMENTATION, IN, INLINE, INTEGER, INTERFACE, LABEL, MOD, NIL, NOT, 
					OBJECT, OF, OR, PACKED, PROCEDURE, PROGRAM, RECORD, REPEAT, SET, SHL, SHR, 
					STRING, THEN, TO, TRUE, TYPE, UNIT, UNTIL, USES, VAR, WHILE, WITH, XOR;
terminal Integer    NUMINT;        // our scanner provides numbers as integers
terminal float  	NumReal;

/* Non terminals */
non terminal            expr_list,Program_Heading,Prog,Block,Id_List,Label_Declaration_Part, Label, Type_Definition_Part;
non terminal 			Variable_Declaration_Part,Procedure_And_Function_Part,Procedure_and_Function_Declaration_Part,Procedure_and_Function_Declaration_aux,Procedure_or_Function_Declaration;
non terminal			Label_Declaration_aux,Type_Definition_aux,Type_Definition,Type_Denoter,New_Type,New_Ordinary_Type,Array_Type,Ordinal_Type,Ordinal_Type_aux;
non terminal 			New_Ordinal_Type,Enumerated_Type,SubRange_Type,Constant,Character_String,String_Element,String_Element_aux,String_Character,Variable_Declaration,Variable_Declaration_aux; 			
non terminal 			Procedure_Declaration, Function_Declaration, Procedure_Heading, Function_Heading, Procedure, Function;
non terminal 			Formal_Parameter_List, Result_Type, Formal_Parameter_Section, Formal_Parameter_Section_aux;
non terminal 			Value_Parameter_Specification, Variable_Parameter_Specification, Conformant_Array_Parameter_Specification;
non terminal 			Value_Conformant_Array_Specification, Variable_Conformant_Array_Specification, Conformant_Array_Schema;
non terminal 			Index_Type_Specification, Index_Type_Specification_aux, Identifier_or_Conformant_Array_Schema;
non terminal 			Compound_Statement, Statement_Sequence, Statement_aux, Statement, Simple_or_Structured_Statement;
non terminal 			Simple_Statement, Empty_Statement, Assignment_Statement, Variable_Access, Indexed_Variable, Expression_aux;
non terminal 			Procedure_Statement, Actual_Parameter_List, Actual_Parameter_aux, Actual_Parameter, Goto_Statement;
non terminal 			Structured_Statement, If_Statement, Else_Part, While_Statement;
non terminal 			Expression, Relational_Operator , Simple_Expression, Term_aux, Term, Factor_aux, Factor;
non terminal 			Multiplying_Operator, Adding_Operator, Unsigned_Constant, Function_Designator;
non terminal			Sign_aux, Sign, Id_List_aux;
non terminal Integer    expr;      // used to store evaluated subexpressions

/* Precedences */
precedence nonassoc RBRA;	// Inserted by Eclipse plugin
precedence nonassoc SEMICOLON;	// Inserted by Eclipse plugin
precedence left PLUS,MINUS;
precedence left MULTIPLY,DIVIDE;

/* The grammar rules */
Prog ::= Program_Heading SEMICOLON Block DOT;
Program_Heading ::= PROGRAM ID | PROGRAM ID LPAR Id_List RPAR;

Id_List ::= ID Id_List_aux;
Id_List_aux ::= COMMA ID Id_List_aux | /*vazio*/ ;

Block ::= Label_Declaration_Part Type_Definition_Part Variable_Declaration_Part Procedure_And_Function_Part Compound_Statement;

Label_Declaration_Part ::= LABEL Label Label_Declaration_aux SEMICOLON | /*vazio*/; // optional
Label_Declaration_aux ::= COMMA Label Label_Declaration_aux | /*vazio*/ ;
Label ::= Digit_Sequence ;

Type_Definition_Part ::= TYPE Type_Definition SEMICOLON Type_Definition_aux | /*vazio*/ ;
Type_Definition_aux ::= Type_Definition SEMICOLON Type_Definition_aux | /*vazio*/ ;
Type_Definition ::= ID EQUAL Type_Denoter;
Type_Denoter ::= ID | New_Type;
New_Type ::= New_Ordinary_Type | Array_Type;
Array_Type ::= ARRAY LBRA Ordinal_Type Ordinal_Type_aux RBRA OF Type_Denoter;
Ordinal_Type_aux ::= COMMA Ordinal_Type Ordinal_Type_aux | /*vazio*/;
Ordinal_Type ::= New_Ordinal_Type | ID;
New_Ordinal_Type ::= Enumerated_Type | SubRange_Type;
Enumerated_Type ::= LPAR Id_List RPAR;
SubRange_Type ::= Constant DOUBLEDOT Constant;
Constant ::= Sign_aux NUMINT | Character_String; // NUMINT -> UnsignedNumber
Sign_aux::= Sign | /*vazio*/ ;
Sign ::= PLUS | MINUS ;
Character_String ::= SINGLEQUOTES String_Element String_Element_aux SINGLEQUOTES; // string element ? 
String_Element_aux::= String_Character String_Element_aux | /*vazio*/;
String_Character::= CHAR;

Variable_Declaration_Part ::= VAR Variable_Declaration SEMICOLON Variable_Declaration_aux | /*vazio*/;
Variable_Declaration_aux ::= Variable_Declaration SEMICOLON Variable_Declaration_aux | /*vazio*/;
Variable_Declaration ::= Id_List COLON Type_Denoter;

Procedure_and_Function_Declaration_Part ::= Procedure_and_Function_Declaration_aux ;
Procedure_and_Function_Declaration_aux ::= Procedure_or_Function_Declaration SEMICOLON Procedure_and_Function_Declaration_aux | /*vazio*/ ;
Procedure_or_Function_Declaration ::= Procedure_Declaration | Function_Declaration ;
Procedure_Declaration ::= Procedure_Heading SEMICOLON Block;
Function_Declaration ::= Function_Heading SEMICOLON Block;

Procedure_Heading ::= PROCEDURE ID | PROCEDURE ID Formal_Parameter_List;
Function_Heading ::= FUNCTION ID COLON Result_Type | FUNCTION ID Formal_Parameter_List COLON Result_Type;

Formal_Parameter_List ::= LPAR Formal_Parameter_Section Formal_Parameter_Section_aux RPAR;
Formal_Parameter_Section_aux ::= SEMICOLON Formal_Parameter_Section Formal_Parameter_Section_aux | /*vazio*/ ;
Formal_Parameter_Section ::= Value_Parameter_Specification | Variable_Parameter_Specification | Conformant_Array_Parameter_Specification;

Value_Parameter_Specification::= Id_List COLON ID;
Variable_Parameter_Specification ::= VAR Id_List COLON ID;
Conformant_Array_Parameter_Specification ::= Value_Conformant_Array_Specification | Variable_Conformant_Array_Specification;
Value_Conformant_Array_Specification::= Id_List COLON Conformant_Array_Schema; 
Variable_Conformant_Array_Specification ::= VAR Id_List COLON Conformant_Array_Schema;
Conformant_Array_Schema ::= ARRAY LBRA Index_Type_Specification Index_Type_Specification_aux RBRA OF Identifier_or_Conformant_Array_Schema;
Identifier_or_Conformant_Array_Schema ::= ID | Conformant_Array_Schema ;
Index_Type_Specification_aux ::= SEMICOLON Index_Type_Specification Index_Type_Specification_aux | /*vazio*/;
Index_Type_Specification ::= ID DOUBLEDOT ID COLON Ordinal_Type_Identifier ;

Compound_Statement ::= BEGIN Statement_Sequence END ;
Statement_Sequence ::= Statement Statement_aux ;
Statement_aux ::= SEMICOLON Statement Statement_aux | /*vazio*/ ;
Statement ::= Label COLON Simple_or_Structured_Statement
        | Simple_or_Structured_Statement ;
Simple_or_Structured_Statement ::= Simple_Statement | Structured_Statement ;

Simple_Statement ::= Empty_Statement | Assignment_Statement
        | Procedure_Statement | Goto_Statement ;
Empty_Statement ::= /*vazio*/ ;
Assignment_Statement ::= Variable_Access ASSIGN Expression ;
Variable_Access ::= ID | Indexed_Variable ;
Indexed_Variable ::= Variable_Access LBRA Expression Expression_aux RBRA ;
Expression_aux ::= COMMA Expression Expression_aux | /*vazio*/ ;
Procedure_Statement ::= Procedure_Identifier | Procedure_Identifier Actual_Parameter_List ;
Actual_Parameter_List ::= LPAR Actual_Parameter Actual_Parameter_aux RPAR ;
Actual_Parameter_aux ::= COMMA Actual_Parameter Actual_Parameter_aux | /*vazio*/ ;
Actual_Parameter ::= Expression | Variable_Access ;
Goto_Statement ::= GOTO Label ;

Structured_Statement ::= Compound_Statement | If_Statement | While_Statement ;
If_Statement ::= IF Expression THEN Statement
        | IF Expression THEN Statement Else_Part ;
Else_Part ::= ELSE Statement ;
While_Statement ::= WHILE Expression DO Statement ;

Expression ::= Simple_Expression | Simple_Expression Relational_Operator Simple_Expression ;
Simple_Expression ::= Sign Term Term_aux ;
Term_aux ::= Adding_Operator Term Term_aux | /*vazio*/ ;
Term ::= Factor Factor_aux ;
Factor_aux ::= Multiplying_Operator Factor Factor_aux | /*vazio*/ ;
Factor ::= Variable_Access | Unsigned_Constant | Function_Designator
        | LPAR Expression RPAR | NOT Factor ;
Multiplying_Operator ::= MULTIPLY | DIVIDE | MOD | AND ;
Adding_Operator ::= PLUS | MINUS | OR ;
Relational_Operator ::= LT | LE | GT | GE | EQUAL | DIFF ;
Unsigned_Constant ::= Unsigned_Number | Character_String ;
Function_Designator ::= Function_Identifier | Function_Identifier Actual_Parameter_List ;


expr_list ::= expr_list expr:e SEMICOLON         {: System.out.println(e); :}
            | expr:e SEMICOLON                   {: System.out.println(e); :}
            ;
            
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;        :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;        :}
             | expr:e1 MULTIPLY expr:e2        {: RESULT = e1*e2;        :}
             | MINUS expr:e                 {: RESULT = -e;           :}
             %prec UMINUS
             | LPAR expr:e RPAR	         {: RESULT = e;           :}
             | NUMBER:n	                     {: RESULT = n;           :}
             ;
       
